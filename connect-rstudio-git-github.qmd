# Conectar RStudio a Git y GitHub {#sec-rstudio-git-github}

Aquí verificamos que RStudio puede emitir comandos Git en su nombre. Suponiendo que haya conseguido que Git local se comunique con GitHub, esto significa que también podrá extraer y enviar a GitHub desde RStudio.

En capítulos posteriores y en talleres en vivo, revisamos estas operaciones con mucha más explicación.

Si tiene éxito aquí, su configuración estará HECHA.

## Requisitos previos

Suponemos lo siguiente:

-   Has registrado una cuenta gratuita de GitHub (@sec-github-acct).
-   Has instalado/actualizado R y RStudio (@sec-install-r-rstudio).
-   Has instalado Git (@sec-install-git).
-   Te has presentado a Git (@sec-hello-git).
-   Has confirmado que puedes enviar/extraer desde GitHub desde la línea de comando (@sec-push-pull-github).

También necesitarás un repositorio de prueba en GitHub. Si no tiene un repositorio de prueba adecuado en GitHub, siga las instrucciones de la siguiente sección.

Si acaba de completar el capítulo anterior, [Conectarse a GitHub](#sec-push-pull-github), ¡ese repositorio será perfecto! Sin embargo, le recomiendo que elimine el repositorio *local*, para que pueda experimentar cómo usamos RStudio para clonarlo y obtener una copia local. En realidad, este es un flujo de trabajo al que nos referimos en otros lugares (ver @sec-burn) como "quemarlo todo". Es una estrategia profundamente pragmática para afrontar la situación si su repositorio Git local está estropeado, pero la versión en GitHub es bastante actual.

Elimina la carpeta correspondiente al **repositorio local** como quieras. Es solo un directorio normal en su computadora. Aquí se explica cómo hacerlo en el shell, si el directorio de trabajo actual es `myrepo`:

``` console
cd ..
rm -rf myrepo/
```

## Hacer un repositorio en GitHub

```{r echo = FALSE, results = "asis"}
dat <- list(
  repository_name_text = glue::glue("
    `myrepo` o lo que quieras (lo eliminaremos pronto)."),
  description_text = glue::glue("
    \"Repositorio para probar mi configuración de Git/GitHub\" o similar. Es bueno \\
    Tengo algo aquí, así que lo verás aparecer en el archivo README."),
  initialize_text = "Inicialice este repositorio con: Agregue un archivo README."
)
insert <- glue::glue_data(
  dat,
  readr::read_file("child-create-a-github-repo.Rmd"),
  .open = "<<<", .close = ">>>"
)
res <- knitr::knit_child(text = insert, quiet = TRUE)
cat(res, sep = '\n')
```

## Clona el repositorio de prueba de GitHub en tu computadora a través de RStudio

En RStudio, inicie un nuevo proyecto:

-   *File \> New Project \> Version Control \> Git*. En "URL del repositorio", pegue la URL de su nuevo repositorio de GitHub. será algo como esto `https://github.com/jennybc/myrepo.git`.
    -   ¿NO ve una opción para obtener el proyecto desde el control de versiones? Reinicie RStudio y vuelva a intentarlo. ¿Aún no has tenido suerte? Vaya a @sec-rstudio-see-git para obtener consejos sobre cómo ayudar a RStudio a encontrar Git.
-   Acepte el nombre del directorio del proyecto predeterminado, p. `myrepo`, que coincide con el nombre del repositorio de GitHub.
-   ¡Hazte cargo de... o al menos notalo! - donde el proyecto se guardará localmente. Un error común de los novatos es no tener idea de dónde está guardando los archivos o cuál es su directorio de trabajo. Prestar atención. Sea intencional. Personalmente, haría esto en `~/tmp`.
-   Te sugiero que marques "Abrir en una nueva sesión", ya que eso es lo que normalmente harás en la vida real.
-   Haga clic en "Crear proyecto".

Debería encontrarse en un nuevo proyecto RStudio local que representa su repositorio de prueba en GitHub. Esto debería descargar el archivo `README.md` de GitHub. Busque en el panel del explorador de archivos de RStudio el archivo `README.md`.

## Realizar cambios locales, guardar, confirmar

Desde RStudio, modifique el archivo `README.md`, por ejemplo, agregando la línea "Esta es una línea de RStudio". Guarde sus cambios.

Confirme estos cambios en su repositorio local. ¿Cómo?

De RStudio:

-   Haga clic en la pestaña "Git" en el panel superior derecho.
-   Marque la casilla "Staged" para `README.md`.
-   Si aún no estás en la ventana emergente de Git, haz clic en "Commit".
-   Escriba un mensaje en "Commit message", como por ejemplo "Commit from RStudio".
-   Haga click en "Commit".

## Envíe sus cambios locales en línea a GitHub

Haga clic en el botón verde "Push" para enviar sus cambios locales a GitHub.

No debería experimentar un desafío de credenciales, ya que uno de los requisitos previos fue ingresar exitosamente a GitHub desde la línea de comando (@sec-push-pull-github). El panel Git de RStudio simplemente expone un subconjunto específico de la línea de comando Git y, por lo tanto, una vez que sus credenciales funcionen en el shell, deberían funcionar en RStudio. Si experimenta un desafío de credenciales, eso sugiere que debería echar un vistazo a las sugerencias de solución de problemas para el protocolo elegido, ya sea [HTTPS](#sec-pat-troubleshooting) o [SSH](#sec-ssh-troubleshooting).

## Confirmar el cambio local propagado al control remoto de GitHub

Vuelve al navegador. Supongo que todavía estamos viendo su nuevo repositorio de GitHub.

Actualizar.

Deberías ver el nuevo "Esta es una línea de RStudio" en el archivo README.

Si hace clic en "confirmar", debería ver uno con el mensaje "Confirmar desde RStudio".

Si ha llegado hasta aquí, habrá TERMINADO la configuración. ¡Felicidades!

## Limpiar

Salga de la instancia de RStudio que está abierta en su proyecto de prueba/repositorio Git.

Elimina el repositorio local como quieras. Es solo un directorio normal en su computadora.

Aquí se explica cómo hacerlo en el shell, si el directorio de trabajo actual es `myrepo`:

``` console
cd ..
rm -rf myrepo/
```

En el navegador, vaya a la página de inicio de su repositorio en GitHub. Haga clic en "Configuración".

Desplázate hacia abajo, haz clic en "eliminar repositorio" y haz lo que te pide.
