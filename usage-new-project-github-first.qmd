# Nuevo proyecto, GitHub primero {#sec-new-github-first}

Creamos un nuevo Proyecto, con la secuencia preferida "Primero GitHub, luego RStudio". ¿Por qué preferimos esto? Porque este método de copiar el proyecto desde GitHub a su computadora también configura el repositorio local de Git para su extracción y envío inmediato. Debajo del capó, estamos haciendo "git clone".

De hecho, ya hiciste esto antes durante la configuración (@sec-rstudio-git-github). Lo volvemos a hacer, *con sentimiento*.

El flujo de trabajo es bastante similar para otros administradores de repositorios como GitLab o Bitbucket. A continuación especificaremos cuándo es posible que necesite hacer algo diferente.

## Hacer un repositorio en GitHub

```{r echo = FALSE, results = "asis"}
dat <- list(
  repository_name_text = glue::glue("
    `myrepo` o como quieras ponerle el nombre a tu nuevo proyecto. Acércate a esto \\
    similar a un nombre de variable, en código: descriptivo pero breve, no \\
    espacio en blanco. Se permiten letras, dígitos, `-`, `.` o `_`."),
  description_text = glue::glue("
    \"Análisis de las cosas\" o cualquier breve descripción del proyecto. Escribe \\
    esto para humanos."),
  initialize_text = "Inicialice este repositorio con: Agregue un archivo README."
)
insert <- glue::glue_data(
  dat,
  readr::read_file("child-create-a-github-repo.Rmd"),
  .open = "<<<", .close = ">>>"
)
res <- knitr::knit_child(text = insert, quiet = TRUE)
cat(res, sep = '\n')
```

### GitLab

Inicie sesión en <https://gitlab.com>. Haga clic en el botón "+" en la esquina superior derecha y luego en "Nuevo proyecto".

-   Nombre del proyecto: `myrepo` (o lo que desees)\
-   Público
-   SÍ Inicializar el repositorio con un README

Haga clic en el gran botón verde "Crear proyecto".

Copie la URL de clonación HTTPS o SSH a su portapapeles mediante el botón azul "Clonar".

### Bitbucket

Inicie sesión en <https://bitbucket.org>. En el panel del lado izquierdo, haga clic en el botón "+" y luego en "Repositorio" en "Crear".

-   Nombre del repositorio: `myrepo` (o el que desees)
-   Nivel de acceso: desmarque para hacer público el repositorio.
-   ¿Incluir un archivo README?: seleccione "Sí, con un tutorial (para principiantes)" o "Sí, con una plantilla".
-   Sistema de control de versiones: Git

Click the big blue button "Create repository."

Copie la URL de clonación HTTPS o SSH que aparece al hacer clic en el botón azul "Clonar". Asegúrate de eliminar el `git clone...` que aparece al principio.

## Nuevo proyecto RStudio a través de git clone {#sec-new-rstudio-project-via-git}

```{r echo = FALSE, results = "asis"}
insert <- readr::read_file("child-clone-a-github-repo.Rmd")
res <- knitr::knit_child(text = insert, quiet = TRUE)
cat(res, sep = '\n')
```

### Mira alrededor

Independientemente de si usó usethis o RStudio, ahora debería estar trabajando en el nuevo repositorio de Git. El `git clone` implícito debería descargar el archivo `README.md` que creamos en GitHub en el paso anterior. Busque en el panel del explorador de archivos de RStudio el archivo `README.md`.

Hay una gran ventaja en el flujo de trabajo "GitHub primero, luego RStudio": el repositorio remoto de GitHub está configurado como el remoto `origin` para su repositorio local y su rama `main` local ahora está rastreando el `main` en GitHub. Este es un punto técnico pero importante sobre Git. La implicación práctica es que ahora está preparado para empujar y tirar. No es necesario perder el tiempo configurando controles remotos de Git y rastreando ramas en la línea de comando.

Estamos a punto de confirmar que estamos preparados para realizar push and pulls.

![Pull y push.](img/github-pull-push.jpeg){width="60%"}

### Opcional: echar un vistazo debajo del capó

Actividad completamente opcional: use la línea de comando Git para ver de qué estamos hablando arriba, es decir, la configuración de la rama remota y de seguimiento.

`git remote -v` o `git remote --verbose` muestra los controles remotos que ha configurado. Así es como se ve alguien que usa HTTPS con GitHub y lo llama `origin`:

``` console
~/tmp/myrepo % git remote -v
origin  https://github.com/jennybc/myrepo.git (fetch)
origin  https://github.com/jennybc/myrepo.git (push)
```

`git branch -vv` imprime información sobre la rama actual (`-vv` para "muy detallado", supongo). En particular, podemos ver que el `main` local está rastreando la rama `main` en `origin`, también conocido como `origin/main`.

``` console
~/tmp/myrepo % git branch -vv
* main 2899c91 [origin/main] A commit from my local computer
```

Finalmente, `git remote show origin` ofrece otra visión de información útil sobre ramas y remotos:

``` console
~/tmp/myrepo % git remote show origin    
* remote origin
  Fetch URL: https://github.com/jennybc/myrepo.git
  Push  URL: https://github.com/jennybc/myrepo.git
  HEAD branch: main
  Remote branch:
    main tracked
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (up to date)
```

`git clone`, que RStudio hizo por nosotros, configura todo esto automáticamente. Es por eso que "Primero GitHub, luego RStudio" es la forma preferida de iniciar proyectos temprano en su vida de Git/GitHub.

## Realizar cambios locales, guardar, confirmar

**Haga esto cada vez que termine una parte valiosa del trabajo, probablemente muchas veces al día.**

Desde RStudio, modifique el archivo `README.md`, por ejemplo, agregando la línea "Esta es una línea de RStudio". Guarde sus cambios.

Confirme estos cambios en su repositorio local. ¿Cómo?

-   Haga clic en la pestaña "Git" en el panel superior derecho
-   Marque la casilla "Staged" para cualquier archivo cuya existencia o modificaciones desee confirmar.
    -   Para ver más detalles sobre los cambios en el archivo desde la última confirmación, haga clic en "Diff" para ver una ventana emergente de Git.
-   Si aún no estás en la ventana emergente de Git, haz clic en "Commit".
-   Escriba un mensaje en "Commit message", como "Commit from RStudio".
-   Haga clic en "Commit"

## Envía tus cambios locales a GitHub

**Haga esto varias veces al día, pero posiblemente con menos frecuencia de lo que se compromete.**

Tiene un nuevo trabajo en su repositorio Git local, pero los cambios aún no están en línea.

Esto parecerá contradictorio, pero primero detengámonos y salgamos de GitHub.

¿Por qué? ¡Establece este hábito para el futuro! Si realiza cambios en el repositorio en el navegador o desde otra máquina o (un día) un colaborador lo ha enviado, estará más feliz si realiza esos cambios antes de intentar enviar.

Haga clic en el botón azul "Pull" en la pestaña "Git" en RStudio. Dudo que suceda algo, es decir, recibirás el mensaje "Already up-to-date". Esto es sólo para establecer un hábito.

Haga clic en el botón verde "Push" para enviar sus cambios locales a GitHub. RStudio informará algo como esto:

``` console
>>> /usr/bin/git push origin HEAD:refs/heads/main
To https://github.com/jennybc/myrepo.git
   2899c91..b34cade  HEAD -> main
```

## Confirmar el cambio local propagado al control remoto de GitHub

Vuelve al navegador. Supongo que todavía estamos viendo su nuevo repositorio de GitHub.

Actualizar.

Deberías ver el nuevo "Esta es una línea de RStudio" en el archivo README.

Si hace clic en "commit", debería ver uno con el mensaje "Commit from RStudio".

## Haz un cambio en GitHub

Haga clic en README.md en la lista de archivos en GitHub.

En la esquina superior derecha, haga clic en el lápiz para "Editar este archivo".

Agregue una línea a este archivo, como "Línea agregada desde GitHub".

Edite el mensaje de commit en "Confirmar cambios" o acepte el valor predeterminado.

Haga clic en el gran botón verde "Confirmar cambios".

### GitLab

Haga clic en README.md en la lista de archivos en GitLab.

En la esquina superior derecha, haga clic en "Editar".

Agregue una línea a este archivo, como "Línea agregada desde GitLab".

Edite el mensaje de confirmación en "Confirmar cambios" o acepte el valor predeterminado.

Haga clic en el gran botón verde "Confirmar cambios".

### Bitbucket

Haga clic en README.md en la lista de archivos de Bitbucket.

En la esquina superior derecha, haga clic en "Editar".

Agregue una línea a este archivo, como "Línea agregada desde Bitbucket".

Haga clic en el botón azul "Confirmar". Aparecerá una ventana emergente. Edite el mensaje de confirmación o acepte el valor predeterminado.

Haga clic en el botón azul "Confirmar".

## Extraer de GitHub

De vuelta en RStudio localmente...

Inspeccione su README.md. NO debería tener la línea "Línea agregada desde GitHub". Debe quedar como lo dejaste. Comprueba eso.

Haga clic en el botón azul Pull.

Mire README.md nuevamente. Ahora deberías ver la nueva línea allí.

## El fin

```{r echo = FALSE, results = "asis"}
cat(readLines("child-the-end-of-repo-setup.Rmd"), sep = '\n')
```
