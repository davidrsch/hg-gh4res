# Preséntate a Git {#sec-hello-git}

En el shell (@sec-shell):

``` bash
git config --global user.name "Jane Doe"
git config --global user.email "jane@example.com"
git config --global --list
```

sustituyendo su nombre y **el correo electrónico asociado con su cuenta de GitHub**.

El [paquete usethis](https://usethis.r-lib.org) ofrece un enfoque alternativo. Puede configurar su nombre de usuario de Git y su correo electrónico desde R:

```{r, eval = FALSE}
## instálelo si es necesario (haga esto exactamente una vez):
## install.packages("usethis")

library(usethis)
use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")
```

## Más sobre `git config`

Una manera fácil de acceder a un shell desde RStudio es *Tools \> Terminal* or *Tools \> Shell*. Más sobre el shell en el @sec-shell.

Problemas especiales de Windows: si tiene problemas con Windows, considere que existen diferentes tipos de shell y es posible que esté en el equivocado. Desea estar en un shell "Git Bash", a diferencia de Power Shell o el símbolo del sistema heredado `cmd.exe`. Lea más en [el Apéndice](#sec-windows-shell-hell). Esta también podría ser una razón para realizar esta configuración a través del paquete usethis en R.

¿Qué nombre de usuario deberías darle a Git? No es necesario que sea su nombre de usuario de GitHub, aunque puede serlo. Otra buena opción es su nombre y apellido reales. Si realiza commits desde diferentes máquinas, a veces las personas introducen esa información en el nombre de usuario. Sus commits estarán etiquetadas con este nombre de usuario, así que hágalo informativo para los colaboradores potenciales y para usted en el futuro.

¿Qué correo electrónico deberías darle a Git? Este **debe** ser el correo electrónico asociado con su cuenta de GitHub.

Los primeros dos comandos utilizados en el shell que comienzan con `git config --global` no devuelve nada en la terminal. Puedes comprobar que Git entendió lo que escribiste mirando el resultado del tercero de `git config --global --list`.

### Configurar el editor Git {#sec-git-editor}

Otra opción de Git que mucha gente acaba configurando es el editor. En algún momento, no podrás darle a Git lo que quiere en términos de un mensaje de commit y te enviará a un editor. Esto puede ser angustioso si no es su editor preferido y ni siquiera sabe cómo guardar y salir. Puedes hacer cumplir tu voluntad con algo como esto:

``` bash
git config --global core.editor "emacs"
```

Sustituya aquí su editor preferido por `"emacs"`. La lección de Git de Software Carpentry tiene una lista completa del comando exacto `git config` necesario para [muchas combinaciones de sistema operativo y editor](https://swcarpentry.github.io/git-novice/02-setup.html).

### Configurar el nombre predeterminado para una rama inicial

Es posible que también desee configurar el nombre predeterminado para la rama inicial en un nuevo repositorio. Históricamente, esto ha sido `master`, ya que estaba integrado en el propio Git. Es cada vez más común usar `main` en su lugar, pero debes aceptarlo.

En 2020, se introdujo la configuración `init.defaultBranch` para que el usuario pueda configurarla. Poco después, los principales hosts de Git como GitHub y GitLab hicieron de `main` el nombre de rama inicial predeterminado para los repositorios creados en sus plataformas y también brindaron un soporte considerable para cambiar el nombre de las ramas predeterminadas existentes.

Puede configurar su nombre de rama inicial predeterminado en `main` así, en el shell:

``` bash
git config --global init.defaultBranch main
```

o desde R (el valor predeterminado para `name` es `"main"`):

```{r eval = FALSE}
usethis::git_default_branch_configure()
```
