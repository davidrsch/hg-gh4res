[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Happy Git and GitHub for the useR",
    "section": "",
    "text": "Let’s Git started\nHappy Git provides opinionated instructions on how to:\nThe target reader is someone who uses R for data analysis or who works on R packages, although some of the content may be useful to those working in adjacent areas.\nThe first two parts, Installation and Connect Git, GitHub, RStudio, provide a “batteries included” quick start to verify your setup.\nIn Early GitHub Wins, we rack up some early success with the basic workflows that are necessary to get your work onto GitHub. We also show the special synergy between R/R Markdown/RStudio and GitHub, which provides a powerful demonstration of why all this setup is worthwhile.\nThe use of Git/GitHub in data science has a slightly different vibe from that of pure software development, due to differences in the user’s context and objective. Happy Git aims to complement existing, general Git resources by highlighting the most rewarding usage patterns for data science. This perspective on the Git landscape is presented in Basic Git Concepts and Daily Workflows.",
    "crumbs": [
      "Let's Git started"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Happy Git and GitHub for the useR",
    "section": "License",
    "text": "License\n\nHappy Git and GitHub for the useR by Jennifer Bryan is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "Let's Git started"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "1  Why Git? Why GitHub?",
    "section": "",
    "text": "1.1 Why Git?\nGit is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids.\nGit has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code.\nA solo data analyst, working on a single computer, will benefit from adopting version control. But not nearly enough to justify the pain of installation and workflow upheaval. There are much easier ways to get versioned back ups of your files, if that’s all you’re worried about.\nIn my opinion, for new users, the pros of Git only outweigh the cons when you factor in the overhead of communicating and collaborating with other people. Who among us does not need to do that? Your life is much easier if this is baked into your workflow, as opposed to being a separate process that you dread or neglect.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#why-github",
    "href": "overview.html#why-github",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.2 Why GitHub?",
    "text": "1.2 Why GitHub?\nThis is where hosting services like GitHub, Bitbucket, and GitLab come in. They provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. The remote host acts as a distribution channel or clearinghouse for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes. These hosting providers improve upon traditional Unix Git servers with well-designed web-based interfaces.\nEven for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. Why? Because it’s fairly easy to screw up your local Git repository, especially when you’re new at this. The good news is that often only the Git infrastructure is borked up. Your files are just fine! Which makes your Git pickle all the more frustrating. There are official Git solutions to these problems, but they might require expertise and patience you can’t access at 3 a.m. If you’ve recently pushed your work to GitHub, it’s easy to grab a fresh copy, patch things up with the changes that only exist locally, and get on with your life.\nWe target GitHub – not Bitbucket or GitLab – for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms.\nDon’t get too caught up on public versus private at this point. There are many ways to get private repositories from the major providers for low or no cost. Just get started and figure out if and how Git/GitHub is going to work for you! If you outgrow this arrangement, you can throw some combination of technical savvy and money at the problem. You can either pay for a higher level of service or self-host one of these platforms.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#is-it-going-to-hurt",
    "href": "overview.html#is-it-going-to-hurt",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.3 Is it going to hurt?",
    "text": "1.3 Is it going to hurt?\nYes.\nYou have to install Git, get local Git talking to GitHub, and make sure RStudio can talk to local Git (and, therefore, GitHub). This is one-time or once-per-computer pain.\nFor new or existing projects, you will:\n\nDedicate a directory (a.k.a “folder”) to it.\nMake it an RStudio Project.\nMake it a Git repository.\nGo about your usual business. But instead of only saving individual files, periodically you make a commit, which takes a multi-file snapshot of the entire project.\n\nHave you ever versioned a file by adding your initials or the date? That is effectively a commit, albeit only for a single file: it is a version that is significant to you and that you might want to inspect or revert to later.\n\nPush commits to GitHub periodically.\n\nThis is like sharing a document with colleagues on DropBox or sending it out as an email attachment. It signals you’re ready to make your work visible to others and invite comment or edits.\n\n\nThis is a change to your normal, daily workflow. It feels weird at first but quickly becomes second nature. FWIW, STAT 545 students are required to submit all coursework via GitHub. This is a major topic in class and office hours for the first two weeks. Then we practically never discuss it again.\nMore bad news. The STAT 545 pain is short-lived because students primarily work in their own repositories. Do you use GitHub to work with other people or to coordinate your own work from multiple computers? If so, after you recover from the initial setup, Git will crush you again with merge conflicts. And this is not one-time pain, this could be a dull ache for a long time. The best remedy is prevention, but also understanding how to back out of tricky situations and tackle them on your own terms.\nThe rest of this site is dedicated to walking you through the necessary setup and creating your first few Git projects. We conclude with prompts that guide you through some of the more advanced usage that makes all of this initial pain worthwhile.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#what-is-the-payoff",
    "href": "overview.html#what-is-the-payoff",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.4 What is the payoff?",
    "text": "1.4 What is the payoff?\nExposure: If someone needs to see your work or if you want them to try out your code, they can easily get it from GitHub. If they use Git, they can clone or fork your repository. If they don’t use Git, they can still browse your project on GitHub like a normal website and even grab everything by downloading a zip archive.\nBe a keener! If you care deeply about someone else’s project, such as an R package you use heavily, you can track its development on GitHub. You can watch the repository to get notified of major activity. You can fork it to keep your own copy. You can modify your fork to add features or fix bugs and send them back to the owner as a proposed change.\nCollaboration: If you need to collaborate on data analysis or code development, then everyone should use Git. Use GitHub as your clearinghouse: individuals work independently, then send work back to GitHub for reconciliation and transmission to the rest of the team. The advantage of Git/GitHub is highlighted by comparing these two ways of collaborating on a document:\n\nEdit, save, attach. In this workflow, everyone has one (or more!) copies of the document and they circulate via email attachment. Which one is “master”? Is it even possible to say? How do different versions relate to each other? How should versions be reconciled? If you want to see the current best version, how do you get it? All of this usually gets sorted out by social contract and a fairly manual process.\nGoogle Doc. In this workflow, there is only one copy of the document and it lives in the cloud. Anyone can access the most recent version on demand. Anyone can edit or comment or propose a change and this is immediately available to everyone else. Anyone can see who’s been editing the document and, if disaster strikes, can revert to a previous version. A great deal of ambiguity and annoying reconciliation work has been designed away.\n\nManaging a project via Git/GitHub is much more like the Google Doc scenario and enjoys many of the same advantages. It is definitely more complicated than collaborating on a Google Doc, but this puts you in the right mindset.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#who-can-do-what",
    "href": "overview.html#who-can-do-what",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.5 Who can do what?",
    "text": "1.5 Who can do what?\nA public repository is readable by the world. The owner can grant higher levels of permission to others, such as the ability to push commits.\nA private repository is invisible to the world. The owner can grant read, write (push), or admin access to others.\nThere is also a formal notion of an organization, which can be useful for managing repository permissions for entire teams of people.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#special-features-of-github",
    "href": "overview.html#special-features-of-github",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.6 Special features of GitHub",
    "text": "1.6 Special features of GitHub\nthis is perhaps too detailed … full stop? or does it belong elsewhere?\nIn addition to a well-designed user interface, GitHub offers two especially important features:\n\nIssues. Remember how we’re high-jacking software development tools? Well, this is the bug tracker. It’s a list of things … bugs, feature requests, to dos, whatever.\n\nIssues are tightly integrated with email and therefore allow you to copy/embed important conversations in the associated repo.\nIssues can be assigned to people (e.g., to dos) and tagged (“bug” or “progress-report”).\nIssues are tightly integrated with commits and therefore allow you to record that the changes in this commit solve that problem which was discussed in that issue.\nAs a new user of GitHub, one of the most productive things you can do is to use GitHub issues to provide a clear bug report or feature request for a package you use.\n\nPull requests. Git allows a project to have multiple, independent branches of development, with the notion that some should eventually be merged back into the main development branch. These are technical Git terms but hopefully also make sense on their own. A pull request is a formal proposal that says: “Here are some changes I would like to make.” It might be linked to a specific issue: “Related to #14.” or “Fixes #56”. GitHub facilitates and preserves the discussion of the proposal, holistically and line-by-line.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#whats-special-about-using-r-with-git-and-github",
    "href": "overview.html#whats-special-about-using-r-with-git-and-github",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.7 What’s special about using R with Git and GitHub?",
    "text": "1.7 What’s special about using R with Git and GitHub?\n\nThe active R package development community on GitHub. Read about R-specific GitHub resources and searching here.\nSpecific workflows make it rewarding to share source code, rendered reports, and entire projects. Read more about R Markdown, R scripts, and R-heavy projects.\nGit- and GitHub-related features of the RStudio IDE. This is covered throughout.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#audience-and-pre-reqs",
    "href": "overview.html#audience-and-pre-reqs",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.8 Audience and pre-reqs",
    "text": "1.8 Audience and pre-reqs\nThe target audience for this site is someone who analyzes data, probably with R, though some of the content may be useful to analysts using other languages. R package development with Git(Hub) is absolutely in scope, but it is not an explicit focus or requirement.\nThe site is aimed at intermediate to advanced R users, who are comfortable writing R scripts and managing R projects. You should have a good grasp of files and directories and be generally knowledgeable about where things live on your computer.\nAlthough we will show alternatives for most Git operations, we will inevitably spend some time in the shell and we assume some prior experience. For example, you should know how to open up a shell, navigate to a certain directory, and list the files there. You should be comfortable using shell commands to view/move/rename files and to work with your command history.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "overview.html#what-this-is-not",
    "href": "overview.html#what-this-is-not",
    "title": "1  Why Git? Why GitHub?",
    "section": "1.9 What this is NOT",
    "text": "1.9 What this is NOT\nWe aim to teach novices about Git on a strict “need to know” basis. Git was built to manage development of the Linux kernel, which is probably very different from what you do. Most people need a small subset of Git’s functionality and that will be our focus. If you want a full-blown exposition of Git as a directed acyclic graph or a treatise on the Git-Flow branching strategy, you will be sad.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Why Git? Why GitHub?</span>"
    ]
  },
  {
    "objectID": "contributors.html",
    "href": "contributors.html",
    "title": "2  Contributors",
    "section": "",
    "text": "Jenny Bryan (jennybryan.org), Software Engineer at RStudio on the tidyverse/r-lib team. Main author and content wrangler.\nThe development and delivery of this material has also benefited greatly from contributions by:\n\nDean Attali (deanattali.com), Shiny consultant and STAT 545 TA alum.\nBernhard Konrad, Software Engineer at Google and STAT 545 TA alum.\nShaun Jackman (sjackman.ca), Bioinformatics Ph.D. student at UBC, lead maintainer of Linuxbrew, and STAT 545 TA alum.\nJim Hester (jimhester.com), Software Engineer at RStudio on the tidyverse/r-lib team.\nA growing number of GitHub contributors",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Contributors</span>"
    ]
  },
  {
    "objectID": "workshops.html",
    "href": "workshops.html",
    "title": "3  Workshops",
    "section": "",
    "text": "3.1 Pre-workshop set-up\nOptional reading on the big picture motivation: Why Git? Why GitHub?\nIt is vital that you attempt to set up your system in advance. You cannot show up at the workshop with no preparation and keep up!\nTry this. Best case scenario is about 1 - 2 hours. If you hit a wall, we will help:\nTroubleshooting:\nThese are battle-tested instructions, so most will succeed. We believe in you! If you have trouble, reach out for help and stick with it. Where to get help:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Workshops</span>"
    ]
  },
  {
    "objectID": "workshops.html#pre-workshop-set-up",
    "href": "workshops.html#pre-workshop-set-up",
    "title": "3  Workshops",
    "section": "",
    "text": "Register a free GitHub account.\nInstall or update R and RStudio.\nInstall Git.\nIntroduce yourself to Git.\nConfigure a personal access token or set up SSH keys.\nProve local Git can talk to GitHub.\nProve RStudio can find local Git and, therefore, can talk to GitHub.\n\nFYI: this is where our hands-on activities usually start. We walk through a similar activity together, with narrative, and build from there.\n\nContemplate if you’d like to install an optional Git client, now or in future.\n\n\n\nSometimes RStudio needs a little help finding Git.\nGeneral troubleshooting: RStudio, Git, GitHub Hell.\n\n\n\nIf you are enrolled in an upcoming workshop, find it below to get specifics on pre-workshop support.\nWe might be able to respond to a GitHub issue here.\nIf there is a clear R/RStudio angle, post on https://community.rstudio.com.\nGeneral advice: search with Google and on https://stackoverflow.com, see also https://github.community.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Workshops</span>"
    ]
  },
  {
    "objectID": "workshops.html#positconf-2023",
    "href": "workshops.html#positconf-2023",
    "title": "3  Workshops",
    "section": "3.2 posit::conf 2023",
    "text": "3.2 posit::conf 2023\n1-day workshop: What They Forgot to Teach You About R\nWill have half-day coverage of Git/GitHub Sep 17, posit.co/conference Workshop Day, Chicago\nRegistered workshop participants should use this thread on community.rstudio.com to discuss system prep woes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Workshops</span>"
    ]
  },
  {
    "objectID": "workshops.html#previous-workshops",
    "href": "workshops.html#previous-workshops",
    "title": "3  Workshops",
    "section": "3.3 Previous workshops",
    "text": "3.3 Previous workshops\n\nrstudio::conf 2022\n2-day workshop: What They Forgot to Teach You About R\n\n~25% of content was Git/GitHub\nJuly 25-26, 2022, Washington, D.C.\nRaukR: Advanced R for Bioinformatics Summer School\n\nJune 13, 2022, online\n\nrstudio::conf 2020\n\n2-day workshop: What They Forgot to Teach You About R\n\n~25% of content was Git/GitHub + R/Rmd/RStudio\n\nJanuary 27-28, 2020, San Francisco, CA\n\nUBC Master of Data Science Program\n\nGuest lecture on daily Git/GitHub workflows\nJanuary 9, 2020\n\nRaukR: Advanced R for Bioinformatics Summer School\n\nJune 10-20, 2019, Visby, Sweden\n\nrstudio::conf 2019\n\n2-day workshop: What They Forgot to Teach You About R\n\n~25% of content was Git/GitHub + R/Rmd/RStudio\n\nJan 15-16, 2019, Austin, TX\n\nSeattle October 2018\n\n2-day workshop: What They Forgot to Teach You About R\n\n3 of 8 units on Git/GitHub + R/Rmd/RStudio\n\nOct 4-5, 2018, The Westin Seattle\n\nrstudio::conf 2018\n\n2-day workshop: What They Forgot to Teach You About R\n\n~25% of content was Git/GitHub + R/Rmd/RStudio\n\nJan 31 & Feb 1, 2018, San Diego, CA\n\nCSAMA 2017: Statistical Data Analysis for Genome Biology\n\nhttp://www.huber.embl.de/csama2017/\n\nJune 11-16, 2017, Bressanone-Brixen, Italy\n\n\nsatRday Cape Town 2017\n\nhttp://capetown2017.satrdays.org\n\nFebruary 16 - 18, 2017, Cape Town, South Africa\n\nrstudio::conf 2017\n\nhttps://www.rstudio.com/conference/\n\nJanuary 13 - 14, 2017, Orlando, FL\n\nSaturday January 14, 10:15am to 12:30pm\n\nCSAMA 2016: Statistical Data Analysis for Genome Biology\n\nhttp://www.huber.embl.de/csama2016/\n\nJuly 10 - 15, 2016, Bressanone-Brixen, Italy\n\n\nuseR! 2016 Stanford\n\nhttp://user2016.r-project.org\n\nMonday, June 27, 2016\n\nUsing Git and GitHub with R, RStudio, and R Markdown",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Workshops</span>"
    ]
  },
  {
    "objectID": "install-intro.html",
    "href": "install-intro.html",
    "title": "Half the battle",
    "section": "",
    "text": "Success and operating systems\nOur installation instructions have been forged in the fires of STAT 545, STAT 540, and assorted workshops, over several years. We regularly hear from grateful souls on the internet who also have success.\nHere’s data on the operating systems we encounter in STAT 545 and other workshops: overall the bulk are split sort of evenly between Mac and Windows (various flavours), with a dash of Linux. Except in a BioConductor context (CSAMA), which is dominated by Mac or Linux.\n* Windows 10 is the Windows catchall, when I don’t have more specific info.",
    "crumbs": [
      "Installation",
      "Half the battle"
    ]
  },
  {
    "objectID": "install-intro.html#success-and-operating-systems",
    "href": "install-intro.html#success-and-operating-systems",
    "title": "Half the battle",
    "section": "",
    "text": "2014\n2015\n2016\nuseR! 2016\nCSAMA 2016\nCSAMA 2017\nr::c 2018\nseattle 2018\n\n\n\n\nMac\n16 (41%)\n38 (52%)\n37 (45%)\n28 (44%)\n25 (58%)\n23 (56%)\n51 (57%)\n16 (49%)\n\n\nWindows 10*\n0 (0%)\n8 (11%)\n30 (36%)\n27 (43%)\n6 (14%)\n8 (20%)\n19 (21%)\n12 (36%)\n\n\nWindows 8\n12 (31%)\n9 (12%)\n4 (5%)\n\n\n1 ( 2%)\n2 (2%)\n\n\n\nWindows 7\n9 (23%)\n13 (18%)\n10 (12%)\n\n\n1 ( 2%)\n13 (14%)\n4 (12%)\n\n\nLinux\n2 (5%)\n5 (7%)\n2 (2%)\n8 (13%)\n12 (28%)\n9 (20%)\n5 (6%)\n1 (3%)",
    "crumbs": [
      "Installation",
      "Half the battle"
    ]
  },
  {
    "objectID": "install-github-acct.html",
    "href": "install-github-acct.html",
    "title": "4  Register a GitHub account",
    "section": "",
    "text": "4.1 Username advice\nYou will be able to upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so don’t fret about any of that now. Except your username. You might want to give that some thought.\nA few tips, which sadly tend to contradict each other:\nYou can change your username later, but better to get this right the first time.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Register a GitHub account</span>"
    ]
  },
  {
    "objectID": "install-github-acct.html#username-advice",
    "href": "install-github-acct.html#username-advice",
    "title": "4  Register a GitHub account",
    "section": "",
    "text": "Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember.\nReuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that.\nPick a username you will be comfortable revealing to your future boss.\nShorter is better than longer.\nBe as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames.\nMake it timeless. Don’t highlight your current university, employer, or place of residence, e.g. JennyFromTheBlock.\nAvoid words laden with special meaning in programming. In my first inept efforts to script around the GitHub API, I assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables.\nAvoid the use of upper vs. lower case to separate words. We highly recommend all lowercase. GitHub treats usernames in a case insensitive way, but using all lowercase is kinder to people doing downstream regular expression work with usernames, in various languages. A better strategy for word separation is to use a hyphen -.\n\n\n\nhttps://help.github.com/articles/changing-your-github-username/\nhttps://help.github.com/articles/what-happens-when-i-change-my-username/",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Register a GitHub account</span>"
    ]
  },
  {
    "objectID": "install-github-acct.html#free-private-repos",
    "href": "install-github-acct.html#free-private-repos",
    "title": "4  Register a GitHub account",
    "section": "4.2 Free private repos",
    "text": "4.2 Free private repos\nGitHub offers free unlimited private repositories for all users. These free private repositories support up to three external collaborators, making them a perfect place for your personal projects, for job applications, and testing things out before making your project open source.\nGo ahead and register your free account NOW and then pursue any special offer that applies to you:\n\nStudents, faculty, and educational/research staff: GitHub Education.\n\nGitHub “Organizations” can be extremely useful for courses or research/lab groups, where you need some coordination across a set of repos and users.\n\nOfficial nonprofit organizations and charities: GitHub for Good",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Register a GitHub account</span>"
    ]
  },
  {
    "objectID": "install-github-acct.html#pay-for-private-repos",
    "href": "install-github-acct.html#pay-for-private-repos",
    "title": "4  Register a GitHub account",
    "section": "4.3 Pay for private repos",
    "text": "4.3 Pay for private repos\nAnyone can pay to have private repos with support for unlimited collaborators. A personal plan with private repos supporting unlimited collaborators is $7 / month at the time of writing, and includes several advanced features. See the current plans and pricing here:\n\nhttps://github.com/pricing\n\nGo ahead and register your free account NOW. You can decide later if you’d like to upgrade to a paid plan.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Register a GitHub account</span>"
    ]
  },
  {
    "objectID": "install-r-rstudio.html",
    "href": "install-r-rstudio.html",
    "title": "5  Install or upgrade R and RStudio",
    "section": "",
    "text": "5.1 How to think about upgrading R and RStudio\nGet current, people. You don’t want to adopt new things on day one. But at some point, running old versions of software adds unnecessary difficulty.\nIn live workshops, there is a limit to how much we can help with ancient versions of R or RStudio. Also, frankly, there is a limit to our motivation. By definition, these problems are going away and we’d rather focus on edge cases with current versions, which affect lots of people.\nIs your R version “old”? R had a major version change in April 2020, with the release of 4.0.0. It is a good idea to be on the current major version, meaning 4.something at this point, especially if you want to get the most out of a workshop.\nEach major version is followed by several years of smaller releases (minor and patch releases). You can be more relaxed about upgrading minor versions, but you still want to stay reasonably current. As the 4.something series unfolds, I advise that you never fall more than 1 minor version behind.\nConcrete example: let’s say the released version of R is 4.7.1, which is totally fictional and well beyond the current version of R at the time of writing. It’s probably OK if you are still on 4.6.whatever, which is one minor version behind and is called “r-oldrel”. Being one minor version behind usually doesn’t cause trouble. Once you are 2 minor versions behind (4.5.whatever or earlier in this example), you will start to suffer. In particular, you can no longer install pre-built binary add-on packages from CRAN.\nIs your RStudio “old”? Unless you have a specific reason to prefer the released version, try the Preview. The Preview version is often the same as the general release. But in the build-up to a new general release, the Preview release is used for release candidates. The Preview version includes new (upcoming) features, but it is also generally very stable and highly usable. You can expect to update RStudio much more often than R itself. For example, I update RStudio every month or so, whereas I update R 1 or 2 times per year.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Install or upgrade R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-r-rstudio.html#how-to-think-about-upgrading-r-and-rstudio",
    "href": "install-r-rstudio.html#how-to-think-about-upgrading-r-and-rstudio",
    "title": "5  Install or upgrade R and RStudio",
    "section": "",
    "text": "Main RStudio IDE download page: https://www.rstudio.com/products/rstudio/download/#download\n\nRStudio IDE Preview download page: https://www.rstudio.com/products/rstudio/download/preview/",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Install or upgrade R and RStudio</span>"
    ]
  },
  {
    "objectID": "install-git.html",
    "href": "install-git.html",
    "title": "6  Install Git",
    "section": "",
    "text": "6.1 Git already installed?\nGo to the shell (Appendix A). Enter which git to request the path to your Git executable:\nwhich git\n## /usr/bin/git\nand git --version to see its version:\ngit --version\n## git version 2.45.2\nIf you are successful, that’s great! You have Git already. No need to install! Move on.\nIf, instead, you see something more like git: command not found, keep reading.\nmacOS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click “Install” and read more below.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Install Git</span>"
    ]
  },
  {
    "objectID": "install-git.html#sec-install-git-windows",
    "href": "install-git.html#sec-install-git-windows",
    "title": "6  Install Git",
    "section": "\n6.2 Windows",
    "text": "6.2 Windows\nOption 1 (highly recommended): Install Git for Windows, also known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing, but you might encounter them elsewhere and I want you to be well-informed.\nWe like this because Git for Windows leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the “Git Bash” shell will be useful as you venture outside of R/RStudio.\n\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, we believe it is good to accept the defaults.\nNote that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention.\n\nThis also leaves you with a Git client, though not a very good one. So check out Git clients we recommend (Chapter 8)).\nFYI, this appears to be equivalent to what you would download from here: https://git-scm.com/download/.\nOption 2 (recommended): Install Git for Windows via the Chocolatey package manager. If this means anything to you, Chocolatey is like apt-get or Homebrew, but for Windows instead of Debian/Ubuntu Linux or macOS. As far as I can tell, using Chocolatey to install Git for Windows gives the same result as installing it yourself (option 1).\nThis obviously requires that you already have Chocolatey installed or that you are up for installing it. It is not hard and the instructions are here. This may be worthwhile if it seems likely you will be installing more open source software in the future.\nAfter you install Chocolatey, in a shell (Appendix A)), do:\nchoco install git.install\nThis installs the most current Git (Install) X.Y.Z Chocolatey package. At the time of writing, that is “Git (Install) 2.33.1”, but that version number will increment over time.\n\n6.2.1 Updating Git for Windows\nIf you already have Git for Windows, but it’s not the latest version, it’s a good idea to update. You can update like so from the command line:\ngit update-git-for-windows",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Install Git</span>"
    ]
  },
  {
    "objectID": "install-git.html#macos",
    "href": "install-git.html#macos",
    "title": "6  Install Git",
    "section": "\n6.3 macOS",
    "text": "6.3 macOS\nOption 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git.\nGo to the shell and enter one of these commands to elicit an offer to install developer command line tools:\ngit --version\ngit config\nAccept the offer! Click on “Install”.\nHere’s another way to request this installation, more directly:\nxcode-select --install\nWe just happen to find this Git-based trigger apropos.\nNote also that, after upgrading macOS, you might need to re-do the above and/or re-agree to the Xcode license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like those above to tickle Xcode into prompting you for what it needs, then restart RStudio.\nOption 2 (recommended): Install Git from here: http://git-scm.com/downloads.\n\nThis arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here.\nThe GitHub home for the macOS installer is here: https://github.com/timcharper/git_osx_installer.\n\nAt that link, you can find more info if something goes wrong or you are working on an old version of macOS.\n\n\n\nOption 3 (recommended): If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out Homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell:\nbrew install git",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Install Git</span>"
    ]
  },
  {
    "objectID": "install-git.html#linux",
    "href": "install-git.html#linux",
    "title": "6  Install Git",
    "section": "\n6.4 Linux",
    "text": "6.4 Linux\nInstall Git via your distro’s package manager.\nUbuntu or Debian Linux:\nsudo apt-get install git\nFedora or RedHat Linux:\nsudo yum install git\nA comprehensive list for various Linux and Unix package managers:\nhttps://git-scm.com/download/linux",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Install Git</span>"
    ]
  },
  {
    "objectID": "install-introduce-self-git.html",
    "href": "install-introduce-self-git.html",
    "title": "7  Introduce yourself to Git",
    "section": "",
    "text": "7.1 More about git config\nAn easy way to get into a shell from RStudio is Tools &gt; Terminal or Tools &gt; Shell. More about the shell in the Appendix Appendix A.\nSpecial Windows gotchas: If you are struggling on Windows, consider there are different types of shell and you might be in the wrong one. You want to be in a “Git Bash” shell, as opposed to Power Shell or the legacy cmd.exe command prompt. Read more in the Appendix. This might also be a reason to do this configuration via the usethis package in R.\nWhat user name should you give to Git? This does not have to be your GitHub user name, although it can be. Another good option is your actual first name and last name. If you commit from different machines, sometimes people work that info into the user name. Your commits will be labelled with this user name, so make it informative to potential collaborators and future you.\nWhat email should you give to Git? This must be the email associated with your GitHub account.\nThe first two commands used in the shell beginning with git config --global return nothing in the terminal. You can check that Git understood what you typed by looking at the output of the third from git config --global --list.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduce yourself to Git</span>"
    ]
  },
  {
    "objectID": "install-introduce-self-git.html#more-about-git-config",
    "href": "install-introduce-self-git.html#more-about-git-config",
    "title": "7  Introduce yourself to Git",
    "section": "",
    "text": "7.1.1 Configure the Git editor\nAnother Git option that many people eventually configure is the editor. At some point, you will fail to give Git what it wants in terms of a commit message and it will kick you into an editor. This can be distressing, if it’s not your editor of choice and you don’t even know how to save and quit. You can enforce your will with something along these lines:\ngit config --global core.editor \"emacs\"\nSubstitute your preferred editor for \"emacs\" here. Software Carpentry’s Git lesson has a comprehensive listing of the exact git config command needed for many combinations of OS and editor.\n\n7.1.2 Configure the default name for an initial branch\nYou may also want to configure the default name for the initial branch in a new repo. Historically, this has been master, as that was baked into Git itself. It’s increasingly common to use main instead, but you have to opt-in to this.\nIn 2020, the init.defaultBranch setting was introduced so that this became user-configurable. Shortly thereafter, major Git hosts like GitHub and GitLab made main the default initial branch name for repos created on their platforms and also provided considerable support for renaming existing default branches.\nYou can set your default initial branch name to main like so, in the shell:\ngit config --global init.defaultBranch main\nor from R (the default for name is \"main\"):\n\nusethis::git_default_branch_configure()",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduce yourself to Git</span>"
    ]
  },
  {
    "objectID": "install-git-client.html",
    "href": "install-git-client.html",
    "title": "8  Install a Git client",
    "section": "",
    "text": "8.1 What is a Git client? Why would you want one?\n“Git” is really just a collection of individual commands you execute in the shell (Appendix Appendix A). This interface is not appealing for everyone. Some may prefer to do Git operations via a client with a graphical interface.\nGit and your Git client are not the same thing, just like R and RStudio are not the same thing. A Git client and an integrated development environment, such as RStudio, are not necessary to use Git or R, respectively. But they make the experience more pleasant because they reduce the amount of “command line bullshittery”1 and provide a richer visual representation of the current state.\nRStudio offers a very basic Git client via its Git pane. I use this often for simple operations, but you probably want another, more powerful one as well.\nFair warning: for some tasks, you must use the command line. But the more powerful your Git client is, the less often this happens. The visual overview given by your Git client can also be invaluable for understanding the current state of things, even when preparing calls to command line Git.\nFantastic news: because all of the clients are just forming and executing Git commands on your behalf, you don’t have to pick one. You can literally do one operation from the command line, do another from RStudio, and another from GitKraken, one after the other, and it just works. Very rarely, both clients will scan the repo at the same time and you’ll get an error message about .git/index.lock. Try the operation again at least once before doing any further troubleshooting.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Install a Git client</span>"
    ]
  },
  {
    "objectID": "install-git-client.html#a-picture-is-worth-a-thousand-words",
    "href": "install-git-client.html#a-picture-is-worth-a-thousand-words",
    "title": "8  Install a Git client",
    "section": "\n8.2 A picture is worth a thousand words",
    "text": "8.2 A picture is worth a thousand words\nHere’s a screenshot of GitKraken (see below) open to the repository for the R package pkgdown. You get a nice graphical overview of the recent commit history, branches, and diffs, as well as a GUI that facilitates the most common Git operations.\n\n\n\n\n\n\n\n\nIn contrast, here’s a shell session where I’ve used command line Git to access some of the same information.\njenny@jennys-MacBook-Pro pkgdown % git log --oneline -n 10\ncd888bed (HEAD -&gt; master, upstream/master, upstream/HEAD, r-lib/master, r-lib/HEAD) Remove accidentally committed snapshot\nca01d386 Add a skip link (#1833)\n1f07a145 Include section class in generated subsection divs\n26e1dcf2 Restore code colouring\n77503979 Working on docs (#1828)\n3c805e1a Make anchor tweaking stricter\na6ae3ca4 use_tidy_description()\nd43260fb Tweak authors order\n41c855df Tweak details styling\n7d3c484c Anchor & news tweaks (#1830)\nWhich do you prefer?",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Install a Git client</span>"
    ]
  },
  {
    "objectID": "install-git-client.html#no-one-is-giving-out-git-nerd-merit-badges",
    "href": "install-git-client.html#no-one-is-giving-out-git-nerd-merit-badges",
    "title": "8  Install a Git client",
    "section": "\n8.3 No one is giving out Git Nerd merit badges",
    "text": "8.3 No one is giving out Git Nerd merit badges\nWork with Git in whatever way makes you most effective. Feel free to revisit your approach over time or to use different approaches for different tasks or in different settings. No one can tell whether you use the command line or a GUI when they look at your Git history or your GitHub repo.\nI sometimes encounter people who feel it’s “better” to use command line Git, but for very ill-defined reasons. These people may feel like they should work in the shell, even if it leads to Git-avoidance, frequent mistakes, or limiting themselves to a small set of ~3 Git commands. This is counterproductive.\nI had two false starts with Git, where I failed to get proficient enough, quickly enough to truly incorporate version control into my daily work. I found a visual Git client invaluable. It made me willing to use Git multiple times per day, for a sustained period of time. This helped me build the mental model necessary for more advanced Git operations like rebasing, cherry-picking, and resetting.\nIf your Git life happens on your own computer, there is no reason to deny yourself a GUI if that’s what you like. If you prefer working in the shell or if you frequently log into a remote server, then it makes sense to prioritize building Git skills at the command line. Do whatever works for you, but don’t do anything for the sake of purity or heroism.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Install a Git client</span>"
    ]
  },
  {
    "objectID": "install-git-client.html#recommended-git-clients",
    "href": "install-git-client.html#recommended-git-clients",
    "title": "8  Install a Git client",
    "section": "\n8.4 Recommended Git clients",
    "text": "8.4 Recommended Git clients\n\nGitKraken is a free, powerful Git(Hub) client that is my current favorite. It’s especially exciting because it works on Windows, macOS, and Linux. This is great news, especially for long-suffering Linux users who previously had very few options. I used the free for version for years, which works great, but now I happily pay money for the pro version.\nSourceTree is another free client that I used to highly recommend. It was my first beloved Git client, but I eventually had to give it up, due to long-standing bugs / deficiencies that seemed like they would never be fixed (macOS bug re: leaking file handles, no ability to control font size). GitKraken feels much more actively developed and has completely supplanted SourceTree for me.\nGitHub offers a free Git(Hub) client, GitHub Desktop, for Windows and macOS. Although we previously discouraged its use, GitHub’s client has since gotten a thorough makeover that eliminates several of our concerns, so we’re cautiously optimistic. GitHub Desktop is aimed at beginners who want the most useful features of Git front and center. The flipside is that it may not support some of the more advanced workflows exposed by the clients above and, consequently, may not develop your mental model of Git as thoroughly.\nBrowse even more Git(Hub) clients.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Install a Git client</span>"
    ]
  },
  {
    "objectID": "install-git-client.html#footnotes",
    "href": "install-git-client.html#footnotes",
    "title": "8  Install a Git client",
    "section": "",
    "text": "This evocative phrase originally appeared in a blog post by Philip Guo, which has subsequently been removed from the internet.↩︎",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Install a Git client</span>"
    ]
  },
  {
    "objectID": "connect-intro.html",
    "href": "connect-intro.html",
    "title": "Can you hear me now?",
    "section": "",
    "text": "The next few chapters walk through some basic operations to confirm you have installed the necessary software and that the necessary connections are being made, between tools on your computer and between your computer and GitHub.\nThis has a lot of overlap with some basic workflows we revisit later, but the second time around (or in a live workshop), we’ll spend more time explaining what’s happening and why.\nUnfortunately, we have to front-load a rather fiddly task, which is to decide whether to communicate with GitHub via HTTPS or SSH and setup some credentials accordingly. In [Personal access token for HTTPS] we discuss how to choose between HTTPS and SSH and then walk through obtaining a personal access token, which is used with HTTPS. Or, alternatively, we will help you [Set up keys for SSH].\nOnce we have our credentials sorted out, in [Connect to GitHub], we use Git in the shell to make sure you can clone a repo from GitHub and establish two-way communications, i.e. pull and push.\nIn [Connect RStudio to Git and GitHub] we confirm that RStudio can work with your Git installation to perform local operations and communicate with GitHub.\nHopefully you won’t need it, but this part concludes with two troubleshooting chapters: [Detect Git from RStudio] and [RStudio, Git, GitHub Hell].",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "Can you hear me now?"
    ]
  },
  {
    "objectID": "connect-https-pat.html",
    "href": "connect-https-pat.html",
    "title": "9  Personal access token for HTTPS",
    "section": "",
    "text": "9.1 TL;DR\nThis is a very minimal account of getting and storing a PAT. This might be all you need when you’re first getting yourself set up. You can always come back later and read other parts of this chapter.\nGo to https://github.com/settings/tokens and click “Generate token”.\nOr, from R, do:\nusethis::create_github_token()\nLook over the scopes; I highly recommend selecting “repo”, “user”, and “workflow”. Recommended scopes will be pre-selected if you used create_github_token().\nClick “Generate token”.\nCopy the generated PAT to your clipboard. Or leave that browser window open and available for a little while, so you can come back to copy the PAT.\nProvide this PAT next time a Git operation asks for your password1.\nYou could even get out ahead of this and store the PAT explicitly right now. In R, call gitcreds::gitcreds_set() to get a prompt where you can paste your PAT:\n&gt; gitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-&gt; Adding new credentials...\n-&gt; Removing credentials from cache...\n-&gt; Done.\nYou should be able to work with GitHub now, i.e. push and pull. If you’re still doing your initial setup, now is a great time to move on to Connect to GitHub.\nRead on to learn more about:",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#tldr",
    "href": "connect-https-pat.html#tldr",
    "title": "9  Personal access token for HTTPS",
    "section": "",
    "text": "How to decide between the HTTPS and SSH protocols\nPAT scopes, names, and expiration\nPAT storage\nTroubleshooting",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#sec-https-vs-ssh",
    "href": "connect-https-pat.html#sec-https-vs-ssh",
    "title": "9  Personal access token for HTTPS",
    "section": "\n9.2 HTTPS versus SSH",
    "text": "9.2 HTTPS versus SSH\nI find HTTPS easier to get working quickly and strongly recommend it when you first start working with Git/GitHub. HTTPS is what GitHub recommends, presumably for exactly the same reasons. The “ease of use” argument in favor of HTTPS is especially true for Windows users. I started with HTTPS, preferred SSH for a while, and have returned to HTTPS. The main thing to know is that this is not an all-or-nothing decision and it’s a relatively easy decision to revisit later.\nAnother advantage of HTTPS is that the PAT we’ll set up for that can also be used with GitHub’s REST API. That might not mean anything to you (yet), but there are many R packages that call GitHub’s API on your behalf (devtools+usethis, remotes, pak, gh, etc.). Configuring your PAT kills two birds with one stone: this single credential can be used to authenticate to GitHub as a regular Git server and for its REST API. If you authenticate via SSH for “regular” Git work, you will still have to set up a PAT for work that uses the REST API.\n\n\n\n\n\n\n\n\nA properly configured PAT means all of this will “just work”:\n\nRemote HTTPS operations via command line Git and, therefore, via RStudio\nRemote HTTPS operations via the gert R package and, therefore, usethis\nGitHub API operations via the gh R package and, therefore, usethis\n\n\n9.2.1 URL determines the protocol\nEven though I’m suggesting that you adopt HTTPS as a lifestyle, it’s good to know that you actually have very granular control over the protocol. It is determined by the URL used to access a remote repo. Feel free to skip this section if you are new to Git (we mention some concepts and commands that won’t make much sense ’til you’ve used Git a little).\nHTTPS remote URLs look like https://github.com/&lt;OWNER&gt;/&lt;REPO&gt;.git.\nSSH remote URLs look like git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you execute a command such as git push origin my-cool-feature-branch, Git looks up the URL you’ve stored for the origin remote and uses the protocol implicit in the URL’s format. The protocol is a game time decision.\nThis implies that:\n\nIt’s fine to use HTTPS for one remote in a repo and SSH for another.\n\nIt’s fine to use HTTPS in one repo and SSH in another.\n\nIt’s fine to interact with a GitHub repo via HTTPS from one computer and via SSH from another.\n\nIt’s fine to adopt HTTPS for new work, even if some of your pre-existing repos use SSH.\n\nYou just have to be aware that mixed use of HTTPS and SSH means you’ll have to configure both sorts of credentials.\nChanging a specific remote from HTTPS to SSH (and back again) is a straightforward operation with git remote set-url REMOTE_NAME DESIRED_URL:\n~/rrr/happy-git-with-r % git remote -v\norigin  https://github.com/jennybc/happy-git-with-r.git (fetch)\norigin  https://github.com/jennybc/happy-git-with-r.git (push)\n\n~/rrr/happy-git-with-r % git remote set-url origin git@github.com:jennybc/happy-git-with-r.git\n\n~/rrr/happy-git-with-r % git remote -v\norigin  git@github.com:jennybc/happy-git-with-r.git (fetch)\norigin  git@github.com:jennybc/happy-git-with-r.git (push)\n\n~/rrr/happy-git-with-r % git remote set-url origin https://github.com/jennybc/happy-git-with-r.git\nWe can do the same from R using functions in usethis:\n\nusethis::git_remotes()\n#&gt; $origin\n#&gt; [1] \"https://github.com/jennybc/happy-git-with-r.git\"\n\nusethis::use_git_remote(\n  \"origin\",\n  \"git@github.com:jennybc/happy-git-with-r.git\",\n  overwrite = TRUE\n)\n\nusethis::git_remotes()\n#&gt; $origin\n#&gt; [1] \"git@github.com:jennybc/happy-git-with-r.git\"\n\nusethis::use_git_remote(\n  \"origin\",\n  \"https://github.com/jennybc/happy-git-with-r.git\",\n  overwrite = TRUE\n)",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#sec-get-a-pat",
    "href": "connect-https-pat.html#sec-get-a-pat",
    "title": "9  Personal access token for HTTPS",
    "section": "\n9.3 Generate a personal access token (PAT)",
    "text": "9.3 Generate a personal access token (PAT)\nOn github.com, assuming you’re signed in, you can manage your personal access tokens from https://github.com/settings/tokens, also reachable via Settings &gt; Developer settings &gt; Personal access tokens. You could click on “Generate new token” here or, perhaps even better, you could call usethis::create_github_token() from R:\n\nusethis::create_github_token()\n\nThe usethis approach takes you to a pre-filled form where we have pre-selected some recommended scopes, which you can look over and adjust before clicking “Generate token”. At the time of writing, the usethis-recommended scopes are “repo”, “user”, “gist”, and “workflow”.\n\n\n\n\n\n\n\n\nIt is a very good idea to describe the token’s purpose in the Note field, because one day you might have multiple PATs. We recommend naming each token after its use case, such as the computer or project you are using it for, e.g. “personal-macbook-air” or “vm-for-project-xyz”. In the future, you will find yourself staring at this list of tokens, because inevitably you’ll need to re-generate or delete one of them. Make it easy to figure out which token you’ve come here to fiddle with.\nGitHub encourages the use of perishable tokens, with a default Expiration period of 30 days. Unless you have a specific reason to fight this, I recommend accepting this default. I assume that GitHub’s security folks have good reasons for their recommendation. But, of course, you can adjust the Expiration behaviour as you see fit, including “No expiration”.\nOnce you’re happy with the token’s Note, Expiration, and Scopes, click “Generate token”.\nYou won’t be able to see this token again, so don’t close or navigate away from this browser window until you store the PAT locally. Copy the PAT to the clipboard, anticipating what we’ll do next: trigger a prompt that lets us store the PAT in the Git credential store.\nTreat this PAT like a password! Do not ever hard-wire your PAT into your code! A PAT should always be retrieved implicitly, for example, from the Git credential store. We’re about to help you store the PAT in a safe place, where command line Git, RStudio, and R packages can discover it.\nIf you use a password management app, such as 1Password or LastPass (highly recommended!), you might want to also add this PAT (and its Note) to the entry for GitHub, where you’re already storing your username and password. Storing your PAT in the Git credential store is a semi-persistent convenience, sort of like a browser cache or “remember me” on a website2 and it’s conceivable you will need to re-enter your PAT in the future. You could decide to embrace the impermanence of your PAT and, if it somehow goes missing, you’ll just re-generate the PAT and re-store it. If you accept the default 30-day expiration period, this is a workflow you’ll be using often anyway. But if you create long-lasting tokens or want to feel free to play around with the functions for setting or clearing your Git credentials, it can be handy to have your own record of your PAT in a secure place, like 1Password or LastPass.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#sec-store-pat",
    "href": "connect-https-pat.html#sec-store-pat",
    "title": "9  Personal access token for HTTPS",
    "section": "\n9.4 Store your PAT",
    "text": "9.4 Store your PAT\nAt this point, I assume you’ve generated a PAT and have it available, in one or both of these ways:\n\nIn a secure, long-term system for storing secrets, like 1Password or LastPass\nFor the next few minutes, in a browser window or on the clipboard\n\nThere are a couple ways to get your PAT into the Git credential store:\n\nCall an R function to explicitly store (or update) your credentials.\nDo something in command line Git or RStudio that triggers a credential challenge.\n\n\n9.4.1 Call an R function to store your credentials\nThere are two R packages for accessing the Git credential store:\n\ngitcreds\ncredentials\n\nIt is likely that these packages will eventually combine into one and, even now, they are largely interoperable. You don’t need to follow the instructions for both packages – pick one!\n\n9.4.1.1 gitcreds package\nIf you don’t have gitcreds installed, install via install.packages(\"gitcreds\"). If you’ve installed usethis, you will already have gitcreds, because usethis uses gh and gh uses gitcreds.\nCall gitcreds::gitcreds_set(). If you don’t have a PAT stored already, it will prompt you to enter your PAT. Paste!\n\n&gt; gitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-&gt; Adding new credentials...\n-&gt; Removing credentials from cache...\n-&gt; Done.\n\nIf you already have a stored credential, gitcreds::gitcreds_set() reveals this and will even let you inspect it. This helps you decide whether to keep the existing credential or replace it. When in doubt, embrace a new, known-to-be-good credential over an old one, of dubious origins.\n\n&gt; gitcreds::gitcreds_set()\n\n-&gt; Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: &lt;-- hidden --&gt;\n\n-&gt; What would you like to do? \n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / token\n\nSelection: 2\n\n-&gt; Removing current credentials...\n\n? Enter new password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-&gt; Adding new credentials...\n-&gt; Removing credentials from cache...\n-&gt; Done.\n\nYou can check that you’ve stored a credential with gitcreds_get():\n\ngitcreds_get()\n#&gt; &lt;gitcreds&gt;\n#&gt;   protocol: https\n#&gt;   host    : github.com\n#&gt;   username: PersonalAccessToken\n#&gt;   password: &lt;-- hidden --&gt;\n\nOther functions that can help you feel confident about your PAT setup include:\n\nusethis::gh_token_help()\n\nusethis::git_sitrep()\n\ngh::gh_whoami()\n\n\n9.4.1.2 credentials package\nIf you don’t have credentials installed, install via install.packages(\"credentials\"). If you’ve installed usethis, you will already have credentials, because usethis uses gert and gert uses credentials.\nCall set_github_pat(). If you don’t have a PAT stored already, it will prompt you to enter your PAT. Paste!\n\ncredentials::set_github_pat()\n\nIf successful, your initial (and subsequent) calls will look like this:\n\ncredentials::set_github_pat()\n#&gt; If prompted for GitHub credentials, enter your PAT in the password field\n#&gt; Using GITHUB_PAT from Jennifer (Jenny) Bryan (credential helper: osxkeychain)\n\nOther functions that can help you feel confident about your PAT setup include:\n\nusethis::gh_token_help()\n\nusethis::git_sitrep()\n\ngh::gh_whoami()\n\n\n9.4.2 Store credentials through organic Git use\nBefore gitcreds and credentials existed (see above), we had to orchestrate a credential challenge by setting up (and then tearing down) a toy repo. That still occurs naturally in the guided exercise in [Connect to GitHub]. But I strongly recommend managing your PAT more directly and explicitly with gitcreds::gitcreds_set() and related functions in gitcreds.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#sec-pat-troubleshooting",
    "href": "connect-https-pat.html#sec-pat-troubleshooting",
    "title": "9  Personal access token for HTTPS",
    "section": "\n9.5 HTTPS PAT problems and solutions",
    "text": "9.5 HTTPS PAT problems and solutions\nThis section is for people who need to know even more about PAT management, because they’re in a nonstandard situation or troubleshooting.\n\n9.5.1 Valid PAT gets stored, but later told the PAT is invalid\nLet’s say you generate a fresh PAT and successfully store it as described above. Maybe you even use it successfully. But later, you’re told your PAT is invalid! How can this be?\nHere are some likely explanations:\n\nYour PAT truly is invalid. By default, PATs have an expiration date now. One day you really will wake up and find the PAT has gone bad overnight and you need to re-generate and re-store it.\nYou have an invalid PAT stored somewhere else, that you’ve forgotten about, probably in .Renviron. This old, invalid PAT is preventing R packages from even discovering your new, valid PAT.\n\n\n9.5.1.1 PAT has expired\nYou are going to be re-generating and re-storing your PAT on a schedule dictated by its expiration period. By default, once per month.\nWhen the PAT expires, return to https://github.com/settings/tokens and click on its Note. (You do label your tokens nicely by use case, right? Right?) At this point, you can optionally adjust scopes and then click “Regenerate token”. You can optionally modify its Expiration and then click “Regenerate token” (again). As before, copy the PAT to the clipboard, call gitcreds::gitcreds_set(), and paste!\nHopefully it’s becoming clear why each token’s Note is so important. The actual token may be changing, e.g., once a month, but its use case (and scopes) are much more persistent and stable.\n\n9.5.1.2 Old GITHUB_PAT in .Renviron\n\nThese usethis functions will diagnose this problem:\n\nusethis::gh_token_help()\n\nusethis::git_sitrep()\n\nIn the past, it was common to store a PAT as the GITHUB_PAT environment variable in .Renviron. But now, thanks to gitcreds and credentials, we can store and retrieve a PAT, from R, the same way as command line Git does.\nIf you have any doubt about your previous practices, open .Renviron, look for a line setting the GITHUB_PAT environment variable, and delete it. usethis::edit_r_environ() can be helpful for getting .Renviron open for editing. Don’t forget to restart R for this change to take effect.\n\n9.5.2 PAT doesn’t persist on macOS or Windows\nThe credential helpers used by Git take advantage of official OS-provided credential stores, where possible, such as macOS Keychain and Windows Credential Manager.\nIf you’re trying to follow the advice here and your PAT never persists, consider that you may need to update Git to get its more modern credential helpers. This is absolutely an area of Git that has improved rapidly in recent years and the gitcreds and credentials package work best with recent versions of Git. I have not needed to explicitly activate a credential helper on macOS or Windows with any recent version of Git.\nHere’s a command to reveal the current credential helper and what I see these days.\nmacOS\n$ git config --show-origin --get credential.helper\nfile:/Users/jenny/.gitconfig    osxkeychain\nWindows\n$ git config --show-origin --get credential.helper\nfile:C:/Program Files/Git/mingw64/etc/gitconfig manager\nIf you want to know how more about how gitcreds and credentials are managing your PAT, learn about git credential &lt;fill|approve|reject&gt;. For keeners, that documentation gives you the gory details on how credentials are stored and retrieved:\n\nGit has an internal interface for storing and retrieving credentials from system-specific helpers, as well as prompting the user for usernames and passwords. The git-credential command exposes this interface to scripts which may want to retrieve, store, or prompt for credentials in the same manner as Git.\n\nOn Windows, your Git credentials are probably being stored via Credential Manager.\nOn macOS, your Git credentials are probably being stored in the Keychain.\nIf you really want to poke around directly to explore or clean out your GitHub credentials, launch Credential Manager (Windows) or Keychain Access (macOS) and search for “github.com”.\n\n9.5.3 PAT doesn’t persist on Linux\nThe credential helpers used by Git take advantage of official OS-provided credential stores on macOS and Windows, but sadly there is no exact equivalent on Linux.\nThe easiest thing to do is to configure Git to “cache” your credentials (vs “store”), which is more time-limited. Then set the cache timeout to some suitably long period of time. Here, we set the timeout to ten million seconds or around 16 weeks, enough for a semester.\ngit config --global credential.helper 'cache --timeout=10000000'\nThis still may not make your PAT available to R packages. In this case, you may need to use the older, less secure approach of storing your PAT in .Renviron. usethis::edit_r_environ() opens that file for editing.\n\nusethis::edit_r_environ()\n\nAdd a line like this, but substitute your PAT:\n\nGITHUB_PAT=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nMake sure this file ends in a newline! Lack of a newline can lead to silent failure to load startup files, which can be tricky to debug. Take care that this file is not accidentally pushed to the cloud, e.g. Google Drive or GitHub.\nRestart R for changes in .Renviron to take effect.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-https-pat.html#footnotes",
    "href": "connect-https-pat.html#footnotes",
    "title": "9  Personal access token for HTTPS",
    "section": "",
    "text": "Yes, it’s confusing that you might be prompted for a password, but you should enter your PAT. GitHub no longer allows passwords in this context, but most basic Git tools still frame the authentication task with this language.↩︎\nHaha! We all know how well “remember me” works.↩︎",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Personal access token for HTTPS</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html",
    "href": "connect-ssh-keys.html",
    "title": "10  Set up keys for SSH",
    "section": "",
    "text": "10.1 SSH keys\nSSH keys provide a more secure way of logging into a server than using a password alone. While a password can eventually be cracked with a brute force attack, SSH keys are nearly impossible to decipher by brute force alone. Generating a key pair provides you with two long strings of characters: a public and a private key. You can place the public key on any server (like GitHub!), and then unlock it by connecting to it with a client that already has the private key (your computer!). When the two match up, the system unlocks without the need for a password. You can increase security even more by protecting the private key with a passphrase.\nAdapted from instructions provided by GitHub and Digital Ocean.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html#ssh-outline-and-advice",
    "href": "connect-ssh-keys.html#ssh-outline-and-advice",
    "title": "10  Set up keys for SSH",
    "section": "\n10.2 SSH outline and advice",
    "text": "10.2 SSH outline and advice\nHigh level overview of what must happen:\n\nCreate a public-private SSH key pair. Literally, 2 special files, in a special place. Optionally, encrypt the private key with a passphrase (best practice).\nAdd the private key to your ssh-agent. If you protected it with a passphrase, you may have additional configuration.\nAdd your public key to your GitHub profile.\n\nAdvice:\n\nIf you are new to programming and the shell, you’ll probably find HTTPS easier at first (Chapter 9). You can always switch to SSH later. You can use one method from computer A and the other from computer B.\nYou should swap out your SSH keys periodically. Something like once a year.\nIt’s best practice to protect your private key with a passphrase. This can make setup and usage harder, so if you’re not up for that (yet), either don’t use a passphrase or seriously consider using HTTPS instead.\nDon’t do weird gymnastics in order to have only one key pair, re-used over multiple computers. You should probably have one key per computer (I do this). Some people even have one key per computer, per service (I do not do this).\nIt is normal to associate multiple public keys with your GitHub account. For example, one public key for each computer you connect with.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html#do-you-already-have-keys",
    "href": "connect-ssh-keys.html#do-you-already-have-keys",
    "title": "10  Set up keys for SSH",
    "section": "\n10.3 Do you already have keys?",
    "text": "10.3 Do you already have keys?\nYou can check this from RStudio or from the shell.\nGlobal advice: if you do have existing keys, but have no clue where they came from or why you created them, you should seriously consider creating a new SSH key pair. It’s up to you to figure out whether/how to delete the old ones. But don’t let that keep you from creating new keys and moving forward.\n\n10.3.1 From RStudio\nGo to Tools &gt; Global Options…&gt; Git/SVN. If you see something like ~/.ssh/id_rsa in the SSH RSA Key box, you definitely have existing keys.\nCaveat: RStudio only looks for a key pair named id_rsa and id_rsa.pub. This makes sense, because historically that has been the most common.\nHowever, these days both GitHub and GitLab are encouraging users to generate SSH keys with the Ed25519 algorithm, which results in a key pair named id_ed25519 and id_ed25519.pub. At the time of writing, RStudio will not display such a key pair, which can be confusing. Therefore, it’s probably a good idea to also check for existing keys in the shell.\n\n10.3.2 From the shell\nGo to the shell (Appendix A).\nList existing keys:\nls -al ~/.ssh/\nIf you are told ~/.ssh/ doesn’t exist, you don’t have SSH keys!\nIf you see a pair of files like id_rsa.pub and id_rsa or id_ed25519 and id_ed25519.pub, you have a key pair already. The typical pattern is id_FOO.pub (the public key) and id_FOO (the private key), where FOO reflects the key type. If you’re happy to stick with your existing keys, skip to the sections about adding a key to the ssh-agent and GitHub.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html#create-an-ssh-key-pair",
    "href": "connect-ssh-keys.html#create-an-ssh-key-pair",
    "title": "10  Set up keys for SSH",
    "section": "\n10.4 Create an SSH key pair",
    "text": "10.4 Create an SSH key pair\n\n10.4.1 Option 1: Set up from RStudio\nGo to Tools &gt; Global Options…&gt; Git/SVN &gt; Create RSA Key….\nRStudio prompts you for a passphrase. It is optional, but also a best practice. Configuring your system for smooth operation with a passphrase-protected key introduces more moving parts. If you’re completely new at all this, skip the passphrase (or use HTTPS!) and implement it next time, when you are more comfortable with system configuration. I did not use a passphrase at first, but I do now, and record it in a password manager.\nClick “Create” and RStudio will generate an SSH key pair, stored in the files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub.\nNote that RStudio currently only generates RSA keys, whereas the standard recommendation by GitHub and GitLab is to use Ed25519 keys. If you want to comply with that advice, generate your keys in the shell for now.\n\n10.4.2 Option 2: Set up from the shell\nCreate the key pair like so, but substitute a comment that means something to you, especially if you’ll have multiple SSH keys in your life. Consider the email associated with your GitHub account or the name of your computer or some combination, e.g. your_email@example.com or macbook-pro or jane-2020-macbook-pro.\nssh-keygen -t ed25519 -C \"DESCRIPTIVE-COMMENT\"\nIf it appears that your system is too old to support the Ed25519 algorithm, do this instead:\nssh-keygen -t rsa -b 4096 -C \"DESCRIPTIVE-COMMENT\"\nAccept the proposal to save the key in the default location. Just press Enter here:\nEnter file in which to save the key (/Users/jenny/.ssh/id_ed25519):\nYou have the option to protect the key with a passphrase. It is optional, but also a best practice. Configuring your system for smooth operation with a passphrase-protected key introduces more moving parts. If you’re completely new at all this, skip the passphrase and implement it next time, when you are more comfortable with system configuration. I did not use a passphrase at first, but I do now, and record it in a password manager.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again: \nThe process should complete now and should have looked like this:\n~ % ssh-keygen -t ed25519 -C \"jenny-2020-mbp\"        \nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/Users/jenny/.ssh/id_ed25519): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /Users/jenny/.ssh/id_ed25519.\nYour public key has been saved in /Users/jenny/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:XUEaY/elhcQJz3M9jx/SdC0zh10lCA7uNpqgkm5G/R0 jenny-2020-mbp\nThe key's randomart image is:\n+--[ED25519 256]--+\n|        . =o==oo*|\n|       . + =.=+B+|\n|        . o . @oB|\n|       . . .  oO+|\n|  . .   S .  ..o.|\n| o o . E .    ...|\n|+ . . + .       .|\n|.+   . .         |\n|o.               |\n+----[SHA256]-----+\n\n10.4.3 Add key to ssh-agent\nTell your ssh-agent about the key and, especially, set it up to manage the passphrase, if you chose to set one.\nThings get a little OS-specific around here. When in doubt, consult GitHub’s instructions for SSH, which is kept current for Mac, Windows, and Linux. It also accounts for more unusual situations than I can.\n\n10.4.3.1 Mac OS\nMake sure ssh-agent is enabled. Here’s what success look like (the pid will vary):\n~ % eval \"$(ssh-agent -s)\"\nAgent pid 15360\nSometimes this fails like so:\n~ % eval \"$(ssh-agent -s)\"\nmkdtemp: private socket dir: No such file or directory\nA similar failure might be reported as “Permission denied”. You should try again, but as the superuser. Don’t forget to use exit to go back to your normal user account, when you are done!\n~ % sudo su\nPassword:\nsh-3.2# eval \"$(ssh-agent -s)\"\nAgent pid 15385\nsh-3.2# exit\nexit\nAdd your key to the ssh agent. If you set a passphrase, you’ll be challenged for it here. Give it. The -K option stores your passphrase in the keychain.\n~ % ssh-add -K ~/.ssh/id_ed25519\nEnter passphrase for /Users/jenny/.ssh/id_ed25519: \nIdentity added: /Users/jenny/.ssh/id_ed25519 (jenny-2020-mbp)\nIf you’re on macOS Sierra 10.12.2 and higher, you need to do one more thing. Create a file ~/.ssh/config with these contents:\nHost *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\nYou can omit the line about UseKeychain if you didn’t use a passphrase. But if you did, this should store your passphrase persistently in the keychain. Otherwise, you will have to enter it every time you log in. Useful StackOverflow thread: How can I permanently add my SSH private key to Keychain so it is automatically available to ssh?.\n\n10.4.3.2 Windows\nIn a Git Bash shell, make sure ssh-agent is running:\n$ eval $(ssh-agent -s)\nAgent pid 59566\nAdd your key, substituting the correct name for your key.\n$ ssh-add ~/.ssh/id_ed25519\n\n10.4.3.3 Linux\nIn a shell, make sure ssh-agent is running:\n$ eval \"$(ssh-agent -s)\"\nAgent pid 59566\nAdd your key, substituting the correct name for your key.\nssh-add ~/.ssh/id_ed25519",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html#provide-public-key-to-github",
    "href": "connect-ssh-keys.html#provide-public-key-to-github",
    "title": "10  Set up keys for SSH",
    "section": "\n10.5 Provide public key to GitHub",
    "text": "10.5 Provide public key to GitHub\nNow we store a copy of your public key on GitHub.\n\n10.5.1 RStudio to clipboard\nGo to Tools &gt; Global Options…&gt; Git/SVN. If your key pair is named like id_rsa.pub and id_rsa, RStudio will see it and offer to “View public key”. Do that and accept the offer to copy to your clipboard.\nIf your key pair is named differently, such as id_ed25519.pub and id_ed25519, you’ll have to copy the public key another way.\n\n10.5.2 Shell to clipboard\nCopy the public key onto your clipboard. For example, open ~/.ssh/id_ed25519.pub in an editor and copy the contents to your clipboard. Or do one of the following at the command line:\n\nMac OS: pbcopy &lt; ~/.ssh/id_ed25519.pub\n\nWindows: clip &lt; ~/.ssh/id_ed25519.pub\n\nLinux: xclip -sel clip &lt; ~/.ssh/id_ed25519.pub\n\n\nLinux: if needed, install xclip via apt-get or yum. For example, sudo apt-get install xclip.\n\n10.5.3 On GitHub\nNow we register the public key with GitHub. Click on your profile pic in upper right corner and go to Settings &gt; SSH and GPG keys. Click “New SSH key”. Paste your public key in the “Key” box. Give it an informative title, presumably repeating the descriptive comment you used above, during key creation. Click “Add SSH key”.\nIn theory, we’re done! You can use ssh -T git@github.com to test your connection to GitHub. If you’re not sure what to make of the output, see the link for details. Of course, the best test is to work through the realistic usage examples elsewhere in this guide.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-ssh-keys.html#sec-ssh-troubleshooting",
    "href": "connect-ssh-keys.html#sec-ssh-troubleshooting",
    "title": "10  Set up keys for SSH",
    "section": "\n10.6 Troubleshooting",
    "text": "10.6 Troubleshooting\n\n10.6.1 HTTPS URL when you meant to use SSH\nIf you think you have SSH set up correctly and yet you are still challenged for credentials, consider this: for the repo in question, have you possibly set up GitHub, probably called origin, as an HTTPS remote, instead of SSH?\nHow to see the remote URL(s) associated with the current repo in the shell:\ngit remote -v\nAn SSH remote will look like this:\ngit@github.com:USERNAME/REPOSITORY.git\nwhereas an HTTPS remote will look like this:\nhttps://github.com/USERNAME/REPOSITORY.git\nYou can fix this with git remote set-url, which is demonstrated in URL determines the protocol.\n\n10.6.2 git2r – or some other tool – can’t find SSH keys on Windows\nHave you seen this error message?\nError in .local(object, ...) : \n  Error in 'git2r_push': error authenticating: failed connecting agent\nWe’ve seen it when working with Git/GitHub from R via the git2r package.\nThe root cause is confusion about the location of .ssh/ on Windows. R’s idea of your home directory on Windows often differs from the default location of config files for Git and ssh, such as .ssh/. On *nix systems, these generally coincide and there’s no problem.\nTwo important directories on Windows are the user’s HOME and USERPROFILE. R usually associates ~ with HOME, but Git and ssh often consult USERPROFILE for their config files. On my Windows 10 VM, I see:\n\nnormalizePath(\"~\")\n#&gt; [1] \"C:\\\\Users\\\\JennyVM\\\\Documents\"\n\nas.list(Sys.getenv(\n  c(\"HOME\", \"USERPROFILE\")\n))\n#&gt; $HOME\n#&gt; [1] \"C:/Users/JennyVM/Documents\"\n#&gt; \n#&gt; $USERPROFILE\n#&gt; [1] \"C:\\\\Users\\\\JennyVM\"\n\nlist.files(\n  Sys.getenv(\"USERPROFILE\"),\n  pattern = \"ssh|git\",\n  include.dirs = TRUE,\n  all.files = TRUE\n)\n#&gt; [1] \".gitconfig\" \".ssh\"\n\nTwo workarounds:\n\n\nTell git2r explicitly where to find your public and private key and pass the resulting cred object to your git2r calls.\n\ncred &lt;- git2r::cred_ssh_key(\n  publickey = \"~/../.ssh/id_rsa.pub\",\n  privatekey = \"~/../.ssh/id_rsa\"\n)\n\n\n\nCreate a symbolic link so that .ssh/ in R’s home directory points to your actual .ssh/ directory. Example contributed by Ian Lyttle on Windows 7 using Command Prompt:\nMKLINK /D \"C:\\Users\\username\\Documents\\.ssh\" \"C:\\Users\\username\\.ssh\"\n\n\nFinally, if git2r seems unable to get your SSH passphrase from ssh-agent, install the getPass package:\n\ninstall.packages(\"getPass\")\n\nand git2r should launch a popup where you can enter your passphrase. Thanks to Ian Lyttle for this tip.\nThis link provides a great explanation of the uncertainty about where .ssh/ and user’s .gitconfig are located on Windows: git on Windows - location of configuration files. Bottom line: place your config and keys where your main tool expects them to be and create symbolic links to help other tools find this stuff.\n\n10.6.3 Other\nOther things to double-check:\n\nDid you add the SSH to your ssh-agent?\nDid you configure Mac OS Sierra or High Sierra to persistently store your passphrase in the keychain?\nDid you add the public key to GitHub?",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Set up keys for SSH</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html",
    "href": "connect-git-github.html",
    "title": "11  Connect to GitHub",
    "section": "",
    "text": "11.1 Make a repo on GitHub\nGo to https://github.com and make sure you are logged in.\nNear “Repositories”, click the big green “New” button. Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.\nHow to fill this in:\nClick the big green button that says “Create repository”.\nNow click the big green button that says “&lt;&gt; Code”.\nCopy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html#make-a-repo-on-github",
    "href": "connect-git-github.html#make-a-repo-on-github",
    "title": "11  Connect to GitHub",
    "section": "",
    "text": "Repository template: No template.\nRepository name: &lt;&lt;&gt;&gt;\n\nDescription: &lt;&lt;&gt;&gt;\n\nPublic.\n&lt;&lt;&gt;&gt;",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html#sec-git-clone-command-line",
    "href": "connect-git-github.html#sec-git-clone-command-line",
    "title": "11  Connect to GitHub",
    "section": "\n11.2 Clone the repo to your local computer",
    "text": "11.2 Clone the repo to your local computer\nWe have a few ways to do this. Here we use command line Git. In (Chapter 15), we show other methods that you might prefer in daily life: using usethis or the RStudio IDE.\nGo to the shell (Appendix A).\nTake charge of – or at least notice! – what directory you’re in. pwd displays the working directory. cd is the command to change directory. Personally, I would do this sort of thing in ~/tmp.\nClone myrepo from GitHub to your computer. Use the URL we just copied from GitHub. This URL should have your GitHub username and the name of your practice repo. If your shell (Appendix A) cooperates, you should be able to paste the whole https://.... bit that we copied above. But some shells are not (immediately) clipboard aware. In that sad case, you must type it. Accurately.\ngit clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\nThis should look something like this:\n~/tmp % git clone https://github.com/jennybc/myrepo.git\nCloning into 'myrepo'...\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), done.\nMake this new repo your working directory, list its files, display the README, and get some information on its connection to GitHub:\ncd myrepo\nls\nhead README.md\ngit remote show origin\nThis should look something like this:\n~/tmp % cd myrepo\n\n~/tmp/myrepo % ls\nREADME.md\n\n~/tmp/myrepo % head README.md \n# myrepo\nchecking stuff for Happy Git\n\n~/tmp/myrepo % git remote show origin\n* remote origin\n  Fetch URL: https://github.com/jennybc/myrepo.git\n  Push  URL: https://github.com/jennybc/myrepo.git\n  HEAD branch: main\n  Remote branch:\n    main tracked\n  Local branch configured for 'git pull':\n    main merges with remote main\n  Local ref configured for 'git push':\n    main pushes to main (up to date)",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html#make-a-local-change-commit-and-push",
    "href": "connect-git-github.html#make-a-local-change-commit-and-push",
    "title": "11  Connect to GitHub",
    "section": "\n11.3 Make a local change, commit, and push",
    "text": "11.3 Make a local change, commit, and push\nAdd a line to README and verify that Git notices the change:\necho \"A line I wrote on my local computer  \" &gt;&gt; README.md\ngit status\nThis should look something like this:\n~/tmp/myrepo % echo \"A line I wrote on my local computer\" &gt;&gt; README.md\n\n~/tmp/myrepo % git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nStage (“add”) and commit this change and push to your remote repo on GitHub.\nIf you’re a new GitHub user and using HTTPS, you might be challenged for your username and password. Even though GitHub no longer allows username/password authentication, many general Git tools still frame the authentication task with this vocabulary. By all means, provide your GitHub username when prompted. However, the most critical piece is to provide your PAT as the password. Do not enter your web password. Enter your PAT. If you already stored your PAT with gitcreds::gitcreds_set(), it should be discovered automatically and you will not see a credential challenge.\ngit add README.md\ngit commit -m \"A commit from my local computer\"\ngit push\nThis should look something like this:\n~/tmp/myrepo % git add README.md\n\n~/tmp/myrepo % git commit -m \"A commit from my local computer\"\n[main e92528c] A commit from my local computer\n 1 file changed, 1 insertion(+)\n \n~/tmp/myrepo % git push\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 327 bytes | 327.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/jennybc/myrepo.git\n   31dcaef..e92528c  main -&gt; main\nDo you see an error like this?\n~/tmp/myrepo % git push                                                     \nremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: Authentication failed for 'https://github.com/jennybc/myrepo.git/'\nThis means you have provided your GitHub web password, instead of your personal access token (PAT). Go back to (Chapter 9) to get a PAT. Try git push again and hopefully you’ll get another prompt, allowing you to correct things and provide your PAT.\nIf you ever feel you need to overwrite a bad credential with a new one, the easiest way to do this is to call gitcreds::gitcreds_set() from R.\n\n11.3.1 Windows and line endings\nOn Windows, you might see a message about LF will be replaced by CRLF. This is normal and does not require any action on your part. Windows handles line endings differently from other operating systems, but the default setup for Git for Windows is appropriate for most people and situations.\nHere’s a command to reveal the current line ending configuration and some typical output on Windows:\n$ git config --show-origin --get core.autocrlf\nfile:\"C:\\\\ProgramData/Git/config\"      true\nIf your value shows as false, you can set it to true with this command:\n$ git config --global core.autocrlf true\ntrue is the current default setting for core.autocrlf for Git for Windows, our recommended method for installing Git on Windows. The need to set this explicitly in your global user config suggests you should consider reinstalling or updating Git for Windows.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html#confirm-the-local-change-propagated-to-the-github-remote",
    "href": "connect-git-github.html#confirm-the-local-change-propagated-to-the-github-remote",
    "title": "11  Connect to GitHub",
    "section": "\n11.4 Confirm the local change propagated to the GitHub remote",
    "text": "11.4 Confirm the local change propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see the new “A line I wrote on my local computer” in the README.\nIf you click on “commits,” you should see one with the message “A commit from my local computer.”\nIf you have made it this far, you and your test repo are ready to graduate to using Git and GitHub with RStudio (Chapter 12).",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-git-github.html#clean-up",
    "href": "connect-git-github.html#clean-up",
    "title": "11  Connect to GitHub",
    "section": "\n11.5 Clean up",
    "text": "11.5 Clean up\nIf you’re ready to conclude this test of your Git installation and GitHub configuration, we can clean up the test repository now.\nLocal When you’re ready to clean up, you can delete the local repo any way you like. It’s just a regular directory on your computer.\nHere’s how to do that in the shell, if current working directory is myrepo:\ncd ..\nrm -rf myrepo/\nGitHub In the browser, go to your repo’s landing page on GitHub. Click on “Settings”.\nScroll down, click on “delete repository,” and do as it asks.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Connect to GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html",
    "href": "connect-rstudio-git-github.html",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "",
    "text": "12.1 Prerequisites\nWe assume the following:\nYou will also need a test repository on GitHub. If you don’t have a suitable test repository on GitHub, follow the instructions in the next section.\nIf you just completed the previous chapter, [Connect to GitHub], that repo will be perfect! However, I encourage you to delete the local repository, so you can experience how we use RStudio to clone it and get a local copy. This is a actually a workflow we refer to elsewhere (see Chapter 37) as “burn it all down”. It’s a deeply pragmatic coping strategy if your local Git repo is goofed up, but the version on GitHub is pretty current.\nDelete the folder corresponding to the local repo any way you like. It’s just a regular directory on your computer. Here’s how to do that in the shell, if current working directory is myrepo:",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#prerequisites",
    "href": "connect-rstudio-git-github.html#prerequisites",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "",
    "text": "You’ve registered a free GitHub account (Chapter 4).\nYou’ve installed/updated R and RStudio (Chapter 5).\nYou’ve installed Git (Chapter 6).\nYou’ve introduced yourself to Git (Chapter 7).\nYou’ve confirmed that you can push to / pull from GitHub from the command line (Chapter 11).\n\n\n\n\ncd ..\nrm -rf myrepo/",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#make-a-repo-on-github",
    "href": "connect-rstudio-git-github.html#make-a-repo-on-github",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.2 Make a repo on GitHub",
    "text": "12.2 Make a repo on GitHub\nGo to https://github.com and make sure you are logged in.\nNear “Repositories”, click the big green “New” button. Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.\nHow to fill this in:\n\nRepository template: No template.\nRepository name: &lt;&lt;&gt;&gt;\n\nDescription: &lt;&lt;&gt;&gt;\n\nPublic.\n&lt;&lt;&gt;&gt;\n\n\nClick the big green button that says “Create repository”.\nNow click the big green button that says “&lt;&gt; Code”.\nCopy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#clone-the-test-github-repository-to-your-computer-via-rstudio",
    "href": "connect-rstudio-git-github.html#clone-the-test-github-repository-to-your-computer-via-rstudio",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.3 Clone the test GitHub repository to your computer via RStudio",
    "text": "12.3 Clone the test GitHub repository to your computer via RStudio\nIn RStudio, start a new Project:\n\n\nFile &gt; New Project &gt; Version Control &gt; Git. In “Repository URL”, paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git.\n\nDo you NOT see an option to get the Project from Version Control? Restart RStudio and try again. Still no luck? Go to Chapter 13 for tips on how to help RStudio find Git.\n\n\nAccept the default project directory name, e.g. myrepo, which coincides with the GitHub repo name.\nTake charge of – or at least notice! – where the Project will be saved locally. A common rookie mistake is to have no idea where you are saving files or what your working directory is. Pay attention. Be intentional. Personally, I would do this in ~/tmp.\nI suggest you check “Open in new session”, as that’s what you’ll usually do in real life.\nClick “Create Project”.\n\nYou should find yourself in a new local RStudio Project that represents your test repo on GitHub. This should download the README.md file from GitHub. Look in RStudio’s file browser pane for the README.md file.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#make-local-changes-save-commit",
    "href": "connect-rstudio-git-github.html#make-local-changes-save-commit",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.4 Make local changes, save, commit",
    "text": "12.4 Make local changes, save, commit\nFrom RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes.\nCommit these changes to your local repo. How?\nFrom RStudio:\n\nClick the “Git” tab in upper right pane.\nCheck “Staged” box for README.md.\nIf you’re not already in the Git pop-up, click “Commit”.\nType a message in “Commit message”, such as “Commit from RStudio”.\nClick “Commit”.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#push-your-local-changes-online-to-github",
    "href": "connect-rstudio-git-github.html#push-your-local-changes-online-to-github",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.5 Push your local changes online to GitHub",
    "text": "12.5 Push your local changes online to GitHub\nClick the green “Push” button to send your local changes to GitHub.\nYou should not experience a credential challenge, since one of the pre-requisites was successfully pushing to GitHub from the command line (Chapter 11). RStudio’s Git pane just exposes a specific subset of command line Git and therefore once your credentials work in the shell, they should work in RStudio. If you do experience a credential challenge, that suggests you should have a look at the troubleshooting suggestions for your chosen protocol, either HTTPS or SSH.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#confirm-the-local-change-propagated-to-the-github-remote",
    "href": "connect-rstudio-git-github.html#confirm-the-local-change-propagated-to-the-github-remote",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.6 Confirm the local change propagated to the GitHub remote",
    "text": "12.6 Confirm the local change propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see the new “This is a line from RStudio” in the README.\nIf you click on “commits”, you should see one with the message “Commit from RStudio”.\nIf you have made it this far, you are DONE with set up. Congratulations!",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-rstudio-git-github.html#clean-up",
    "href": "connect-rstudio-git-github.html#clean-up",
    "title": "12  Connect RStudio to Git and GitHub",
    "section": "\n12.7 Clean up",
    "text": "12.7 Clean up\nQuit the RStudio instance that’s open to your test Project / Git repo.\nDelete the local repo any way you like. It’s just a regular directory on your computer.\nHere’s how to do that in the shell, if current working directory is myrepo:\ncd ..\nrm -rf myrepo/\nIn the browser, go to your repo’s landing page on GitHub. Click on “Settings”.\nScroll down, click on “delete repository,” and do as it asks.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Connect RStudio to Git and GitHub</span>"
    ]
  },
  {
    "objectID": "connect-can-rstudio-use-git.html",
    "href": "connect-can-rstudio-use-git.html",
    "title": "13  Detect Git from RStudio",
    "section": "",
    "text": "13.1 Do you have a problem?\nLet’s check if RStudio can find the Git executable.\nKeep reading if things don’t go so well or you want to know more.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Detect Git from RStudio</span>"
    ]
  },
  {
    "objectID": "connect-can-rstudio-use-git.html#do-you-have-a-problem",
    "href": "connect-can-rstudio-use-git.html#do-you-have-a-problem",
    "title": "13  Detect Git from RStudio",
    "section": "",
    "text": "File &gt; New Project… Do you see an option to create from Version Control? If yes, good.\nSelect New Directory &gt; Empty Project. Do you see a checkbox “Create a git repository”? If yes, good, CHECK IT.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Detect Git from RStudio</span>"
    ]
  },
  {
    "objectID": "connect-can-rstudio-use-git.html#find-git-yourself",
    "href": "connect-can-rstudio-use-git.html#find-git-yourself",
    "title": "13  Detect Git from RStudio",
    "section": "\n13.2 Find Git yourself",
    "text": "13.2 Find Git yourself\nRStudio can only act as a GUI front-end for Git if Git has been successfully installed (Chapter 6) AND RStudio can find it.\nA basic test for successful installation of Git is to simply enter git in the shell (Appendix A). If you get a complaint about Git not being found, it means installation was unsuccessful or that it is not being found, i.e. it is not on your PATH.\nIf you are not sure where the Git executable lives, try this in a shell:\n\nwhich git (Mac, Linux, Git Bash shell on Windows)\nwhere git (Windows command prompt, i.e. cmd.exe)",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Detect Git from RStudio</span>"
    ]
  },
  {
    "objectID": "connect-can-rstudio-use-git.html#tell-rstudio-where-to-find-git",
    "href": "connect-can-rstudio-use-git.html#tell-rstudio-where-to-find-git",
    "title": "13  Detect Git from RStudio",
    "section": "\n13.3 Tell RStudio where to find Git",
    "text": "13.3 Tell RStudio where to find Git\nIf Git appears to be installed and findable, launch RStudio. Quit and re-launch RStudio if there’s any doubt in your mind about whether you opened RStudio before or after installing Git. Don’t make me stop this car and restart RStudio for you in office hours. DO IT.\nFrom RStudio, go to Tools &gt; Global Options &gt; Git/SVN and make sure that the box Git executable points to your Git executable.\nOn macOS and Linux, the path usually looks something like this:\n/usr/bin/git\nIf you need to set this on macOS, it can sometimes be hard to navigate to the necessary directory, once you’ve clicked “Browse” and are working with a Finder-type window. The keyboard shortcut “command + shift + g” will summon “Go To Folder”, where you will be able to type or paste any path you want.\nOn Windows, this path should look something like this:\nC:/Program Files/Git/bin/git.exe\nand here is a screenshot on Windows:\n\n\n\n\n\n\n\n\nWARNING: On Windows, do NOT use C:/Program Files/Git/cmd/git.exe. bin in the path is GOOD YES! cmd in the path is BAD NO!\nWARNING: On Windows, do NOT set this to git-bash.exe. Something that ends in git.exe is GOOD YES! git-bash.exe is BAD NO!\nRestart RStudio if you make any changes here. Don’t make me stop this car again and restart RStudio for you in office hours. DO IT.\nRe-do the steps at the top of the page to see if RStudio and Git are communicating now.\nNo joy?\n\nI’ve seen this help: With your Project open, go to Tools &gt; Project Options.... If available, click on “Git/SVN” and select “Git” in the Version control system dropdown menu. Answer “yes” to the “Confirm New Git Repository” pop up. Answer “yes” to the “Confirm Restart RStudio” pop up.\nIf you installed Git via GitHub for Windows, it is possible the Git executable is really well hidden. Get help or use one of our recommended methods of installing Git.\nYour PATH is probably not set up correctly and/or you should re-install Git and control/notice where it’s going. Read more in Chapter 14.\nGet our help.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Detect Git from RStudio</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html",
    "href": "connect-troubleshooting.html",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "",
    "text": "14.1 I think I have installed Git but damn if I can find it\nWhen you install Git, try to control or record where it is being installed! Make a mental or physical note of these things.\nYou may be able to find Git after the fact with these commands in the shell (Appendix A):\nIt is not entirely crazy to just re-install Git, using a method that leaves it in a more conventional location, and to pay very close attention to where it’s being installed. Live and learn.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#i-think-i-have-installed-git-but-damn-if-i-can-find-it",
    "href": "connect-troubleshooting.html#i-think-i-have-installed-git-but-damn-if-i-can-find-it",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "",
    "text": "which git (Mac, Linux, or anything running a bash shell)\nwhere git (Windows, when not in a bash shell)",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#rstudio-git-pane-disappears-on-mac-os",
    "href": "connect-troubleshooting.html#rstudio-git-pane-disappears-on-mac-os",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.2 RStudio Git pane disappears on Mac OS",
    "text": "14.2 RStudio Git pane disappears on Mac OS\nSometimes the RStudio Git pane disappears on a system where it was previously working. This usually happens to people who installed Git by installing the Xcode command line tools. It is usually a sign that you need to re-agree to the Xcode license agreement. This is necessary after a Mac OS upgrade, re-installing Xcode, or even quiet Xcode upgrades that sometimes seem to happen without the user’s knowledge.\nIn the shell, you could execute git status and you might see a message along these lines:\nAgreeing to the Xcode/iOS license requires admin privileges, please run “sudo xcodebuild -license” and then retry this command.\nIf you get such clear instructions, by all means do what it says, i.e. run sudo xcodebuild -license, to re-agree to the license.\nIn any case, you need to tickle the Xcode command line tools to prompt you for whatever it needs. Here are other commands that, depending on the situation, might trigger the necessary prompts:\nxcode-select --install\nor\ngit config --global --list\nThen restart RStudio.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#dysfunctional-path",
    "href": "connect-troubleshooting.html#dysfunctional-path",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.3 Dysfunctional PATH",
    "text": "14.3 Dysfunctional PATH\nSome cases of RStudio not automatically detecting the Git executable stem from problems with PATH. This is the set of directories where your computer will look for executables, such as Git (today) or make. Certain methods of Git installation, especially on Windows and/or older OSes, have a higher tendency to put Git in an unconventional location or to fail to add the relevant directory to PATH.\nHow to see your PATH?\nIn the shell:\necho $PATH\nTake a good hard look at this. See the point above about finding your Git executable or re-installing it while you are wide awake. Is the Git executable’s parent directory in your PATH? No? Fix that.\nAt this point I recommend that you do a Google search to find instructions on how to modify PATH on your specific operating system.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#pushpull-buttons-greyed-out-in-rstudio",
    "href": "connect-troubleshooting.html#pushpull-buttons-greyed-out-in-rstudio",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.4 Push/Pull buttons greyed out in RStudio",
    "text": "14.4 Push/Pull buttons greyed out in RStudio\nAre you sure your local repository is associated with a remote repository, e.g. a GitHub repo? In a shell with working directory set to the local Git repo, enter this command:\n~/tmp/myrepo % git remote -v                                           \norigin  git@github.com:jennybc/myrepo.git (fetch)\norigin  git@github.com:jennybc/myrepo.git (push)\nWe want to see that fetch and push are set to remote URLs that point to the remote repo.\nIf you discover you still need to set a remote, get the HTTPS or SSH URL, as appropriate, for your GitHub repo. This is easy to get onto your clipboard from the repo’s GitHub page. Do this in the shell:\ngit remote add origin https://github.com/jennybc/myrepo.git\nDownload all the files from the online GitHub repository and deal with any conflicts (substituting master for main, if relevant).\ngit pull origin main\nCall git remote -v again. Once you are satisfied that your GitHub remote is set properly, you can move on to the next step.\nAre you sure the current branch is tracking a branch on the remote? In that same shell, in your repo, do this:\n~/tmp/myrepo % git branch -vv\n* main 2899c91 [origin/main] A commit from my local computer\nThe above shows successful confirmation that the local main branch is tracking origin/main, i.e. the main branch on GitHub. If you don’t see the [origin/main] bit, that is a problem. By the way, git branch -r and git remote show origin are two more commands that are helpful for examining your remote setup.\nWhen connecting a local repo to a new GitHub repo, a lot of people remember to add the GitHub remote, but forget to also cement this tracking relationship for any relevant branches.\nIf you discover your local main branch is not yet tracking main on GitHub, fix that like so:\ngit push --set-upstream origin main\nThis is equivalent to git push -u origin main but conveys more about what you are doing.\nCall git branch -vv or git branch -r or git remote show origin again to confirm that the main branch on GitHub is the tracking branch for the local main branch.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#i-have-no-idea-if-my-local-repo-and-my-remote-repo-are-connected.",
    "href": "connect-troubleshooting.html#i-have-no-idea-if-my-local-repo-and-my-remote-repo-are-connected.",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.5 I have no idea if my local repo and my remote repo are connected.",
    "text": "14.5 I have no idea if my local repo and my remote repo are connected.\nSee the above section on “Push/Pull buttons greyed out in RStudio.”",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#push-rejected-i.e.-fail-at-the-gitgithub-level",
    "href": "connect-troubleshooting.html#push-rejected-i.e.-fail-at-the-gitgithub-level",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.6 Push rejected, i.e. fail at the Git/GitHub level",
    "text": "14.6 Push rejected, i.e. fail at the Git/GitHub level\nYou might have changes on the remote AND on your local repo. Just because you don’t remember making any edits in the browser doesn’t mean you didn’t. Humor me.\nPull first. Resolve any conflicts. Then try your push again.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#rstudio-is-not-making-certain-files-available-for-stagingcommitting",
    "href": "connect-troubleshooting.html#rstudio-is-not-making-certain-files-available-for-stagingcommitting",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.7 RStudio is not making certain files available for staging/committing",
    "text": "14.7 RStudio is not making certain files available for staging/committing\nDo you have a space in your directory or file names? A space in a file name is a space in your soul. Get rid of it.\nIs your Git repo / RStudio Project inside a folder that … eventually rolls up to Google Drive, DropBox, Microsoft OneDrive, or a network drive? If yes, I recommend you move the repo / Project into a plain old directory that lives directly on your computer and that is not managed by, e.g., Google Drive.\nIf you cannot deal with the two root causes identified above, then it is possible that a more powerful Git client (Chapter 8) will be able to cope with these situations. But I make no promises. You should also try Git operations from the command line.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "connect-troubleshooting.html#i-hear-you-have-some-git-repo-inside-your-git-repo",
    "href": "connect-troubleshooting.html#i-hear-you-have-some-git-repo-inside-your-git-repo",
    "title": "14  RStudio, Git, GitHub Hell",
    "section": "14.8 I hear you have some Git repo inside your Git repo",
    "text": "14.8 I hear you have some Git repo inside your Git repo\nDo not create a Git repository inside another Git repository. Just don’t.\nIf you have a genuine need for this, which is really rare, the proper way to do it is via submodules.\nIn STAT 545, we certainly do not need to do this and when we’ve seen it, it’s been a mistake. This has resulted in the unexpected and complete loss of the inner Git repository. To be sure, there was more going on here (cough, GitHub Desktop client), but non-standard usage of Git repos makes it much easier to make costly mistakes.",
    "crumbs": [
      "Connect Git, GitHub, RStudio",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RStudio, Git, GitHub Hell</span>"
    ]
  },
  {
    "objectID": "usage-intro.html",
    "href": "usage-intro.html",
    "title": "Get started with GitHub",
    "section": "",
    "text": "Now that we’ve verified your Git/GitHub/RStudio setup, we can demo the workflows you’ll use to get your work onto GitHub:\n\n[New project, GitHub first] is the easiest way to get a working project.\n[Existing project, GitHub first] is a deeply pragmatic way to get pre-existing work onto GitHub.\n[Existing project, GitHub last] is the more proper way to connect existing local work to a remote on GitHub, especially if there’s already a Git history.\n\nThis part concludes with two R-specific workflows that show off how well R Markdown (the format) and rmarkdown (the package) work with GitHub:\n\n[Test drive R Markdown]\n[Render an R script]",
    "crumbs": [
      "Early GitHub Wins",
      "Get started with GitHub"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html",
    "href": "usage-new-project-github-first.html",
    "title": "15  New project, GitHub first",
    "section": "",
    "text": "15.1 Make a repo on GitHub\nGo to https://github.com and make sure you are logged in.\nNear “Repositories”, click the big green “New” button. Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.\nHow to fill this in:\nClick the big green button that says “Create repository”.\nNow click the big green button that says “&lt;&gt; Code”.\nCopy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#make-a-repo-on-github",
    "href": "usage-new-project-github-first.html#make-a-repo-on-github",
    "title": "15  New project, GitHub first",
    "section": "",
    "text": "Repository template: No template.\nRepository name: &lt;&lt;&gt;&gt;\n\nDescription: &lt;&lt;&gt;&gt;\n\nPublic.\n&lt;&lt;&gt;&gt;\n\n\n\n\n\n\n\n15.1.1 GitLab\nLog in at https://gitlab.com. Click on the “+” button in the top-right corner, and then on “New project”.\n\nProject name: myrepo (or whatever you wish)\n\nPublic\nYES Initialize repository with a README\n\nClick the big green button “Create project.”\nCopy the HTTPS or SSH clone URL to your clipboard via the blue “Clone” button.\n\n15.1.2 Bitbucket\nLog in at https://bitbucket.org. On the left-side pane, click on the “+” button, and then on “Repository” under “Create”.\n\nRepository name: myrepo (or whatever you wish)\nAccess level: Uncheck to make the repository public.\nInclude a README?: Select either “Yes, with a tutorial (for beginners)” or “Yes, with a template”\nVersion control system: Git\n\nClick the big blue button “Create repository.”\nCopy the HTTPS or SSH clone URL that appears when you click on the blue “Clone” button. Make sure you remove the git clone ... that shows up at the beginning.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#sec-new-rstudio-project-via-git",
    "href": "usage-new-project-github-first.html#sec-new-rstudio-project-via-git",
    "title": "15  New project, GitHub first",
    "section": "\n15.2 New RStudio Project via git clone",
    "text": "15.2 New RStudio Project via git clone\n\n\n\n\n\n\n\n\nI present two ways to do this:\n\nusethis::create_from_github()\nVia the RStudio IDE\n\n(Recall that we showed how to do this with command line Git in Chapter 11.)\nWhen you are cloning your own GitHub repository, the two methods are equivalent. In other scenarios, especially fork-and-clone ((secfork-and-clone?)), I think usethis::create_from_github() is superior, because it does additional, recommended setup.\nPick one of these methods below.\n\n15.2.1 usethis::create_from_github()\n\nYou can execute this command in any R session. If you use RStudio, then do this in the R console of any RStudio instance.\n\nusethis::create_from_github(\n  \"https://github.com/YOU/YOUR_REPO.git\",\n  destdir = \"~/path/to/where/you/want/the/local/repo/\"\n)\n\nThe first argument is repo_spec and it accepts the GitHub repo specification in various forms. In particular, you can use the URL we just copied from GitHub.\nThe destdir argument specifies the parent directory where you want the new folder (and local Git repo) to live. If you don’t specify destdir, usethis defaults to some very conspicuous place, like your desktop. If you like to keep Git repos in a certain folder on your computer, you can personalize this default by setting the usethis.destdir option in your .Rprofile.\nWe’re accepting the default behaviour of two other arguments, rstudio and open, because that’s what most people will want. For example, for an RStudio user, create_from_github() does this:\n\nCreates a new local directory in destdir, which is all of these things:\n\na directory or folder on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\n\nOpens a new RStudio instance in the new Project\nIn the absence of other constraints, I suggest that all of your R projects have exactly this set-up.\n\n15.2.2 RStudio IDE\nIn RStudio, start a new Project:\n\n\nFile &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git.\nBe intentional about where you create this Project.\nI suggest you “Open in new session”.\nClick “Create Project” to create a new directory, which will be all of these things:\n\na directory or “folder” on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\n\nIn the absence of other constraints, I suggest that all of your R projects have exactly this set-up.\n\nThis should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nBehind the scenes, RStudio has done this for you:\ngit clone https://github.com/jennybc/myrepo.git\n\n15.2.3 Have a look around\nRegardless of whether you used usethis or RStudio, you should now be working in the new Git repo. The implicit git clone should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nThere’s a big advantage to the “GitHub first, then RStudio” workflow: the remote GitHub repo is configured as the origin remote for your local repo and your local main branch is now tracking the main on GitHub. This is a technical but important point about Git. The practical implication is that you are now set up to push and pull. No need to fanny around setting up Git remotes and tracking branches on the command line.\nWe’re about to confirm we are setup for pulling and pushing.\n\n\n\n\nPull and push.\n\n\n\n\n15.2.4 Optional: peek under the hood\nCompletely optional activity: use command line Git to see what we’re talking about above, i.e. the remote and tracking branch setup.\ngit remote -v or git remote --verbose shows the remotes you have setup. Here’s how that looks for someone using HTTPS with GitHub and calling it origin:\n~/tmp/myrepo % git remote -v\norigin  https://github.com/jennybc/myrepo.git (fetch)\norigin  https://github.com/jennybc/myrepo.git (push)\ngit branch -vv prints info about the current branch (-vv for “very verbose”, I guess). In particular, we can see that local main is tracking the main branch on origin, a.k.a. origin/main.\n~/tmp/myrepo % git branch -vv\n* main 2899c91 [origin/main] A commit from my local computer\nFinally, git remote show origin gives yet another view on useful remote and branch information:\n~/tmp/myrepo % git remote show origin    \n* remote origin\n  Fetch URL: https://github.com/jennybc/myrepo.git\n  Push  URL: https://github.com/jennybc/myrepo.git\n  HEAD branch: main\n  Remote branch:\n    main tracked\n  Local branch configured for 'git pull':\n    main merges with remote main\n  Local ref configured for 'git push':\n    main pushes to main (up to date)\ngit clone, which RStudio did for us, sets all of this up automatically. This is why “GitHub first, then RStudio” is the preferred way to start projects early in your Git/GitHub life.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#make-local-changes-save-commit",
    "href": "usage-new-project-github-first.html#make-local-changes-save-commit",
    "title": "15  New project, GitHub first",
    "section": "\n15.3 Make local changes, save, commit",
    "text": "15.3 Make local changes, save, commit\nDo this every time you finish a valuable chunk of work, probably many times a day.\nFrom RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes.\nCommit these changes to your local repo. How?\n\nClick the “Git” tab in upper right pane\nCheck “Staged” box for any files whose existence or modifications you want to commit.\n\nTo see more detail on what’s changed in file since the last commit, click on “Diff” for a Git pop-up\n\n\nIf you’re not already in the Git pop-up, click “Commit”\nType a message in “Commit message”, such as “Commit from RStudio”.\nClick “Commit”",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#push-your-local-changes-to-github",
    "href": "usage-new-project-github-first.html#push-your-local-changes-to-github",
    "title": "15  New project, GitHub first",
    "section": "\n15.4 Push your local changes to GitHub",
    "text": "15.4 Push your local changes to GitHub\nDo this a few times a day, but possibly less often than you commit.\nYou have new work in your local Git repository, but the changes are not online yet.\nThis will seem counterintuitive, but first let’s stop and pull from GitHub.\nWhy? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push.\nClick the blue “Pull” button in the “Git” tab in RStudio. I doubt anything will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit.\nClick the green “Push” button to send your local changes to GitHub. RStudio will report something along these lines:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/jennybc/myrepo.git\n   2899c91..b34cade  HEAD -&gt; main",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#confirm-the-local-change-propagated-to-the-github-remote",
    "href": "usage-new-project-github-first.html#confirm-the-local-change-propagated-to-the-github-remote",
    "title": "15  New project, GitHub first",
    "section": "\n15.5 Confirm the local change propagated to the GitHub remote",
    "text": "15.5 Confirm the local change propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see the new “This is a line from RStudio” in the README.\nIf you click on “commits,” you should see one with the message “Commit from RStudio”.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#make-a-change-on-github",
    "href": "usage-new-project-github-first.html#make-a-change-on-github",
    "title": "15  New project, GitHub first",
    "section": "\n15.6 Make a change on GitHub",
    "text": "15.6 Make a change on GitHub\nClick on README.md in the file listing on GitHub.\nIn the upper right corner, click on the pencil for “Edit this file”.\nAdd a line to this file, such as “Line added from GitHub.”\nEdit the commit message in “Commit changes” or accept the default.\nClick the big green button “Commit changes.”\n\n15.6.1 GitLab\nClick on README.md in the file listing on GitLab.\nIn the upper right corner, click on “Edit”.\nAdd a line to this file, such as “Line added from GitLab.”\nEdit the commit message in “Commit changes” or accept the default.\nClick the big green button “Commit changes.”\n\n15.6.2 Bitbucket\nClick on README.md in the file listing on Bitbucket.\nIn the upper right corner, click on “Edit”.\nAdd a line to this file, such as “Line added from Bitbucket.”\nClick on the blue “Commit” button. A pop-up will show up. Edit the commit message or accept the default.\nClick the blue “Commit” button.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#pull-from-github",
    "href": "usage-new-project-github-first.html#pull-from-github",
    "title": "15  New project, GitHub first",
    "section": "\n15.7 Pull from GitHub",
    "text": "15.7 Pull from GitHub\nBack in RStudio locally …\nInspect your README.md. It should NOT have the line “Line added from GitHub”. It should be as you left it. Verify that.\nClick the blue Pull button.\nLook at README.md again. You should now see the new line there.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-new-project-github-first.html#the-end",
    "href": "usage-new-project-github-first.html#the-end",
    "title": "15  New project, GitHub first",
    "section": "\n15.8 The end",
    "text": "15.8 The end\nNow just “lather, rinse, repeat”. Do work somewhere: locally or on GitHub. Commit it. Push it or pull it, depending on where you did the work, but get local and remote “synced up”. Repeat.\nNote that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>New project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html",
    "href": "usage-existing-project-github-first.html",
    "title": "16  Existing project, GitHub first",
    "section": "",
    "text": "16.1 Make a repo on GitHub\nGo to https://github.com and make sure you are logged in.\nNear “Repositories”, click the big green “New” button. Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.\nHow to fill this in:\nClick the big green button that says “Create repository”.\nNow click the big green button that says “&lt;&gt; Code”.\nCopy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#make-a-repo-on-github",
    "href": "usage-existing-project-github-first.html#make-a-repo-on-github",
    "title": "16  Existing project, GitHub first",
    "section": "",
    "text": "Repository template: No template.\nRepository name: &lt;&lt;&gt;&gt;\n\nDescription: &lt;&lt;&gt;&gt;\n\nPublic.\n&lt;&lt;&gt;&gt;",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#sec-git-clone-usethis-rstudio",
    "href": "usage-existing-project-github-first.html#sec-git-clone-usethis-rstudio",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.2 New RStudio Project via git clone",
    "text": "16.2 New RStudio Project via git clone\n\n\n\n\n\n\n\n\nI present two ways to do this:\n\nusethis::create_from_github()\nVia the RStudio IDE\n\n(Recall that we showed how to do this with command line Git in Chapter 11.)\nWhen you are cloning your own GitHub repository, the two methods are equivalent. In other scenarios, especially fork-and-clone ((secfork-and-clone?)), I think usethis::create_from_github() is superior, because it does additional, recommended setup.\nPick one of these methods below.\n\n16.2.1 usethis::create_from_github()\n\nYou can execute this command in any R session. If you use RStudio, then do this in the R console of any RStudio instance.\n\nusethis::create_from_github(\n  \"https://github.com/YOU/YOUR_REPO.git\",\n  destdir = \"~/path/to/where/you/want/the/local/repo/\"\n)\n\nThe first argument is repo_spec and it accepts the GitHub repo specification in various forms. In particular, you can use the URL we just copied from GitHub.\nThe destdir argument specifies the parent directory where you want the new folder (and local Git repo) to live. If you don’t specify destdir, usethis defaults to some very conspicuous place, like your desktop. If you like to keep Git repos in a certain folder on your computer, you can personalize this default by setting the usethis.destdir option in your .Rprofile.\nWe’re accepting the default behaviour of two other arguments, rstudio and open, because that’s what most people will want. For example, for an RStudio user, create_from_github() does this:\n\nCreates a new local directory in destdir, which is all of these things:\n\na directory or folder on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\n\nOpens a new RStudio instance in the new Project\nIn the absence of other constraints, I suggest that all of your R projects have exactly this set-up.\n\n16.2.2 RStudio IDE\nIn RStudio, start a new Project:\n\n\nFile &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/jennybc/myrepo.git.\nBe intentional about where you create this Project.\nI suggest you “Open in new session”.\nClick “Create Project” to create a new directory, which will be all of these things:\n\na directory or “folder” on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\n\nIn the absence of other constraints, I suggest that all of your R projects have exactly this set-up.\n\nThis should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file.\nBehind the scenes, RStudio has done this for you:\ngit clone https://github.com/jennybc/myrepo.git",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#bring-your-existing-project-over",
    "href": "usage-existing-project-github-first.html#bring-your-existing-project-over",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.3 Bring your existing project over",
    "text": "16.3 Bring your existing project over\nUsing your favorite method of moving or copying files, copy the files that constitute your existing project into the directory for this new project.\nIn RStudio, consult the Git pane and the file browser.\n\nAre you seeing all the files? They should be here if your move/copy was successful.\nAre they showing up in the Git pane with questions marks? They should be appearing as new untracked files.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#stage-and-commit",
    "href": "usage-existing-project-github-first.html#stage-and-commit",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.4 Stage and commit",
    "text": "16.4 Stage and commit\nCommit your files to this repo. How?\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for all files that you want to commit.\n\nDefault: stage it.\nWhen to reconsider: this will all go to GitHub. Consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore.\n\n\nIf you’re not already in the Git pop-up, click “Commit”\nType a message in “Commit message”, such as “Init project XYZ”.\nClick “Commit”",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#push-your-local-changes-to-github",
    "href": "usage-existing-project-github-first.html#push-your-local-changes-to-github",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.5 Push your local changes to GitHub",
    "text": "16.5 Push your local changes to GitHub\nClick the green “Push” button to send your local changes to GitHub. RStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/jennybc/myrepo.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#confirm-the-local-change-propagated-to-the-github-remote",
    "href": "usage-existing-project-github-first.html#confirm-the-local-change-propagated-to-the-github-remote",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.6 Confirm the local change propagated to the GitHub remote",
    "text": "16.6 Confirm the local change propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see all the project files you committed there.\nIf you click on “commits,” you should see one with the message you used, e.g. “Init project XYZ”.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-first.html#the-end",
    "href": "usage-existing-project-github-first.html#the-end",
    "title": "16  Existing project, GitHub first",
    "section": "\n16.7 The end",
    "text": "16.7 The end\nNow just “lather, rinse, repeat”. Do work somewhere: locally or on GitHub. Commit it. Push it or pull it, depending on where you did the work, but get local and remote “synced up”. Repeat.\nNote that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Existing project, GitHub first</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html",
    "href": "usage-existing-project-github-last.html",
    "title": "17  Existing project, GitHub last",
    "section": "",
    "text": "17.1 Prepare the local project\nWe assume you’ve got your existing R project isolated in a directory on your computer. If that’s not already true, make it so. Create a directory and marshal all the existing data and R scripts there. It doesn’t really matter where you do this, but note where the project currently lives.\nI encourage you to make this project into an RStudio project, although it is not absolutely required. If you opt-out of this, the instructions using command line Git or usethis will still work for you, outside of RStudio.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html#prepare-the-local-project",
    "href": "usage-existing-project-github-last.html#prepare-the-local-project",
    "title": "17  Existing project, GitHub last",
    "section": "",
    "text": "17.1.1 Make or verify an RStudio Project\nIf the project is not already an RStudio Project, make it so:\n\nWithin RStudio you can do: File &gt; New Project &gt; Existing Directory and, if you wish, “Open in new session”.\nAlternatively, from R, call usethis::create_project(\"path/to/your/project\"), substituting the path to your existing project directory.\n\nIf your project is already an RStudio Project, launch it.\n\n17.1.2 Make or verify a Git repo\nYou should be in RStudio now, in your project.\nIs it already a Git repository? The presence of the Git pane should tip you off. If yes, you’re done.\nIf not, you have several options:\n\nIn the R Console, call usethis::use_git().\nIn RStudio, go to Tools &gt; Project Options … &gt; Git/SVN. Under “Version control system”, select “Git”. Confirm New Git Repository? Yes!\nIn the shell, with working directory set to the project’s directory, do git init.\n\nIf you used usethis or RStudio to initialize the Git repo, the Project should re-launch in RStudio. Do that yourself if you did git init. RStudio should now have a Git pane.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html#stage-and-commit",
    "href": "usage-existing-project-github-last.html#stage-and-commit",
    "title": "17  Existing project, GitHub last",
    "section": "\n17.2 Stage and commit",
    "text": "17.2 Stage and commit\nIf your local project was already a Git repo and was up-to-date, move on. Otherwise, you probably need to stage and commit.\n\nClick the “Git” tab in upper right pane\nCheck “Staged” box for all files you want to commit.\n\nDefault: stage everything\nWhen to do otherwise: this will all go to GitHub. So consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore.\n\n\nIf you’re not already in the Git pop-up, click “Commit”\nType a message in “Commit message”.\nClick “Commit”",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html#create-and-connect-a-github-repo",
    "href": "usage-existing-project-github-last.html#create-and-connect-a-github-repo",
    "title": "17  Existing project, GitHub last",
    "section": "\n17.3 Create and connect a GitHub repo",
    "text": "17.3 Create and connect a GitHub repo\nWe’ll show a few methods for creating a new GitHub repo and connecting it to your local repo. Pick one.\n\n17.3.1 Create and connect a GitHub repo with usethis\nTo use usethis for this task, you must have configured a personal access token (PAT). This will already by configured for anyone using HTTPS as their protocol, because they are already using the PAT to authenticate for other Git operations. But if you are an SSH person, you will need to configure a PAT, which is explained in Chapter 9. It is fine to have both a PAT and SSH keys.\nIn your project, in the R Console, call:\n\nusethis::use_github()\n#&gt; ✓ Creating GitHub repository 'jennybc/myrepo'\n#&gt; ✓ Setting remote 'origin' to 'https://github.com/jennybc/myrepo.git'\n#&gt; ✓ Pushing 'main' branch to GitHub and setting 'origin/main' as upstream branch\n#&gt; ✓ Opening URL 'https://github.com/jennybc/myrepo'\n\n\n\n\n\n\n\n\n\nusethis::use_github() does the following:\n\nCreates a new repo on GitHub.\nConfigures that new repo as the origin remote for the local repo.\nSets up your local default branch (e.g. main) to track same on origin and does an initial push.\nOpens the new repo in your browser.\n\n17.3.2 Create and connect a GitHub repo without usethis\nFirst, you need to create a new repo on GitHub.\nGo to https://github.com and make sure you are logged in.\nNear “Repositories”, click the big green “New” button. Or, if you are on your own profile page, click on “Repositories”, then click the big green “New” button.\nHow to fill this in:\n\nRepository template: No template.\nRepository name: &lt;&lt;&gt;&gt;\n\nDescription: &lt;&lt;&gt;&gt;\n\nPublic.\n&lt;&lt;&gt;&gt;\n\n\nClick the big green button that says “Create repository”.\nNow click the big green button that says “&lt;&gt; Code”.\nCopy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.\n\n\n\n\n\n\n\n\n\n17.3.2.1 Connect local repo to GitHub repo with RStudio\nClick on the “two purple boxes and a white square” in the Git pane. Click “Add remote”. Paste the GitHub repo’s URL here and pick a remote name, almost certainly origin. Now “Add”.\nWe should be back in the “New Branch” dialog (if not, click on the “two purple boxes and a white square” in the Git pane again). I assume you’re on the main branch and want it to track main on GitHub (or whatever default branch you are using). Enter main as the branch name and make sure “Sync branch with remote” is checked. Click “Create” (yes, even though the branch already exists). In the next dialog, choose “overwrite”.\n\n17.3.2.2 Connect local repo to GitHub repo with the command line\nIn a shell, do this, substituting your URL:\ngit remote add origin https://github.com/jennybc/myrepo.git\nPush and cement the tracking relationship between your local main branch and main on GitHub (or whatever your default branch is named):\ngit push --set-upstream origin main",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html#confirm-the-local-files-propagated-to-the-github-remote",
    "href": "usage-existing-project-github-last.html#confirm-the-local-files-propagated-to-the-github-remote",
    "title": "17  Existing project, GitHub last",
    "section": "\n17.4 Confirm the local files propagated to the GitHub remote",
    "text": "17.4 Confirm the local files propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see all the project files you committed there.\nIf this project already had a Git history, it should be reflected on GitHub.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-existing-project-github-last.html#the-end",
    "href": "usage-existing-project-github-last.html#the-end",
    "title": "17  Existing project, GitHub last",
    "section": "\n17.5 The end",
    "text": "17.5 The end\nNow just “lather, rinse, repeat”. Do work somewhere: locally or on GitHub. Commit it. Push it or pull it, depending on where you did the work, but get local and remote “synced up”. Repeat.\nNote that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Existing project, GitHub last</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html",
    "href": "usage-rmd-and-github.html",
    "title": "18  Test drive R Markdown",
    "section": "",
    "text": "18.1 Hello World\nWe’ll practice with RStudio’s boilerplate R Markdown document.\nLaunch RStudio in a Project that is a Git repo that is connected to a GitHub repo.\nWe are modelling “walk before you run” here. It is best to increase complexity in small increments. We test our system’s ability to render the “hello world” of R Markdown documents before we muddy the waters with our own, probably buggy, documents.\nDo this: File &gt; New File &gt; R Markdown …\nSave this document to a reasonable filename and location. The filename should end in .Rmd or .rmd. Save in the top-level of this RStudio project and Git repository, that is also current working directory. Trust me on this and do this for a while.\nYou might want to commit at this point. That will help you see exactly what’s happening with your files, because this will appear as a “diff” in the Git pane. Making change very visible is one of the big benefits of using Git.\nClick on “Knit HTML” or do File &gt; Knit Document. RStudio should display a preview of the resulting HTML. Also look at the file browser. You should see the original R Markdown document, i.e. foo.Rmd AND the resulting HTML foo.html.\nCongratulations, you’ve just made your first reproducible report with R Markdown.\nThis is another good time to commit changes.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#hello-world",
    "href": "usage-rmd-and-github.html#hello-world",
    "title": "18  Test drive R Markdown",
    "section": "",
    "text": "Give it an informative title. This will appear in the document but does not necessarily have anything to do with the file’s name. But the title and filename should be related! Why confuse yourself? The title is for human eyeballs, so it can contain spaces and punctuation. The filename is for humans and computers, so it should have similar words in it but no spaces and no punctuation.\nAccept the default Author or edit if you wish.\nAccept the default output format of HTML.\nClick OK.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#push-to-github",
    "href": "usage-rmd-and-github.html#push-to-github",
    "title": "18  Test drive R Markdown",
    "section": "18.2 Push to GitHub",
    "text": "18.2 Push to GitHub\nPush the current state to GitHub.\nGo visit it in the browser.\nDo you see the new files? An R Markdown document and the associated HTML? Visit both in the browser. Verify this:\n\nRmd is quite readable. But the output is obviously not there.\nHTML is ugly.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#output-format",
    "href": "usage-rmd-and-github.html#output-format",
    "title": "18  Test drive R Markdown",
    "section": "18.3 Output format",
    "text": "18.3 Output format\nDo you really want HTML? Do you only want HTML? Are you absolutely sure? If so, you can skip this step!\nThe magical process that turns your R Markdown to HTML is like so:\nfoo.Rmd --&gt; foo.md --&gt; foo.html\nNote the intermediate markdown, foo.md. By default RStudio discards this, but you might want to hold on to that markdown file!\nWhy? GitHub gives very special treatment to markdown files. They are rendered in an almost HTML-like way. This is great because it preserves all the charms of plain text, but gives you a pseudo-webpage for free when you visit the file in the browser. In contrast, HTML is rendered as plain text on GitHub and you’ll have to take special measures to see it the way you want.\nIn many cases, you only want the markdown. In that case, we switch the output format to github_document. This means rendering look like this:\nfoo.Rmd --&gt; foo.md\nwhere foo.md is GitHub-flavored markdown. If you still want the HTML but also the intermediate markdown, there’s a way to request that too.\nThis point we’re making about the importance of .md files is why so many R packages have a NEWS.md file and README.md, often generated from README.Rmd.\nOutput format is one of the many things we can control in the YAML frontmatter of .Rmd documents, i.e. the text at the top of your file between leading and trailing lines of ---.\nYou can make some YAML changes via the RStudio IDE: click on the “gear” in the top bar of the source editor, near the “Knit HTML” button. Select “Output options” and go to the Advanced tab and check “Keep markdown source file.” Your YAML should now look more like this:\n---\ntitle: \"Something fascinating\"\nauthor: \"Jenny Bryan\"\ndate: \"`r format(Sys.Date())`\"\noutput:\n  html_document:\n    keep_md: true\n---\nYou should have gained the line keep_md: true. You can also simply edit the file yourself to achieve this. The IDE only exposes a small fraction of what’s possible to configure in the YAML.\nIn fact, a hand-edit is necessary if you want to keep only markdown and get GitHub-flavored markdown. In that case, make your YAML look like this:\n---\ntitle: \"Something fascinating\"\nauthor: \"Jenny Bryan\"\ndate: \"`r format(Sys.Date())`\"\noutput: github_document\n---\nSave!\nYou might want to commit at this point.\nRender via “Knit HTML” button.\nNow revisit the file browser. In addition to foo.Rmd, you should now see foo.md. If there are R chunks that make figures, the usage of markdown output formats will also cause those figure files to be left behind in a sensibly named sub-directory, such as foo_files.\nIf you commit and push foo.md and everything inside foo_files, then anyone with permission to view your GitHub repo can see a decent-looking version of your report.\nIf your output format is html_document, you should still see foo.html. If your output format is github_document and you see foo.html, that’s leftover from earlier experiments. Delete that. It will only confuse you later.\nYou might want to commit here.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#push-to-github-1",
    "href": "usage-rmd-and-github.html#push-to-github-1",
    "title": "18  Test drive R Markdown",
    "section": "18.4 Push to GitHub",
    "text": "18.4 Push to GitHub\nPush the current state to GitHub.\nGo visit it in the browser.\nDo you see the modifications and new file(s)? Your .Rmd should be modified, i.e. you should see the changes you made to the YAML frontmatter. And you should have gained, at least, the associated markdown file, foo.md.\n\nVisit the markdown file and compare to our previous HTML.\nDo you see how the markdown is much more directly useful on GitHub? Internalize this lesson.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#put-your-stamp-on-it",
    "href": "usage-rmd-and-github.html#put-your-stamp-on-it",
    "title": "18  Test drive R Markdown",
    "section": "18.5 Put your stamp on it",
    "text": "18.5 Put your stamp on it\nSelect everything but the YAML frontmatter and … delete it!\nWrite a single sentence.\nInsert an empty R chunk, via the “Chunk” menu in upper right of source editor or with the corresponding keyboard shortcut.\n```{r, eval=TRUE}`r ''`\n## insert your brilliant WORKING code here\n```\nInsert 1 to 3 lines of functioning code that’s relevant to you or the project where you’re experimenting. “Walk through” and run those lines using the “Run” button or the corresponding keyboard shortcut. You MUST make sure your code actually works!\nSatisfied? Save!\nYou might want to commit here.\nNow render the whole document via “Knit HTML.” Voilà!\nYou might want to commit here. And push. And admire your evolving progress on GitHub.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#develop-your-report",
    "href": "usage-rmd-and-github.html#develop-your-report",
    "title": "18  Test drive R Markdown",
    "section": "18.6 Develop your report",
    "text": "18.6 Develop your report\nIn this incremental manner, develop your report. Add code to this chunk. Refine it. Add new chunks. Go wild! But keep running the code “manually” to make sure it actually works.\nIf the code doesn’t work with you babysitting it, I can guarantee you it will fail, in a more spectacular and cryptic way, when run at arms-length via “Knit HTML” or rmarkdown::render().\nClean out your workspace and restart R and re-run everything periodically, if things get weird. There are lots of chunk menu items and keyboard shortcuts to accelerate this workflow. Render the whole document often to catch errors when they’re easy to pinpoint and fix. Save often and commit every time you reach a point that you’d like as a “fall back” position.\nYou’ll develop your own mojo soon, but this should give you your first successful R Markdown experience.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#publish-your-report",
    "href": "usage-rmd-and-github.html#publish-your-report",
    "title": "18  Test drive R Markdown",
    "section": "18.7 Publish your report",
    "text": "18.7 Publish your report\nIf you’ve been making HTML, you can put that up on the web somewhere, email it to your collaborator, whatever.\nNo matter what, technically you can publish this report merely by pushing a rendered version to GitHub. However, certain practices make this effort at publishing more satisfying for your audience.\nHere are two behaviors I find very frustrating:\n\n“Here is my code. Behold.” This is when someone only pushes their source, i.e. R Markdown or R code, AND they really want other people to appreciate their “product”. The implicit assumption is that the target audience will download all of the data and code and execute it locally.\n“Here is my HTML. Behold.” This is when someone accepts the default HTML-only output. Remember, HTML files on GitHub are not readable by humans. Therefore, the implicit assumption is that the target audience will download the repo and point their browser at this HTML file, in order to see it. HTML on GitHub? It’s not readable by humans.\n\nSometimes it’s just very unrealistic to expect your audience to take the extra steps described above. Often, with a very small change on your end, you can create an artefact on GitHub that your target audience can immediately appreciate.\nCreating, committing, and pushing markdown (i.e., .md files) is a very functional, lighweight publishing strategy. Use output: github_document or, if output is html_document, add keep_md: true. In both cases, it is critical to also commit and push everything inside foo_files, i.e. any figures that have been created. Now people can visit and consume your work on GitHub, like any other webpage.\nThis is (sort of) another example of a generally worthy principle, which is keeping things machine- and human-readable, whenever possible. By making foo.Rmd available, others can see and run your actual code. By also sharing foo.md and/or foo.html, others can casually browse your end product and decide if they want to obtain and run the code.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#html-on-github",
    "href": "usage-rmd-and-github.html#html-on-github",
    "title": "18  Test drive R Markdown",
    "section": "18.8 HTML on GitHub",
    "text": "18.8 HTML on GitHub\nHTML files, such as foo.html, are not immediately useful on GitHub (though your local versions are easily viewable). Visit one and you’ll see the raw HTML. Yuck. But there are ways to get a preview: such as http://htmlpreview.github.io. Expect much pain with HTML files inside private repos (hence the recommendations above to emphasize markdown). When it becomes vital for the whole world to see proper HTML in its full glory, it’s time to use a more sophisticated web publishing strategy.\nI have more general ideas about how to make a GitHub repo function as a website.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-rmd-and-github.html#sec-rmd-troubleshooting",
    "href": "usage-rmd-and-github.html#sec-rmd-troubleshooting",
    "title": "18  Test drive R Markdown",
    "section": "18.9 Troubleshooting",
    "text": "18.9 Troubleshooting\nMake sure RStudio and the rmarkdown package (and its dependencies) are up-to-date. In case of catastrophic failure to render the boilerplate R Markdown document, consider that your software may be too old. Details on the system used to render this document and how to check your setup:\n\nrmarkdown version r packageVersion(\"rmarkdown\"). Use packageVersion(\"rmarkdown\") to check yours.\nr R.version.string. Use R.version.string to check yours.\nRStudio IDE 2021.9.0.341 (“Ghost Orchid” Preview). Use RStudio &gt; About RStudio or RStudio.Version()$version to check yours.\n\nGet rid of your .Rprofile, at least temporarily. I have found that a “mature” .Rprofile that has accumulated haphazardly over the years can cause trouble. Specifically, if you’ve got anything in there relating to knitr, markdown, rmarkdown, or RStudio itself, it may be preventing the installation or usage of the most recent goodies. Comment the whole file out or rename it to something else and relaunch or even re-install RStudio.\n“I have ignored your advice and dumped a bunch of code in at once. Now my Rmd does not render.” If you can’t figure out what’s wrong by reading the error messages, pick one:\n\nBack out of these changes, get back to a functional state (possibly with no code), and restore them gradually. Run your code interactively to make sure it works. Render the entire document frequently. Commit after each successful addition! When you re-introduce the broken code, now it will be part of a small change and the root problem will be much easier to pinpoint and fix.\nTell knitr to soldier on, even in the presence of errors. Some problems are easier to diagnose if you can execute specific R statements during rendering and leave more evidence behind for forensic examination.\n\nInsert this chunk near the top of your .Rmd document:\n```{r setup, include = FALSE, cache = FALSE}`r ''`\nknitr::opts_chunk$set(error = TRUE)\n```\nIf it’s undesirable to globally accept errors, you can still specify error = TRUE for a specific chunk like so:\n```{r wing-and-a-prayer, error = TRUE}`r ''`\n## your sketchy code goes here ;)\n```\n\nAdapt the “git bisect” strategy:\n\nPut knitr::knit_exit() somewhere early in your .Rmd document, either in inline R code or in a chunk. Keep moving it earlier until things work. Now move it down in the document. Eventually you’ll be able to narrow down the location of your broken code well enough to find the line(s) and fix it.\n\n\nCheck your working directory. It’s going to break your heart as you learn how often your mistakes are really mundane and basic. Ask me how I know. When things go wrong consider:\n\nWhat is the working directory?\nIs that file I want to read/write actually where I think it is?\n\nDrop these commands into R chunks to check the above:\n\ngetwd() will display working directory at run time. If you monkeyed around with working directory with, e.g., the mouse, maybe it’s set to one place for your interactive development and another when “Knit HTML” takes over?\nlist.files() will list the files in working directory. Is the file you want even there?\n\nDon’t try to change working directory within an R Markdown document. Just don’t. See knitr FAQ #5. That is all.\nDon’t be in a hurry to create a complicated sub-directory structure. RStudio/knitr/rmarkdown (which bring you the “Knit HTML” button) are rather opinionated about the working directory being set to the .Rmd file’s location and about all files living together in one big happy directory. This can all be worked around. For example, I recommend the here package for building file paths, once you require sub-directories. But don’t do this until you really need it.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Test drive R Markdown</span>"
    ]
  },
  {
    "objectID": "usage-r-script-and-github.html",
    "href": "usage-r-script-and-github.html",
    "title": "19  Render an R script",
    "section": "",
    "text": "19.1 Morph R Markdown into a renderable R script\nGet yourself a working R Markdown file, such as the one you made in your Rmd test drive. Or use the boilerplate .Rmd document RStudio makes with File &gt; New File &gt; R Markdown ….\nSave the file as foo.R, as opposed to foo.Rmd. Yes, for a brief moment, you will have R Markdown saved as an R script, but that won’t be true for long.\nTransform the R markdown to R:\nRender the R script through one of these methods:\nYou’ll get a markdown and/or HTML report, just as with R Markdown.\nIf you’re having trouble making all the necessary changes and you’re frustrated, see below for an example you can copy and paste.\nAll the workflow tips from the Rmd test drive apply here: when you script an analysis, render it to markdown, commit the .R, the .md, any associated figures, and push to GitHub. Collaborators can see your code, but also browse around the results without having to download and execute the code. This makes the current state of your analysis accessible to someone who does not even run R or who wants to take a quick look at things from a cell phone or while on vacation.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Render an R script</span>"
    ]
  },
  {
    "objectID": "usage-r-script-and-github.html#morph-r-markdown-into-a-renderable-r-script",
    "href": "usage-r-script-and-github.html#morph-r-markdown-into-a-renderable-r-script",
    "title": "19  Render an R script",
    "section": "",
    "text": "Anything that’s not R code? Like the YAML and the prose? Protect it with roxygen-style comments: start each line with #'.\n\nAnything that is R code? Let it exist “as is” as top-level code. That means you’ll need to change the syntax of R chunk headers like so:\nBefore: ```{r setup, include = FALSE}\nAfter: #+ r setup, include = FALSE\nReplace the leading backticks and opening curly brace with #+.\nDelete the trailing curly brace.\nDelete the 3 backticks that end each chunk.\n\n\n\n\nClick on the “notebook” icon in RStudio to “Compile Report”.\nIn RStudio, do File &gt; Knit Document.\nIn R, do rmarkdown::render(\"foo.R\").",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Render an R script</span>"
    ]
  },
  {
    "objectID": "usage-r-script-and-github.html#write-a-render-ready-r-script",
    "href": "usage-r-script-and-github.html#write-a-render-ready-r-script",
    "title": "19  Render an R script",
    "section": "\n19.2 Write a render-ready R script",
    "text": "19.2 Write a render-ready R script\nInstead of morphing an R Markdown file, let’s create a render-ready R script directly.\nCreate a new R script and copy/paste this code into it.\n\n#' Here's some prose in a very special comment. Let's summarize the built-in\n#' dataset `VADeaths`.\n# here is a regular code comment, that will remain as such\nsummary(VADeaths)\n\n#' Here's some more prose. I can use usual markdown syntax to make things\n#' **bold** or *italics*. Let's use an example from the `dotchart()` help to\n#' make a Cleveland dot plot from the `VADeaths` data. I even bother to name\n#' this chunk, so the resulting PNG has a decent name.\n#+ dotchart\ndotchart(VADeaths, main = \"Death Rates in Virginia - 1940\")\n\nRender the R script through one of these methods:\n\nClick on the “notebook” icon in RStudio to “Compile Report”.\nIn RStudio, do File &gt; Knit Document.\nIn R, do rmarkdown::render(\"YOURSCRIPT.R\").\n\nRevel in your attractive looking report with almost zero effort! Seriously, all you had to do was think about when to use special comments #' in order to promote that to nicely rendered text.\nDrawing on the workflow tips in Rmd test drive, let’s add some YAML frontmatter, properly commented with #', and request github_document as the output format. Here’s the whole script again:\n\n#' ---\n#' title: \"R scripts can be rendered!\"\n#' output: github_document\n#' ---\n#'\n#' Here's some prose in a very special comment. Let's summarize the built-in\n#' dataset `VADeaths`.\n# here is a regular code comment, that will remain as such\nsummary(VADeaths)\n\n#' Here's some more prose. I can use usual markdown syntax to make things\n#' **bold** or *italics*. Let's use an example from the `dotchart()` help to\n#' make a Cleveland dot plot from the `VADeaths` data. I even bother to name\n#' this chunk, so the resulting PNG has a decent name.\n#+ dotchart\ndotchart(VADeaths, main = \"Death Rates in Virginia - 1940\")\n\nBehind the scenes here we have used rmarkdown::render() to render this script and you can go visit it on GitHub.",
    "crumbs": [
      "Early GitHub Wins",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Render an R script</span>"
    ]
  },
  {
    "objectID": "git-intro.html",
    "href": "git-intro.html",
    "title": "Some Git basics",
    "section": "",
    "text": "We’ve told you shockingly little about Git so far! This is by design.\nWe find that actual usage, in the course of your work, is the most effective way to build up a useful mental model for Git. In live workshops, we strive to introduce the most important basic ideas in the context of our guided activities. Self-learners can achieve the same by working through the “batteries included” guides earlier in the previous sections.\nHowever, building on this early success, now is the perfect time to explicitly define some Git vocabulary. We also want to help you link Git concepts to data science tasks and projects.\nThis part collects anything we’ve written about core Git concepts. It is a work in progress and is conceived as a complement to the many excellent external resources for Git, which we have no desire to re-invent.",
    "crumbs": [
      "Git fundamentals",
      "Some Git basics"
    ]
  },
  {
    "objectID": "git-basics.html",
    "href": "git-basics.html",
    "title": "20  Repo, commit, diff, tag",
    "section": "",
    "text": "20.1 Repos or repositories\nGit is a version control system whose original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository or repo – in a highly structured way. Historically, these files would have consisted of source code and the instructions for how to build an application from its source.\nGit has been re-purposed by the data science community (Ram 2013; Bartlett 2016; Perez-Riverol et al. 2016). We use it to manage the motley collection of files that make up typical data analytical projects, which consist of data, figures, reports, and, yes, some source code.\nFor new or existing projects, we recommend that you:\nThis setup happens once per project and can happen at project inception or at any later point. Chances are your existing projects each already live in a dedicated directory. Making such a directory an RStudio Project and Git repository boils down to allowing those applications to leave notes for themselves in hidden files or directories. The project is still a regular directory on your computer, that you can locate, name, move, and generally interact with as you wish. You don’t have to handle it with special gloves!\nThe daily workflow is probably not dramatically different from what you do currently. You work in the usual way, writing R scripts or authoring reports in LaTeX or R Markdown. But instead of only saving individual files, periodically you make a commit, which takes a snapshot of all the files in the entire project. If you have ever versioned a file by adding your initials or the date, you have effectively made a commit, albeit only for a single file. It is a version that is significant to you and that you might want to inspect or revert to later. Periodically, you push commits to GitHub. This is like sharing a document with colleagues on DropBox or sending it out as an email attachment. By pushing to GitHub, you make your work and all your accumulated progress accessible to others.\nThis is a moderate change to your normal, daily workflow. It feels weird at first, but quickly becomes second nature. In STAT 545 students are required to submit all coursework via GitHub, starting in week one. Most have never seen Git before and do not identify as programmers. It is a major topic in class and office hours for the first two weeks. Then we practically never discuss it again.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Repo, commit, diff, tag</span>"
    ]
  },
  {
    "objectID": "git-basics.html#repos-or-repositories",
    "href": "git-basics.html#repos-or-repositories",
    "title": "20  Repo, commit, diff, tag",
    "section": "",
    "text": "Dedicate a local directory or folder to it.\nMake it an RStudio Project. Optional but recommended; obviously only applies to projects involving R and users of RStudio.\nMake it a Git repository.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Repo, commit, diff, tag</span>"
    ]
  },
  {
    "objectID": "git-basics.html#commits-diffs-and-tags",
    "href": "git-basics.html#commits-diffs-and-tags",
    "title": "20  Repo, commit, diff, tag",
    "section": "20.2 Commits, diffs, and tags",
    "text": "20.2 Commits, diffs, and tags\nWe now connect the fundamental concepts of Git to the data science workflow:\n\nrepository\ncommit\ndiff\n\nRecall that a repository or repo is just a directory of files that Git manages holistically. A commit functions like a snapshot of all the files in the repo, at a specific moment. Under the hood, that is not exactly how Git implements things. Although mental models don’t have to be accurate in order to be useful, in this case it helps to align the two.\n\n\n\n\n\n\nFigure 20.1: Partial commit history for our iris example, highlighting diffs, commit messages, SHAs, and tags\n\n\n\nFigure 20.1 is a look at a fictional analysis of the iris data, focusing on the evolution of a script, iris.R. Consider version A of this file and a modified version, version B. Assume that version A was part of one Git commit and version B was part of the next commit. The set of differences between A and B is called a “diff” and Git users contemplate diffs a lot. Diff inspection is how you re-explain to yourself how version A differs from version B. Diff inspection is not limited to adjacent commits. You can inspect the diffs between any two commits.\nIn fact, Git’s notion of any specific version of iris.R is as an accumulation of diffs. If you go back far enough, you find the commit where the file was created in the first place. Every later version is stored by Git as that initial version, plus all the intervening diffs in the history that affect the file. We’ll set these internal details aside now, but understanding the importance of these deltas will make Git’s operations less baffling in the long run.\nSo, by looking at diffs, it’s easy to see how two snapshots differ, but what about the why?\nEvery time you make a commit you must also write a short commit message. Ideally, this conveys the motivation for the change. Remember, the diff will show the content. When you revisit a project after a break or need to digest recent changes made by a colleague, looking at the history, by reading commit messages and skimming through diffs, is an extremely efficient way to get up to speed. Figure 20.1 shows the messages associated with the last three commits.\nEvery commit needs some sort of nickname, so you can identify it. Git does this automatically, assigning each commit what is called a SHA, a seemingly random string of 40 letters and numbers (it is not, in fact, random but is a SHA-1 checksum hash of the commit). Though you will be exposed to these, you don’t have to handle them directly very often and, when you do, usually the first 7 characters suffice. The commit messages in Figure 20.1 are prefixed by such truncated SHAs. You can also designate certain snapshots as special with a tag, which is a name of your choosing. In a software project, it is typical to tag a release with its version, e.g., “v1.0.3”. For a manuscript or analytical project, you might tag the version submitted to a journal or transmitted to external collaborators. Figure 20.1 shows a tag, “draft-01”, associated with the last commit.\n\n\n\n\nBartlett, Alice. 2016. “Git for Humans.” Financial Times, London; Talk at UX Brighton. https://speakerdeck.com/alicebartlett/git-for-humans.\n\n\nPerez-Riverol, Yasset, Laurent Gatto, Rui Wang, Timo Sachsenberg, Julian Uszkoreit, Felipe da Veiga Leprevost, Christian Fufezan, et al. 2016. “Ten Simple Rules for Taking Advantage of Git and GitHub.” PLOS Computational Biology 12 (7): 1–11. https://doi.org/10.1371/journal.pcbi.1004947.\n\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility and Increased Transparency in Science.” Source Code for Biology and Medicine 8 (1): 7. https://doi.org/10.1186/1751-0473-8-7.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Repo, commit, diff, tag</span>"
    ]
  },
  {
    "objectID": "git-commands.html",
    "href": "git-commands.html",
    "title": "21  Git commands",
    "section": "",
    "text": "A collection of some of the Git commands that have been largely going on under the hood. We’ve emphasized early workflows that are possible in RStudio. But all of this and much more can be done from the command line. This list is here mostly so we can consult it during live workshops if needed.\nUnless you use the GitHub API, most of the GitHub bits really have to be done from the browser.\nNew local git repo from a repo on GitHub:\ngit clone https://github.com/jennybc/happy-git-with-r.git\nCheck the remote was cloned successfully:\ngit remote --verbose\nStage local changes, commit:\ngit add foo.txt\ngit commit --message \"A commit message\"\nCheck on the state of the Git world:\ngit status\ngit log\ngit log --oneline\nCompare versions:\ngit diff\nAdd a remote to existing local repo:\ngit remote add origin https://github.com/jennybc/happy-git-with-r\ngit remote --verbose\ngit remote show origin\nPush local main to GitHub main and have local main track main on GitHub:\ngit push --set-upstream origin main\n# shorter form\ngit push -u origin main\n# you only need to set upstream tracking once!\nRegular push:\ngit push \n# the above usually implies (and certainly does in our tutorial)\ngit push origin main\n# git push [remote-name] [branch-name]\nPull commits from GitHub:\ngit pull\nPull commits and don’t let it put you in a merge conflict pickle:\ngit pull --ff-only\nFetch commits\ngit fetch\nSwitch to a branch\ngit checkout [branch-name]\nChecking remote and branch tracking\ngit remote -v\ngit remote show origin\ngit branch -vv",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Git commands</span>"
    ]
  },
  {
    "objectID": "git-branches.html",
    "href": "git-branches.html",
    "title": "22  Branches",
    "section": "",
    "text": "22.1 Create a new branch\nYou can create a new branch with git branch, then checkout the branch with git checkout. To distinguish it from the main stream of development, presumably on main, we’ll call this a “feature branch”.\nYou can also use the shortcut git checkout -b issue-5 to create and checkout the branch all at once.\nOnce you have switched to a branch, you can commit to it as usual.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Branches</span>"
    ]
  },
  {
    "objectID": "git-branches.html#create-a-new-branch",
    "href": "git-branches.html#create-a-new-branch",
    "title": "22  Branches",
    "section": "",
    "text": "git branch issue-5\ngit checkout issue-5",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Branches</span>"
    ]
  },
  {
    "objectID": "git-branches.html#switching-branches",
    "href": "git-branches.html#switching-branches",
    "title": "22  Branches",
    "section": "22.2 Switching branches",
    "text": "22.2 Switching branches\nYou use git checkout to switch between branches.\nBut what do you do if you are working on a branch and need to switch, but the work on the current branch is not complete? One option is the Git stash, but generally a better option is to safeguard the current state with a temporary commit. Here I use “WIP” as the commit message to indicate work in progress.\ngit commit --all -m \"WIP\"\ngit checkout main\nThen when you come back to the branch and continue your work, you need to undo the temporary commit by resetting your state. Specifically, we want a mixed reset. This is “working directory safe”, i.e. it does not affect the state of any files. But it does peel off the temporary WIP commit. Below, the reference HEAD^ says to roll the commit state back to the parent of the current commit (HEAD).\ngit checkout issue-5\ngit reset HEAD^\nIf this is difficult to remember, or to roll the commit state back to a different previous state, the reference can also be given as the SHA of a specific commit, which you can see via git log. This is where I think a graphical Git client can be invaluable, as you can generally right click on the target commit, then select the desired type of reset (e.g., soft, mixed, or hard). This is exactly the type of intermediate-to-advanced Git usage that often feels more approachable in a graphical client.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Branches</span>"
    ]
  },
  {
    "objectID": "git-branches.html#merging-a-branch",
    "href": "git-branches.html#merging-a-branch",
    "title": "22  Branches",
    "section": "22.3 Merging a branch",
    "text": "22.3 Merging a branch\nOnce you have done your work and committed it to the feature branch, you can switch back to main and merge the feature branch.\ngit checkout main\ngit merge issue-5",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Branches</span>"
    ]
  },
  {
    "objectID": "git-branches.html#dealing-with-conflicts",
    "href": "git-branches.html#dealing-with-conflicts",
    "title": "22  Branches",
    "section": "22.4 Dealing with conflicts",
    "text": "22.4 Dealing with conflicts\nMost of the time, the merge will go smoothly. However if both the branches you are merging changed the same part of the same file you will get a merge conflict.\ngit merge issue-5\n# Auto-merging index.html\n# CONFLICT (content): Merge conflict in index.html\n# Automatic merge failed; fix conflicts and then commit the result.\nThe first thing to do is NOT PANIC. Merge conflicts are not the end of the world and most are relatively small and straightforward to resolve.\nThe first step to solving a merge conflict is determining which files are in conflict, which you can do with git status:\ngit status\n# On branch main\n# You have unmerged paths.\n#   (fix conflicts and run \"git commit\")\n# \n# Unmerged paths:\n#   (use \"git add &lt;file&gt;...\" to mark resolution)\n# \n#     both modified:      index.html\n# \n# no changes added to commit (use \"git add\" and/or \"git commit -a\")\nSo this shows only index.html is unmerged and needs to be resolved. We can then open the file to see what lines are in conflict.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=\"footer\"&gt;contact : email.support@github.com&lt;/div&gt;\n=======\n&lt;div id=\"footer\"&gt;\n please contact us at support@github.com\n&lt;/div&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue-5:index.html\nIn this conflict, the lines between &lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html and ====== are the content from the branch you are currently on. The lines between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; issue-5:index.html are from the feature branch we are merging.\nTo resolve the conflict, edit this section until it reflects the state you want in the merged result. Pick one version or the other or create a hybrid. Also remove the conflict markers &lt;&lt;&lt;&lt;&lt;&lt;, ====== and &gt;&gt;&gt;&gt;&gt;&gt;.\n&lt;div id=\"footer\"&gt;\nplease contact us at email.support@github.com\n&lt;/div&gt;\nNow run git add index.html and git commit to finalize the merge. CONFLICTS RESOLVED.\n\n22.4.1 Bailing out\nIf, during the merge, you get confused about the state of things or make a mistake, use git merge --abort to abort the merge and go back to the state prior to running git merge. Then you can try to complete the merge again.\nGit Basic Branching and Merging:\nhttps://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Branches</span>"
    ]
  },
  {
    "objectID": "git-remotes.html",
    "href": "git-remotes.html",
    "title": "23  Remotes",
    "section": "",
    "text": "23.1 Listing what remotes exist\ngit remote lists the names of available remotes, but usually it is more useful to see what URLs each note corresponds to (with -v).\ngit remote -v\n\norigin  https://github.com/davidrsch/hg-gh4res (fetch)\norigin  https://github.com/davidrsch/hg-gh4res (push)",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-remotes.html#adding-a-new-remote",
    "href": "git-remotes.html#adding-a-new-remote",
    "title": "23  Remotes",
    "section": "\n23.2 Adding a new remote",
    "text": "23.2 Adding a new remote\ngit clone automatically adds a new remote, so often you do not need to do this manually initially. However, after the initial clone, it is often useful to add additional remotes.\nUse git remote add to add a new remote:\ngit remote add happygit https://github.com/jennybc/happy-git-with-r.git\nNote: when you add a remote you give it a nickname (here happygit), which you can use in git commands in place of the entire URL.\ngit fetch happygit\nSidebar on nicknames: there is a strong convention to use origin as the nickname of your main remote. At this point, it is common for the main remote of a repo to be hosted on GitHub (or GitLab or Bitbucket). It is tempting to use a more descriptive nickname (such as github), but you might find that following convention is worth it. It makes your setup easier for others to understand and for you to transfer information that you read in documentation, on Stack Overflow, or in blogs.\nA common reason to add a second remote is when you have done a “fork and clone” of a repo and your personal copy (your fork) is set up as the origin remote. Eventually you will want to pull changes from the original repository. It is common to use upstream as the nickname for this remote.\ngit remote add upstream https://github.com/TRUE_OWNER/REPO.git",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-remotes.html#fetching-data-from-remotes",
    "href": "git-remotes.html#fetching-data-from-remotes",
    "title": "23  Remotes",
    "section": "\n23.3 Fetching data from remotes",
    "text": "23.3 Fetching data from remotes\nTo get new data from a remote use git fetch &lt;remote_name&gt;. This retrieves the data locally, but importantly it does not change the state of your local files in any way. To incorporate the data into your repository, you need to merge or rebase your project with the remote project.\n# Fetch the data\ngit fetch happygit\n\n# Now merge it with our local main\ngit merge happygit/main main\n\n# git pull is a shortcut which does the above in one command\ngit pull happygit main\nFor more detail on git pull workflows, see Chapter 29.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-remotes.html#pushing-to-remotes",
    "href": "git-remotes.html#pushing-to-remotes",
    "title": "23  Remotes",
    "section": "\n23.4 Pushing to remotes",
    "text": "23.4 Pushing to remotes\nUse git push &lt;remote&gt; &lt;branch&gt; to push your local changes to the &lt;branch&gt; branch on the &lt;remote&gt; remote.\n# push my local changes to the origin remote's main branch\ngit push origin main\n\n# push my local changes to the happygit remote's test branch\ngit push happygit test",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-remotes.html#renaming-and-changing-remotes",
    "href": "git-remotes.html#renaming-and-changing-remotes",
    "title": "23  Remotes",
    "section": "\n23.5 Renaming and changing remotes",
    "text": "23.5 Renaming and changing remotes\ngit remote rename can be used to rename a remote:\ngit remote rename happygit hg\ngit remote set-url can be used to change the URL for a remote. This is sometimes useful if you initially set up a remote using HTTPS, but now want to use SSH instead (or vice versa).\ngit remote set-url happygit git@github.com:jennybc/happy-git-with-r.git\nOne fairly common workflow is you initially cloned a repository on GitHub locally (without forking it), but now want to create your own fork and push changes to it. As described earlier, it is common to call the source repository upstream and to call your fork origin. So, in this case, you need to first rename the existing remote (from origin to upstream). Then add your fork as a new remote, with the name origin.\ngit remote rename origin upstream\ngit remote add origin git@github.com:jimhester/happy-git-with-r.git",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-remotes.html#upstream-tracking-branches",
    "href": "git-remotes.html#upstream-tracking-branches",
    "title": "23  Remotes",
    "section": "\n23.6 Upstream tracking branches",
    "text": "23.6 Upstream tracking branches\nIt is possible to set the branch on the remote each of your local remotes corresponds to. git clone sets this up automatically, so for your own main branch this is not something you will run into. However by default if you create a new branch and try to push to it you will see something like this:\ngit checkout -b mybranch\ngit push\n# fatal: The current branch foo has no upstream branch.\n# To push the current branch and set the remote as upstream, use\n#\n#     git push --set-upstream origin foo\nYou can do as the error message says and explicitly set the upstream branch with --set-upstream. However I would recommend instead changing the default behavior of push to automatically set the upstream branch to the branch with the same name on the remote.\nYou can do this by changing the git push.default option to current.\ngit config --global push.default current\nSee also Working with Remotes:\nhttps://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Remotes</span>"
    ]
  },
  {
    "objectID": "git-refs.html",
    "href": "git-refs.html",
    "title": "24  Refs",
    "section": "",
    "text": "24.1 Useful refs\nHere are some of the most useful refs:\nIf you’d like to make all of this more concrete, you can use git rev-parse in the shell to witness how refs resolve to concrete SHAs. Here’s the general pattern:\nHere are some examples executed in the Happy Git repo:\nNotice that HEAD and main resolve to the same SHA, since the main branch was checked out at the time. testing-something is the name of a branch that happened to be lying around.\nThese refs can be used in all sorts of Git operations, such as git diff, git reset, and git checkout:",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Refs</span>"
    ]
  },
  {
    "objectID": "git-refs.html#useful-refs",
    "href": "git-refs.html#useful-refs",
    "title": "24  Refs",
    "section": "",
    "text": "A branch name. Example: main, wild-experiment. When you refer to the main branch, that resolves to the SHA of the tip of the main branch. Think of a branch ref as a sliding ref that evolves as the branch does.\n\n\n\n\n\n\n\nHEAD. This (almost always) resolves to the tip of the branch that is currently checked out.1 You can think of HEAD as a ref that points to the tip of the current branch, which itself is a ref, that points to a specific SHA. There are two layers of indirection. This is also called a symbolic ref.\n\n\n\n\n\n\n\nA tag. Example: v1.4.2. Tags differ from branch refs and the HEAD ref in that they tend to be much more static. Tags aren’t sliding by nature, although it is possible to reposition a tag to point at a new SHA, if you make an explicit effort. The most common use of a tag is to provide a nice label for a specific SHA.\n\n\n\n\n\n\n\ngit rev-parse YOUR_REF_GOES_HERE\n\n~/rrr/happy-git-with-r % git rev-parse HEAD\n631fee855db49d87f6c2a2cab474e89c11322bf4\n\n~/rrr/happy-git-with-r % git rev-parse main\n631fee855db49d87f6c2a2cab474e89c11322bf4\n\n~/rrr/happy-git-with-r % git rev-parse testing-something                       \n1eeb91d177b7cb5f9a0b29ebee3e6c0c8ff98f88\n\n\ngit diff main testing-something\n\ngit reset testing-something -- README.md\n\ngit checkout -b my-new-branch main",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Refs</span>"
    ]
  },
  {
    "objectID": "git-refs.html#relative-refs",
    "href": "git-refs.html#relative-refs",
    "title": "24  Refs",
    "section": "24.2 Relative refs",
    "text": "24.2 Relative refs\nThere are also modifiers that help you specify a commit relative to a ref, e.g. “the commit just before this one”.\nHEAD~1 refers to the commit just before HEAD. HEAD^ is another way to say exactly the same thing.\n\n\n\n\n\nHere are some examples executed in the Happy Git repo:\n~/rrr/happy-git-with-r % git rev-parse HEAD~1\n5dacec4950a3746310bb30704417a792302b044a\n\n~/rrr/happy-git-with-r % git rev-parse HEAD^\n5dacec4950a3746310bb30704417a792302b044a\nNotice that HEAD~1 and HEAD^ resolve to the same SHA.\nBoth of these patterns generalize. HEAD~3 and HEAD^^^ are valid and equivalent refs.\nI must admit that I am not a big fan of these relative ref shortcuts and especially not when reaching back more than one commit. I worry that I have some sort of off-by-one error in my understanding and I’ll end up targetting the wrong commit.\nTools like GitKraken and GitHub make it extremely easy to copy specific SHAs to your clipboard. So when I need a ref that’s not a simple branch name or tag, I almost always lean on user-friendly tools like GitKraken or GitHub to allow me to state my intent using the actual SHA of interest. I suspect that the relative ref shortcuts are most popular with folks who are exclusively using command line Git and are operating under different constraints. There’s actually a rich set of ways to specify a target commit that goes well beyond the ^ and ~ syntax shown here. You can learn more in the official Git documention about revision parameters.\nIn GitKraken, right or control click on the target commit to access a menu that includes “Copy commit sha”, among many other useful commands. If you’re using another Git client, there is probably a way to do this and it’s worth figuring that out.\n\n\n\n\n\nGitHub also makes it extremely easy to copy a SHA in many contexts. This screenshot shows just one example. Once you start looking for this feature, you’ll find it in many places on GitHub.",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Refs</span>"
    ]
  },
  {
    "objectID": "git-refs.html#footnotes",
    "href": "git-refs.html#footnotes",
    "title": "24  Refs",
    "section": "",
    "text": "When does HEAD not resolve to the SHA at the tip of some branch? When you are a detached HEAD state. Detached HEAD! That sounds bad, but it’s not intrinsically good or bad. It IS bad, though, to be in a detached HEAD state if you didn’t mean to be and you don’t understand the deal. You get into a detached HEAD state when you directly checkout a specific commit, as opposed to checking out or switching to a branch. In experienced hands, this can be a legit thing to do. But in the meantime, I recommend that you always visit a specific state in the history by checking out a branch, even if that means you need to create a temporary branch like holder or time-travel. To get out of the detached HEAD state, checkout some existing branch, with git checkout main or similar. Otherwise, the StackOverflow thread How do I fix a Git detached head? addresses many vexing detached HEAD scenarios.↩︎",
    "crumbs": [
      "Git fundamentals",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Refs</span>"
    ]
  },
  {
    "objectID": "remote-setups-intro.html",
    "href": "remote-setups-intro.html",
    "title": "Git remote setups",
    "section": "",
    "text": "The previous part ended with some basics about Git remotes, such as how to define or rename one. Recall that a Git remote is another copy of the repo, usually living elsewhere (hence the term “remote”), that you can pull changes from or push changes to. Remotes are the foundation for all collaborative Git work.\nBut knowing the mechanics of how to add or rename a remote does little good if you don’t know why or when to do it. Luckily, we have very strong opinions about how you should set up your remotes, all motivated by getting you prepared for smooth, happy collaborative work.\nIn this part we describe various remote setups that are common (for better or worse) and what they are good for (or what’s wrong with them and how to fix).",
    "crumbs": [
      "Remote setups",
      "Git remote setups"
    ]
  },
  {
    "objectID": "remote-setups-common.html",
    "href": "remote-setups-common.html",
    "title": "25  Common remote setups",
    "section": "",
    "text": "25.1 No GitHub\nAs a starting point, consider a local Git repo that is not yet connected to GitHub.\nThis is not very exciting, but sets the stage for what’s to come. We introduce the icon we use for a Git repo, which looks like a stack of coins or a barrel. This one is blue, which indicates you have write permission.\nHow to achieve:\nusethis describes this setup as “no_github”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#no-github",
    "href": "remote-setups-common.html#no-github",
    "title": "25  Common remote setups",
    "section": "",
    "text": "Command line Git: git init\nWith usethis, existing project: usethis::use_git()\nWith RStudio:\n\nExisting Project: Tools &gt; Version Control &gt; Project Setup, select Git as the version control system\nNew Project: Make sure “Create a Git repository” is selected",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#sec-ours-you",
    "href": "remote-setups-common.html#sec-ours-you",
    "title": "25  Common remote setups",
    "section": "25.2 Ours (more specifically, yours)",
    "text": "25.2 Ours (more specifically, yours)\nA common next step is to associate a local repo with a copy on GitHub, owned by you.\n\n\n\n\n\nA remote named origin is configured and you have permission to push to (and pull from) origin. (That’s why origin is colored blue and there are solid arrows going both directions.) The origin remote on GitHub is what we’ll call a source repo, meaning it is not a fork (i.e. copy) of anything else on GitHub. In this case, origin is also what we’ll call your primary repo, meaning it is the primary remote you interact with on GitHub (for this project).\nHow to achieve if the local repo exists first:\n\nDetailed instructions are in Existing project, GitHub last.\nWith usethis: usethis::use_github().\nCommand line Git or RStudio: You can’t complete this task fully from the command line or from RStudio:\n\nCreate a new GitHub repo in the browser, with the correct name, and capture its HTTPS or SSH URL.\nConfigure the repo as the origin remote.\nPush.\nEven now, the setup may not be ideal, because upstream tracking relationships are probably not setup, which means you may not be able to push and pull easily. You may need to explicitly configure an upstream tracking branch for one or more local branches. Next time you want to create a GitHub repo from a local repo, consider using usethis::use_github(), which completes all of this setup in one go.\n\n\nHow to achieve if the remote repo exists first:\n\nDetailed instructions are in New RStudio Project via git clone.\nWith usethis: usethis::create_from_github(\"OWNER/REPO\", fork = FALSE)\nCommand line: git clone &lt;URL&gt;, with the source repo’s HTTPS or SSH URL\nIn RStudio: Capture the source repo’s HTTPS or SSH URL and do File &gt; New Project &gt; Version Control &gt; Git.\n\nusethis describes this setup as “ours”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#sec-ours-them",
    "href": "remote-setups-common.html#sec-ours-them",
    "title": "25  Common remote setups",
    "section": "25.3 Ours",
    "text": "25.3 Ours\nHere is a variation on “ours” that is equivalent in practice.\n\n\n\n\n\nA remote named origin is configured and you can push to (and pull from) origin. As above, origin is a source repo, meaning it is not a fork (or copy) of anything else on GitHub. The origin remote is, however, not owned by you. Instead it’s owned by another GitHub user or organisation. origin is also your primary repo in this setup.\nHow does this happen?\n\nThe source repo is owned by an organisation and your role in this organisation confers enough power to create repos or to push to this repo.\nThe owner of the source repo has added you, specifically, as a collaborator to this specific repo.\n\nHow to achieve? The procedure is the same as for the previous “ours” setup. But remember to specify usethis::use_github(organisation = \"ORGNAME\") if you want to create a new repo under an organisation, instead of your personal account.\nusethis describes this setup as “ours”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#sec-theirs",
    "href": "remote-setups-common.html#sec-theirs",
    "title": "25  Common remote setups",
    "section": "25.4 Theirs",
    "text": "25.4 Theirs\nThis is a setup that many people get themselves into, when it’s not actually what they need. It’s not broken per se, but it’s limiting.\n\n\n\n\n\nYou cannot push to origin, which is both the source repo and your primary repo. (This is indicated by the orange color of origin and the greyed out, dashed “push” arrow.) origin is read-only for you.\nIf you are taking a repo for a quick test drive, this configuration is fine. But there is no way to get changes back into the source repo, since you cannot push to it and you haven’t created a fork, which is necessary for a pull request.\nHow does this happen?\n\nCloning the source repo, either via git clone &lt;URL&gt; (command line) or through a Git client, e.g. RStudio’s File &gt; New Project &gt; Version Control &gt; Git workflow.\nCalling usethis::create_from_github(\"OWNER/REPO\", fork = FALSE).\n\nusethis describes this setup as “theirs”.\nWhat if you do want to make a pull request? This means you should have done fork-and-clone instead of clone. If you’ve made no changes or they’re easy to save somewhere temporarily, just start over with a fork-and-clone workflow (fully explained in Chapter 31) and re-introduce your changes. It is also possible to preserve your work in a local branch, fork the source repo, re-configure your remotes, re-sync up with the source repo, and get back on track. But this is much easier to goof up. And remember to fork and clone (not just clone) in the future!",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#sec-fork-them",
    "href": "remote-setups-common.html#sec-fork-them",
    "title": "25  Common remote setups",
    "section": "25.5 Fork (of theirs)",
    "text": "25.5 Fork (of theirs)\nThis is an ideal setup if you want to make a pull request and generally follow the development of a source repo owned by someone else.\n\n\n\n\n\nThis shows a successful “fork-and-clone”. Your local repo can pull changes from the source repo, which is configured as upstream, which you cannot push to (but you can pull from). You have a fork of the source repo (a very special copy, on GitHub) and it is configured as origin. origin is your primary repo. You can push to and pull from origin. You can make a pull request back to the source repo via your fork.\nusethis describes this setup as “fork”.\nHow to achieve:\n\nDetailed instructions are given in Fork and clone.\nWith usethis: usethis::create_from_github(\"OWNER/REPO\", fork = TRUE)\nCommand line Git or RStudio: You can’t complete this task fully from the command line or RStudio:\n\nFork the source repo in the browser, capture the HTTPS or SSH URL of your fork, then use git clone &lt;FORK_URL&gt; (command line) or RStudio’s File &gt; New Project &gt; Version Control &gt; Git workflow. But, wait, you’re not done! If you stop here, you will have the incomplete setup we refer to as “fork (salvageable)”, below.\nYou still need to add the source repo as the upstream remote. Capture the HTTPS or SSH URL of the source repo. At the command line, do git   remote add upstream &lt;SOURCE_URL&gt; or click RStudio’s New Branch button, which brings up a window where you can add the upstream remote.\nEven then, the setup may not be ideal, because your local default branch is probably tracking origin, not upstream, which is preferable for a fork. usethis::create_from_github() completes all of this setup in one go.\nThese last two steps are described in Finish the fork and clone setup.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#fork-of-ours",
    "href": "remote-setups-common.html#fork-of-ours",
    "title": "25  Common remote setups",
    "section": "25.6 Fork (of ours)",
    "text": "25.6 Fork (of ours)\nThis is a less common variation on the fork setup.\n\n\n\n\n\nIn this case, you have permission to push to the source repo, but you elect to create a personal fork anyway. Certain projects favor this approach and it offers maximum development flexibility for advanced users. However, most users are better served by the simpler “ours” setup in this case.\nHow to achieve:\n\nIn general, it’s the same as the regular fork setup above.\nWith usethis, make sure to explicitly specify fork = TRUE, i.e. do usethis::create_from_github(\"OWNER/REPO\", fork = TRUE).\n\nusethis describes this setup as “fork”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-common.html#sec-fork_upstream_is_not_origin_parent",
    "href": "remote-setups-common.html#sec-fork_upstream_is_not_origin_parent",
    "title": "25  Common remote setups",
    "section": "25.7 Fork (salvageable)",
    "text": "25.7 Fork (salvageable)\nHere is one last fork setup that’s sub-optimal, but it can be salvaged.\n{fig-align=“center” fig-alt = “Setup described as ‘fork_upstream_is_not_origin_parent’” width=“60%”}\nThis is what happens when you do fork-and-clone and you only do fork-and-clone. What’s missing is a connection back to the source repo.\nHow does this happen?\n\nCloning your own fork, either via git clone in the shell or through a Git client, such as RStudio. And then stopping here.\n\nIf you only plan to make one pull request, this setup is fine. When the exchange is done, delete your local repo and your fork and move on with your life. You can always re-fork in the future. But if your pull request stays open for a while or if you plan to make repeated contributions, you’ll need to pull ongoing developments in the source repo into your local copy.\nYou can convert this into the ideal fork setup like so:\n\nDetailed instructions are in Finish the fork and clone setup.\nAdd the source repo as the upstream remote.\nSet upstream/main as the upstream tracking branch for local main (substitute whatever your default branch is called).\n\nNext time you do fork-and-clone, consider using usethis::create_from_github(fork = TRUE) instead, which completes all of this setup in one go.\nusethis describes this setup as “fork_upstream_is_not_origin_parent”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-equivocal.html",
    "href": "remote-setups-equivocal.html",
    "title": "26  Equivocal remote setups",
    "section": "",
    "text": "26.1 Maybe “ours” or “theirs”\nWhen we detect just one GitHub remote, but we can’t verify the info above, usethis describes the setup as “maybe_ours_or_theirs”.\n{fig-align=“center” fig-alt=“Setup described as ‘maybe_ours_or_theirs’” width = “60%”}\nOnce a PAT is available, this setup can be identified as being “ours” (belonging to you), “ours” (but belonging to someone else), or “theirs”.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Equivocal remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-equivocal.html#maybe-fork",
    "href": "remote-setups-equivocal.html#maybe-fork",
    "title": "26  Equivocal remote setups",
    "section": "26.2 Maybe fork",
    "text": "26.2 Maybe fork\nWhen we detect two GitHub remotes, but we can’t verify the info above, usethis describes the setup as “maybe_fork”.\n\n\n\n\n\nOnce a PAT is available, this setup can be identified as being a well-configured fork or a fork with incomplete setup (or possibly something more weird).",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Equivocal remote setups</span>"
    ]
  },
  {
    "objectID": "remote-setups-equivocal.html#how-to-fix",
    "href": "remote-setups-equivocal.html#how-to-fix",
    "title": "26  Equivocal remote setups",
    "section": "26.3 How to fix",
    "text": "26.3 How to fix\nThese setups aren’t necessarily broken, but usethis needs more information to operate.\nTo “fix” this, set up a GitHub personal access token. See Section 9.3 for more details on why and how to do that.",
    "crumbs": [
      "Remote setups",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Equivocal remote setups</span>"
    ]
  },
  {
    "objectID": "workflows-intro.html",
    "href": "workflows-intro.html",
    "title": "Useful Git patterns for real life",
    "section": "",
    "text": "Much of this originates as live workshop materials; the unlinked workflows are planned but not yet converted to prose here.\nGit patterns that come up frequently in real work:\n\nCommit early and often. Push less often. The Repeated Amend.\nHelp, my push was rejected!\nIntegrating remote and local work. Probably so you can push again.\nBurn it all down.\nTime travel:\n\n“I just need to see the past”. Browse and search on GitHub.\n“I need to visit the past”. Create a checkout a branch.\n“I want to return to the past”. git revert, git reset\n“I had a great cookie last October”. git cherry pick, git checkout REF -- path\n\n\nPlay well with others:\n\nFork and clone.\nGet upstream changes for a fork.\nDisposable fork.\nMake your repo rewarding to browse on GitHub.\nExplore and extend a pull request",
    "crumbs": [
      "Daily Workflows",
      "Useful Git patterns for real life"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html",
    "href": "workflows-repeated-amend.html",
    "title": "27  The Repeated Amend",
    "section": "",
    "text": "27.1 Rock climbing analogy\nLet’s talk about this:\nWhen I’m doing something tricky, I often proceed towards my goal in small increments, checking that everything still works along the way. Yes it works? Make a commit. This is my new worst case scenario. Keep going.\nWhat’s not to love?\nThis can lead to an awful lot of tiny commits. This is absolutely fine and nothing to be ashamed of. But one day you may start to care about the utility and aesthetics of your Git history.\nThe Repeated Amend is a pattern where, instead of cluttering your history with lots of tiny commits, you build up a “good” commit gradually, by amending.\nYes, there are other ways to do this, e.g. via squashing and interactive rebase, but I think amending is the best way to get started.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html#rock-climbing-analogy",
    "href": "workflows-repeated-amend.html#rock-climbing-analogy",
    "title": "27  The Repeated Amend",
    "section": "",
    "text": "Using a Git commit is like using anchors and other protection when climbing. If you’re crossing a dangerous rock face you want to make sure you’ve used protection to catch you if you fall. Commits play a similar role: if you make a mistake, you can’t fall past the previous commit. Coding without commits is like free-climbing: you can travel much faster in the short-term, but in the long-term the chances of catastrophic failure are high! Like rock climbing protection, you want to be judicious in your use of commits. Committing too frequently will slow your progress; use more commits when you’re in uncertain or dangerous territory. Commits are also helpful to others, because they show your journey, not just the destination.\nR Packages, Hadley Wickham (Wickham (2015))\n\n\n\nuse more commits when you’re in uncertain or dangerous territory",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html#workflow-sketch",
    "href": "workflows-repeated-amend.html#workflow-sketch",
    "title": "27  The Repeated Amend",
    "section": "27.2 Workflow sketch",
    "text": "27.2 Workflow sketch\n\n27.2.1 Initial condition\nStart with your project in a functional state:\n\nR package? Run your tests or R CMD check.\nData analysis? Re-run your script or re-render your .Rmd with the new chunk.\nWebsite or book? Make sure the project still compiles.\nYou get the idea.\n\nMake sure your “working tree is clean” and you are synced up with your GitHub remote. git status should show something like:\n~/tmp/myrepo % git status                                                          \nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n\n\n27.2.2 Get to work\nImagine we start at commit C, with previous commit B and, before that, A:\n... -- A -- B -- C\nMake a small step towards your goal. Re-check that your project “works”.\nStage those changes with and make a commit with the message “WIP”, meaning “work in progress”. Do this in RStudio or in the shell (Appendix A):\ngit add path/to/the/changed/file\ngit commit -m \"WIP\"\nThe message can be anything, but “WIP” is a common convention. If you use it, whenever you return to a project where the most recent commit message is “WIP”, you’ll know that you were probably in the middle of something. If you push a “WIP” commit, on purpose or by mistake, it signals to other people that more commits might be coming.\nYour history now looks like this:\nA -- B -- C -- WIP*\nDon’t push! The * above signifies a commit that exists only in your local repo, not (yet) on GitHub. If you called git status, you’d see something like “Your branch is ahead of ‘origin/main’ by 1 commit.”, which is also displayed in RStudio’s Git pane.\nDo a bit more work. Re-check that your project is still in a functional state. Stage and commit again, but this time amend your previous commit. RStudio offers a check box for “Amend previous commit” or in the shell:\ngit commit --amend --no-edit\nThe --no-edit part retains the current commit message of “WIP”.\nDon’t push! Your history now looks like this:\nA -- B -- C -- WIP*\nbut the changes associated with the WIP* commit now represent your last two commits, i.e. all the accumulated changes since state C.\nKeep going like this.\nLet’s say you’ve finally achieved your goal. One last time, check that your project is functional and in a state you’re willing to share with others.\nCommit, amending again, but with a real commit message this time. Think of this as commit D. Push. Do this in RStudio or the shell:\ngit commit --amend -m \"Implement awesome feature; closes #43\"\ngit push\nYour history – and that on GitHub – look like this:\nA -- B -- C -- D\nAs far as the world knows, you implemented the feature in one fell swoop. But you got to work on the task incrementally, with the peace of mind that you could never truly break things.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html#what-if-i-need-to-fall-back",
    "href": "workflows-repeated-amend.html#what-if-i-need-to-fall-back",
    "title": "27  The Repeated Amend",
    "section": "27.3 What if I need to fall back?",
    "text": "27.3 What if I need to fall back?\nImagine you’re in the middle of a Repeated Amend workflow:\nA -- B -- C -- WIP*\nand you make some changes that break your project, e.g. tests start failing. These bad changes are not yet committed, but they are saved. You want to fall back to the last good state, represented by WIP*.\nIn Git lingo, you want to do a hard reset to the WIP* state. Your local files will be forcibly reset to their state as of the WIP* commit. With the command line:\ngit reset --hard\nwhich is implicitly the same as\ngit reset --hard HEAD\nwhich says: “reset my files to their state at the most recent commit”.\nThis is also possible in RStudio. In fact, the RStudio way makes it easier to selectively reset only specific files or only certain changes. Click on “Diff” or “Commit”. Select a file with changes you do not want. Use “Discard All” to discard all changes in that file. Use “Discard chunk” to discard specific changes in a file. Repeat this procedure for each affected file until you are back to an acceptable state. Carry on.\nIf you committed a bad state, go to link to come for more reset scenarios.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html#why-dont-we-push-intermediate-progress",
    "href": "workflows-repeated-amend.html#why-dont-we-push-intermediate-progress",
    "title": "27  The Repeated Amend",
    "section": "27.4 Why don’t we push intermediate progress?",
    "text": "27.4 Why don’t we push intermediate progress?\nAmending a commit is an example of what’s called “rewriting Git history”.\nRewriting history that has already been pushed to GitHub – and therefore potentially pulled by someone else – is a controversial practice. Like most controversial practices, lots of people still indulge in it, as do I.\nBut there is the very real possibility that you create headaches for yourself and others, so in Happy Git we must recommend that you abstain. Once you’ve pushed something, consider it written in stone and move on.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-repeated-amend.html#um-what-if-i-did-push",
    "href": "workflows-repeated-amend.html#um-what-if-i-did-push",
    "title": "27  The Repeated Amend",
    "section": "27.5 Um, what if I did push?",
    "text": "27.5 Um, what if I did push?\nI told you not to!\nBut OK here we are.\nLet’s imagine you pushed this state to GitHub by mistake:\nA -- B -- C -- WIP (85bf30a)\nand proceeded to git commit --amend again locally, leading to this state:\nA -- B -- C -- WIP* (6e884e6)\nI’m deliberately showing two histories that sort of look the same, in terms of commit messages. But the last SHA reveals they are actually different.\nYou are in a pickle now, as you can’t do a simple push or pull. A push will be rejected and a pull will probably lead to a merge that you don’t want.\nYou have two choices:\n\nIf you have collaborators who may have pulled the repo at commit WIP (85bf30a), you have to regard that particular history as being written in stone now. If there is any very precious work that only exists locally, such as a specific file, save a copy of that to a new file path, temporarily. Hard reset your local repo to C (git reset --hard HEAD^) and pull from GitHub. GitHub and local history now show this:\nA -- B -- C -- WIP (85bf30a)\nIf you saved some precious work to a temporary file path, bring it back into the repo now; save, stage, commit, and push. GitHub and local history now show this:\nA -- B -- C -- WIP (85bf30a) -- E\nIf you have no collaborators or you have reason to believe they have not pulled, you can rewrite history, even on GitHub. You might as well make sure your local commit has a real, non-“WIP” message at this point. Force push your history to GitHub (git push --force). GitHub and local history now show this:\nA -- B -- C -- D\n\nIn both cases, you’ve made the changes you want and your local repo and the GitHub remote are synced up again. The history is nicer in the second case, but that’s a secondary issue.\nThere are many different ways to rewrite history and rescue some of these situations, but we find the approaches described above to be very approachable.\n\n\n\n\nWickham, Hadley. 2015. R Packages. 1st ed. O’Reilly Media, Inc.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>The Repeated Amend</span>"
    ]
  },
  {
    "objectID": "workflows-push-rejected.html",
    "href": "workflows-push-rejected.html",
    "title": "28  Dealing with push rejection",
    "section": "",
    "text": "28.1 She who pushes first wins!\nYou may have noticed that you – the author of D – are faffing around with Git more than the person who committed and pushed C, i.e. your collaborator.\nThere is a lesson to be learned here!\nIf you had pushed D first, you’d be relaxing and they’d be figuring out how to integrate C into their history in order to push. So push your work often. Don’t go dark and work “offline” for long stretches of time.\nObviously, you should push work to main because it’s “ready” to share (or at least “ready enough”), not to avoid Git merges.\nThere is a truly legitimate point here: It is better for the overall health of a project to be committing, pushing, and integrating more often, not less. This does not eliminate the need to integrate different lines of work, but it makes each integration smaller, less burdensome, and less prone to error.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Dealing with push rejection</span>"
    ]
  },
  {
    "objectID": "workflows-push-rejected.html#stay-in-touch",
    "href": "workflows-push-rejected.html#stay-in-touch",
    "title": "28  Dealing with push rejection",
    "section": "28.2 Stay in touch",
    "text": "28.2 Stay in touch\nAnother take away is this: the sooner you know about C, the better. Pull (or fetch) often.\nLet’s think about your commit D. Maybe it was built up over a couple of days via the Repeated Amend pattern. Maybe C was sitting there on GitHub the whole time or appeared very early in your process.\nConsider that it might be easier to integrate C into your work D sooner rather than later. Sometimes this is not true, but more often it is.\nIn general, it pays off to be proactively aware of what others are doing (e.g. to pull or fetch often) than to always be in reactive mode, learning about your collaborator’s work only when your push is rejected.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Dealing with push rejection</span>"
    ]
  },
  {
    "objectID": "workflows-push-rejected.html#use-branches",
    "href": "workflows-push-rejected.html#use-branches",
    "title": "28  Dealing with push rejection",
    "section": "28.3 Use branches",
    "text": "28.3 Use branches\nFinally, your early experiences collaborating with others and yourself in main will give you a visceral understanding of why most Git users eventually start to use branches.\nBranches afford explicit workflows for integrating different lines of work on your own terms. This is much nicer than trying to do a tricky merge or rebase in a frustrated panic, because you need to push your work to GitHub at the end of the day.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Dealing with push rejection</span>"
    ]
  },
  {
    "objectID": "workflows-pull.html",
    "href": "workflows-pull.html",
    "title": "29  Pull, but you have local work",
    "section": "",
    "text": "29.1 Local work is uncommitted\nRemote state is A--B--C.\nLocal state is A--B--(uncommitted changes).",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Pull, but you have local work</span>"
    ]
  },
  {
    "objectID": "workflows-pull.html#local-work-is-uncommitted",
    "href": "workflows-pull.html#local-work-is-uncommitted",
    "title": "29  Pull, but you have local work",
    "section": "",
    "text": "29.1.1 Happy simple cases\nThere are two happy scenarios, in which git pull will “just work”:\n\nYou’ve introduced completely new files that don’t exist in the remote branch and, therefore, cannot possibly have conflicting changes. You’re in luck! You can just git pull.\nThe files affected by your local work have ZERO overlap with the files affected by the changes you need to pull from the remote. You’re also in luck! You can just git pull.\n\nSummary of these happy git pull scenarios:\n                 Remote: A--B--C\n\nLocal before 'git pull': A--B--(uncommitted changes)\n Local after 'git pull': A--B--C--(uncommitted changes)\nWhat has actually happened here is that git pull resulted in a fast-forward merge, i.e. we placed commit C right on the end of your history. This would also be the case in the simpler situation where recent local history was just A--B, i.e. you had not added any local work since the last sync up with origin/main.\n\n\n29.1.2 git stash works, sometimes\nIf your changes affect a file (foo.R in the example below) that has also been changed in commit C, you cannot git pull. It doesn’t hurt to try, but you will fail and it will look something like this:\njenny@2015-mbp ethel $ git pull\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 1), reused 1 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:jennybc/ethel\n   db046b4..2d33a6f  main     -&gt; origin/main\nUpdating db046b4..2d33a6f\nerror: Your local changes to the following files would be overwritten by merge:\n        foo.R\nPlease commit your changes or stash them before you merge.\nAborting\nNow what? First, you must safeguard your local changes by either stashing or committing them. (I personally would choose to commit and execute a workflow described in Section 29.2.)\nI am not a big fan of git stash; I think it’s usually better to take every possible chance to solidify your skills around core concepts and operations, e.g., make a commit, possibly in a branch. But if you want to use git stash, this opportunity is as good as it gets.\ngit stash is a way to temporarily store some changes to get them out of the way. Now you can do something else, without a lot of fuss. In our case, “do something else” is to get the upstream changes with a nice, simple git pull. Then you reapply and delete the stash and pick up where you left off.\nFor more details about stashing, I recommend\n\nThe stashing coverage in the “Filesystem interactions” chapter of Git in Practice (book website or read on GitHub)\n7.3 Git Tools - Stashing and Cleaning in Pro Git.\n\nHere’s the best case scenario for “stash, pull, unstash” in the example above:\ngit stash save\ngit pull\ngit stash pop\nAnd here’s the output from our example:\njenny@2015-mbp ethel $ git stash save\nSaved working directory and index state WIP on main: db046b4 Merge branch 'main'of github.com:jennybc/ethel\n\njenny@2015-mbp ethel $ git pull\nUpdating db046b4..2d33a6f\nFast-forward\n foo.R | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\njenny@2015-mbp ethel $ git stash pop\nAuto-merging foo.R\nOn branch main\nYour branch is up-to-date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        modified:   foo.R\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (012c4dcd3a4c3af6757c4c3ca99a9eaeff1eb2a4)\nThat is what success looks like. You’ve achieved this:\n      Remote: A--B--C\n\nLocal before: A--B--(uncommitted changes)\n Local after: A--B--C--(uncommitted changes)\nAs above, we have just enjoyed a fast-forward merge, made possible by temporarily stashing then unstashing the uncommitted local changes.\n\n\n29.1.3 git stash with conflicts\nIf your local changes have some overlap with changes you are pulling, you will, instead get a merge conflict from git stash pop. Now you have some remedial work to do. In this case, you have gained nothing by using git stash in the first place, which explains my general lack of enthusiasm for git stash.\nHere’s how to execute the git stash workflow in our example, in the face of conflicts (based on this Stack Overflow answer):\njenny@2015-mbp ethel $ git stash save\nSaved working directory and index state WIP on main: 2d33a6f Back to 5\n\njenny@2015-mbp ethel $ git pull\nUpdating 2d33a6f..1eddf9e\nFast-forward\n foo.R | 1 +\n 1 file changed, 1 insertion(+)\n \njenny@2015-mbp ethel $ git stash pop\nAuto-merging foo.R\nCONFLICT (content): Merge conflict in foo.R\nAt this point, you must resolve the merge conflict (future link). Literally, at each locus of conflict, pick one version or the other (upstream or stashed) or create a hybrid yourself. Remove the all the markers inserted to demarcate the conflicts. Save.\nSince git stash pop did not go smoothly, we need to manually reset (future link) and delete the stash to finish.\njenny@2015-mbp ethel $ git reset\nUnstaged changes after reset:\nM       foo.R\n\njenny@2015-mbp ethel $ git stash drop\nDropped refs/stash@{0} (7928db50288e9b4d934803b6b451a000fd7242ed)\nPhew, we are done. We’ve achieved this:\n      Remote: A--B--C\n\nLocal before: A--B--(uncommitted changes)\n Local after: A--B--C--(uncommitted changes*)\nThe asterisk on uncommitted changes* indicates that your uncommitted changes might now reflect adjustments made when you resolved the conflicts.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Pull, but you have local work</span>"
    ]
  },
  {
    "objectID": "workflows-pull.html#sec-git-pull-with-local-commits",
    "href": "workflows-pull.html#sec-git-pull-with-local-commits",
    "title": "29  Pull, but you have local work",
    "section": "29.2 Local work is committed",
    "text": "29.2 Local work is committed\nRemote state is A--B--C.\nLocal state is A--B--D.\n\n29.2.1 Pull (fetch and merge)\nThe simplest option is to fetch the commits from upstream and merge them, which is what git pull does. This is a good option if you’re new to Git. It leads to a messier history, but when you are new, this is the least of your worries. Merge, be happy, and carry on.\nHere is the best case, no-merge-conflicts version of git pull:\njenny@2015-mbp ethel $ git pull\n\n&lt; YOU WILL PROBABLY BE KICKED INTO AN EDITOR HERE RE: MERGE COMMIT MESSAGE! &gt;\n\nMerge made by the 'recursive' strategy.\n README.md | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\nDepending on your version of Git, your config, and your use of a GUI, you might be required to confirm/edit a commit message for the merge commit.\nOr what if things don’t go this smoothly? If commit C (on the remote) and commit D (local) have changes to the same parts of one or more files, Git may not be able to automatically merge and you will get merge conflicts. It will look something like this:\njenny@2015-mbp ethel $ git pull\nAuto-merging foo.R\nCONFLICT (content): Merge conflict in foo.R\nAutomatic merge failed; fix conflicts and then commit the result.\nYou must resolve these conflicts (future link). Literally, at each locus of conflict, pick one version or the other (upstream or local) or create a hybrid yourself. Remove the all the markers inserted to demarcate the conflicts. Save.\nMark the affected file foo.R as resolved via git add and make an explicit git commit to finalize this merge.\njenny@2015-mbp ethel $ git add foo.R\njenny@2015-mbp ethel $ git commit\n[main 20b297b] Merge branch 'main' of github.com:jennybc/ethel\nAgain, do not be surprised if, during git commit, you find yourself in an editor, confirming/editing the commit message for the merge commit.\nWe’ve achieved this:\n      Remote: A--B--C\n\nLocal before: A--B--D\n Local after: A--B--D--(merge commit)\n                  \\_C_/\n\n\n29.2.2 Pull and rebase\ngit pull --rebase creates a nicer history than git pull when integrating local and remote commits. It avoids a merge commit, so the history is less cluttered and is linear. It can make merge conflicts more onerous to resolve, which is why I still recommend git pull as the entry-level solution.\nHere is the best case, no-merge-conflicts version of git pull --rebase:\njenny@2015-mbp ethel $ git pull --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: Take max\nNotice that you were NOT kicked into an editor to fiddle with the commit message for the merge commit, because there is no merge commit! This is the beauty of rebasing.\nWe’ve achieved this:\n      Remote: A--B--C\n\nLocal before: A--B--D\n Local after: A--B--C--D\nIt is as if we pulled the upstream work in commit C, then did the local work embodied in commit D. We have no cluttery merge commits and a linear history. Nice!\nThe bad news: As with plain vanilla git pull, it is still possible to get merge conflicts with git pull --rebase. If you have multiple local commits, you can even find yourself resolving conflicts over and over, as these commits are sequentially replayed. Hence this is a better fit for more experienced Git users and in situations where conflicts are unlikely (those tend to be correlated, actually).\nAt this point, if you try to do git pull --rebase and get bogged down in merge conflicts, I recommend git rebase --abort to back out. For now, just pursue a more straightforward strategy.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Pull, but you have local work</span>"
    ]
  },
  {
    "objectID": "workflows-pull.html#other-approaches",
    "href": "workflows-pull.html#other-approaches",
    "title": "29  Pull, but you have local work",
    "section": "29.3 Other approaches",
    "text": "29.3 Other approaches\nThere are many more ways to handle this situation, which you can discover and explore as you gain experience and start to care more about the history. We sketch some ideas here.\n\n29.3.1 Use a temporary branch for local work\nRecall:\nRemote state is A--B--C.\nLocal state is A--B--(uncommitted changes).\nThis is an alternative to the stash workflow that has the advantage of giving you practice with Git techniques that are more generally useful. It also leads to a nice history.\nCreate a new, temporary branch and commit your uncommitted changes there. Checkout main and git pull to get changes from upstream. You now need to recover the work from the commit in the temporary branch. Options:\n\nMerge the temporary branch into main.\nCherry pick the commit from the temporary branch into main.\n\nIn either case, it is still possible you will need to deal with merge conflicts.\nIn either case, if you felt forced to commit before you were ready or to accept an ugly merge commit, you can either do a mixed reset to “uncommit” but keep the changes on main or keep amending until you are satisfied with the commit.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Pull, but you have local work</span>"
    ]
  },
  {
    "objectID": "workflows-pull.html#some-local-work-is-committed-some-is-not",
    "href": "workflows-pull.html#some-local-work-is-committed-some-is-not",
    "title": "29  Pull, but you have local work",
    "section": "29.4 Some local work is committed, some is not",
    "text": "29.4 Some local work is committed, some is not\nThis is an awkward hybrid situation that can be handled with a combination of strategies seen above: make a pragmatic commit on main or a temporary branch. Integrate the upstream and local changes in main. If you aren’t happy with the final pragmatic commit (which only exists locally), reset or amend until you are.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Pull, but you have local work</span>"
    ]
  },
  {
    "objectID": "workflows-see-the-past.html",
    "href": "workflows-see-the-past.html",
    "title": "30  Time travel: See the past",
    "section": "",
    "text": "30.1 Hyperlinks are awesome!\nThis is where GitHub (and GitLab or BitBucket) really shine. The ability to quickly explore different commits/states, switch between branches, inspect individual files, and see the discussion in linked issues is incredibly powerful.\nYes, technically, you can visit past states of your project using Git commands locally. But it is significantly more cumbersome. You generally have to checkout these previous states, which raises the prospect of getting comfortable in the “detached head” state and unintentionally making new commits on the wrong branch or on no branch at all.\nGitHub’s hyperlink-rich presentation of your repo and its history is one of the top reasons to sync local work to a copy on GitHub, even if you keep it private. It can be much easier to hone in on a state or change of interest by clicking around or using GitHub’s search features. Also, because it is so clearly a remote and read-only action, there is no possibility of goofing up local state or committing new work to the wrong branch.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Time travel: See the past</span>"
    ]
  },
  {
    "objectID": "workflows-see-the-past.html#browse-commit-history-and-specific-commits",
    "href": "workflows-see-the-past.html#browse-commit-history-and-specific-commits",
    "title": "30  Time travel: See the past",
    "section": "30.2 Browse commit history and specific commits",
    "text": "30.2 Browse commit history and specific commits\nFrom your repo’s landing page, access commit history by clicking on “xyz commits”. This is like using git log locally, but much more rewarding. If you have a good local Git client, it probably also provides a graphical overview of history.\n\n\n\nLink to commit listing on GitHub.\n\n\nOnce you’re viewing the history, notice three ways to access more info for each commit:\n\nThe clipboard icon copies the SHA-1 of the commit. This can be handy if you need to refer to this commit elsewhere, e.g. in an issue thread or a commit message or in a Git command you’re forming for local execution.\nClick on the abbreviated SHA-1 itself in order to the view the diff associated with the commit.\nClick on the double angle brackets &lt;&gt; to browse the state of the entire repo at that point in history.\n\n\n\n\nExample of a commit listing on GitHub.\n\n\nBack out of any drilled down view by clicking on YOU/REPO to return to your repo’s landing page. This brings you back to the present state and top-level of your repo.\n\n30.2.1 Use hyperlinks yourself!\nOnce you’ve identified a relevant commit, diff, or file state, you can copy the current URL from your browser and use it to enhance online discussion elsewhere, i.e. to bring other people to this exact view of the repo. The hyperlink-iness of repos hosted on GitHub can make online discussion of a project much more precise and efficient.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Time travel: See the past</span>"
    ]
  },
  {
    "objectID": "workflows-see-the-past.html#file-driven-inquiries",
    "href": "workflows-see-the-past.html#file-driven-inquiries",
    "title": "30  Time travel: See the past",
    "section": "30.3 File driven inquiries",
    "text": "30.3 File driven inquiries\nWhat if you’re interested in how a specific file came to be the way it is? First navigate to the file, then notice “Blame” and “History” in the upper right.\n\n\n\nVisiting a specific file on GitHub.\n\n\n\n30.3.1 Blame\nThe “blame” view of a file is related to what git blame does on the command line. It reveals who last touched each line of the file, how long ago, and the associated commit message. Click on the commit message to visit that commit. Or click the “stacked rectangles” icon to move further back in time, but staying in blame view. This is handy when doing forensics on a specific and small set of lines.\nadd a screenshot (and update that above) but first pick a better example than Happy Git, i.e. one with more contributors / more interesting history\n\n\n30.3.2 History\nThe “history” view for a file is very much like the overall commit history described above, except it only includes commits that affect the file of interest. This can be handy when your inquiry is rather diffuse and you’re trying to digest the general story arc for a file.\n\n\n30.3.3 Hyperlink to specific lines at a specific state\nWhen viewing a file on GitHub, you can click on a line number to highlight it. Use “click … shift-click” to select a range of lines. Notice your browser’s URL shows something of this form:\nhttps://github.com/OWNER/REPO/blob/SHA/path/to/file.R#L27-L31\nIf the URL does not contain the SHA, type “y” to toggle into that form.\nThese file- and SHA-specific URLs are a great way to point people at particular lines of code in online conversations. It’s best practice to use the uglier links that contain the SHA, as they will stand the test of time.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Time travel: See the past</span>"
    ]
  },
  {
    "objectID": "workflows-see-the-past.html#search",
    "href": "workflows-see-the-past.html#search",
    "title": "30  Time travel: See the past",
    "section": "30.4 Search",
    "text": "30.4 Search\nSearch is always available in the upper-righthand corner of GitHub.\n\n\n\nTyping into GitHub search bar.\n\n\nOnce you enter some text in the search box, a dropdown provides the choice to search in the current repo (the default) or all of GitHub. GitHub searches the contents of files (described as “Code”), commit messages, and issues. Take advantage of the search hits across these different domains. Again, this is a powerful way to zoom in on specific lines of code, revisit an interesting time in project history, or re-discover a conversation thread.\n\n30.4.1 Issue search\nIf you want to search issues specifically, the search box on any repo’s Issues page is prepopulated with the filters is:issue and is:open.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Time travel: See the past</span>"
    ]
  },
  {
    "objectID": "workflows-fork-and-clone.html",
    "href": "workflows-fork-and-clone.html",
    "title": "31  Fork and clone",
    "section": "",
    "text": "31.1 Fork and clone without usethis\nI assume you’re already visiting the source repo in the browser. In the upper right hand corner, click Fork.\nThis creates a copy of REPO in your GitHub account and takes you there in the browser. Now we are looking at YOU/REPO.\nClone YOU/REPO, which is your copy of the repo, a.k.a. your fork, to your local machine. Make sure to clone your repo, not the source repo. Elsewhere, we describe multiple methods for cloning a remote repo. Pick one:\nMake a conscious decision about the local destination directory and HTTPS vs SSH URL.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fork and clone</span>"
    ]
  },
  {
    "objectID": "workflows-fork-and-clone.html#fork-and-clone-without-usethis",
    "href": "workflows-fork-and-clone.html#fork-and-clone-without-usethis",
    "title": "31  Fork and clone",
    "section": "",
    "text": "The cloning instructions in Existing project, GitHub first cover usethis and RStudio.\nThe cloning instructions in Connect to GitHub show how to do this with command line Git.\n\n\n\n31.1.1 Finish the fork and clone setup\nIf you stop at this point, you have what I regard as an incomplete setup, described elsewhere as “fork (salvageable)”.\n\n\n\n\nThis is sad, because there is no direct connection between your local copy of the repo and the source repo OWNER/REPO.\nThere are two more recommended pieces of setup:\n\nConfigure the source repo as the upstream remote\nConfigure your local main branch (or whatever the default is) to track upstream/main, not origin/main\n\n\nThe nickname upstream can technically be whatever you want. There is a strong tradition of using upstream in this context and, even though I have better ideas, I believe it is best to conform. Every book, blog post, and Stack Overflow thread that you read will use upstream here. Save your psychic energy for other things.\nThese steps make it easier for you to stay current with developments in the source repo. We talk more below about why you should never commit to the default branch, e.g. main, when you’re working in a fork (see Section 31.4).\n\n31.1.2 Configure the upstream remote\nThe first step is to get the URL of the source repo OWNER/REPO. Navigate to the source repo on GitHub. It is easy to get to from your fork, YOU/REPO, via the “forked from” link in the upper left.\nUse the big green “Code” button to get the URL for OWNER/REPO on your clipboard. Be intentional about whether you copy the HTTPS or SSH URL.\nYou can configure the upstream remote with command line Git, usethis, or RStudio.\nHere’s how to use command line Git in a shell:\ngit remote add upstream https://github.com/OWNER/REPO.git\nusethis::use_git_remote() allows you to configure a Git remote. Execute this in R:\n\nusethis::use_git_remote(\n  name = \"upstream\",\n  url = \"https://github.com/OWNER/REPO.git\"\n)\n\nFinally, you can do this in RStudio, although it feels a bit odd. Click on “New Branch” in the Git pane (“two purple boxes and a white square”).\n\n\n\n\nThis will reveal a button to “Add Remote”. Click it. Enter upstream as the remote name and paste the URL for OWNER/REPO that you got from GitHub. Click “Add”. Decline the opportunity to add a new branch by clicking “Cancel”.\nRegardless of how you configured upstream, do this in a shell:\ngit fetch upstream\n\n31.1.3 Set upstream tracking branch for the default branch\nThis is optional but highly recommended for most fork and clone situations. We’re going to set upstream/main from the source repo as the upstream tracking branch of local main. (If your default branch has a different name, substitute accordingly.)\nThis is desirable so that a simple git pull pulls from the source repo, not from your fork. It also means a simple git push will (attempt to) push to the source repo, which will almost always be rejected since you probably do not have permission. This failure will alert you to the fact that you’re doing something questionable, while it’s still easy to back out.\nFirst, fetch info for the upstream remote. This is especially important if you just configured upstream for the first time.\ngit fetch upstream\nThe two commands below do the same thing; the first is just shorthand for the second. Do this with command line Git in a shell:\ngit branch -u upstream/main\ngit branch --set-upstream-to upstream/main\nIf you found this fork and clone workflow long and tedious, consider using usethis::create_from_github() next time!",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fork and clone</span>"
    ]
  },
  {
    "objectID": "workflows-fork-and-clone.html#sec-fork-and-clone-create-from-github",
    "href": "workflows-fork-and-clone.html#sec-fork-and-clone-create-from-github",
    "title": "31  Fork and clone",
    "section": "\n31.2 usethis::create_from_github(\"OWNER/REPO\", fork = TRUE)\n",
    "text": "31.2 usethis::create_from_github(\"OWNER/REPO\", fork = TRUE)\n\nThe usethis package has a convenience function, create_from_github(), that can do “fork and clone” (as well as just clone). The fork argument controls whether the source repo is cloned or fork-and-cloned. Note that create_from_github(fork = TRUE) requires that you have configured a GitHub personal access token.\nI assume you’re already visiting the source repo in the browser. Now click the big green button that says “&lt;&gt; Code”. Copy a clone URL to your clipboard. If you’re taking our default advice, copy the HTTPS URL. But if you’re opting for SSH, then make sure to copy the SSH URL.\nYou can execute this next command in any R session. If you use RStudio, then do this in the R console of any RStudio instance. In either case, after successful completion, you should find yourself in the new project that is the local repo connected to your fork.\n\nusethis::create_from_github(\n  \"https://github.com/OWNER/REPO\",\n  destdir = \"~/path/to/where/you/want/the/local/repo/\",\n  fork = TRUE\n)\n\nThe first argument is repo_spec and it accepts the GitHub repo specification in various forms. In particular, you can use the URL we just copied for the source repo.\nThe destdir argument specifies the parent directory where you want the new folder (and local Git repo) to live. If you don’t specify destdir, usethis defaults to some very conspicuous place, like your desktop. If you like to keep Git repos in a certain folder on your computer, you can personalize this default by setting the usethis.destdir option in your .Rprofile.\nThe fork argument specifies whether to clone (fork = FALSE) or fork and clone (fork = TRUE). You often don’t need to specify fork and can just enjoy the default behaviour, which is governed by your permissions on the source repo. By default, fork = FALSE if you can push to the source repo and fork = TRUE if you cannot.\nHere is what that might look like (note that we’re accepting the default behaviour for many arguments):\n\nusethis::create_from_github(\"https://github.com/OWNER/REPO\")\n#&gt; ℹ Defaulting to 'https' Git protocol\n#&gt; ✔ Setting `fork = TRUE`\n#&gt; ✔ Creating '/some/path/to/local/REPO/'\n#&gt; ✔ Forking 'OWNER/REPO'\n#&gt; ✔ Cloning repo from 'https://github.com/YOU/REPO.git' into '/some/path/to/local/REPO'\n#&gt; ✔ Setting active project to '/some/path/to/local/REPO'\n#&gt; ℹ Default branch is 'main'\n#&gt; ✔ Adding 'upstream' remote: 'https://github.com/OWNER/REPO.git'\n#&gt; ✔ Pulling changes from 'upstream/main'.\n#&gt; ✔ Setting remote tracking branch for local 'main' branch to 'upstream/main'\n#&gt; ✔ Setting active project to '&lt;no active project&gt;'\n\nFor an RStudio user, create_from_github(fork = TRUE) does all of this:\n\nForks the source repo on GitHub.\nClones your fork to a new local repo (and RStudio Project). This configures your fork as the origin remote.\nConfigures the source repo as the upstream remote.\nSets the upstream tracking branch for main (or whatever the default branch is) to upstream/main.\nOpens a new RStudio instance in the new local repo (and RStudio Project).",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fork and clone</span>"
    ]
  },
  {
    "objectID": "workflows-fork-and-clone.html#engage-with-the-new-repo",
    "href": "workflows-fork-and-clone.html#engage-with-the-new-repo",
    "title": "31  Fork and clone",
    "section": "\n31.3 Engage with the new repo",
    "text": "31.3 Engage with the new repo\nIf you used usethis::create_from_github() or did fork and clone via Existing project, GitHub first, you are probably in an RStudio Project for this new repo.\nRegardless, get yourself into this project, whatever that means for you, using your usual method.\nExplore the new repo in some suitable way. If it is a package, you could run the tests or check it. If it is a data analysis project, run a script or render an Rmd. Convince yourself that you have gotten the code.\nYou should now be in the perfect position to sync up with ongoing developments in the source repo and to propose new changes via a pull request from your fork.\n{fig-align=“center” fig-alt = “Fork and clone, ideal setup.” width=“60%”}\nYou can use the commands below to review more of the nitty gritty Git details of your fork and clone setup:\n\nCommand line Git in a shell:\n\ngit remote -v\n\ngit remote show origin (or upstream)\ngit branch -vv\n\n\nIn R:\n\nusethis::git_remotes()\nusethis::git_sitrep()\n\n\n\nIn the shell, git remote -v should reveal that your remotes are configured like so:\norigin    https://github.com/YOU/REPO.git (fetch)\norigin    https://github.com/YOU/REPO.git (push)\nupstream  https://github.com/OWNER/REPO.git (fetch)\nupstream  https://github.com/OWNER/REPO.git (push)\nComparable info is available In R with usethis::git_remotes():\n\ngit_remotes()\n#&gt; $origin\n#&gt; [1] \"https://github.com/YOU/REPO.git\"\n#&gt; \n#&gt; $upstream\n#&gt; [1] \"https://github.com/OWNER/repo.git\"\n\nIn the shell, with the default branch checked out, git branch -vv should reveal that upstream/main is the upstream tracking branch:\n~/some/repo/ % git branch -vv                   \n* main 2739987 [upstream/main] Some commit message\nAll of this info about remotes and branches is also included in the rich information reported with usethis::git_sitrep().",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fork and clone</span>"
    ]
  },
  {
    "objectID": "workflows-fork-and-clone.html#sec-fork-dont-touch-main",
    "href": "workflows-fork-and-clone.html#sec-fork-dont-touch-main",
    "title": "31  Fork and clone",
    "section": "\n31.4 Don’t mess with main\n",
    "text": "31.4 Don’t mess with main\n\nHere is some parting advice for how to work in a fork and clone and situation.\nIf you make any commits in your local repository, I strongly recommend that you work in a new branch, not main (or whatever the default branch is called).\nI strongly recommend that you do not make commits to main of a repo you have forked. If you commit to main in a repo you don’t own, it creates a divergence between that branch’s history in the source repo and in your repo. Nothing but pain will come from this. (If you’ve already done this, we discuss how to fix the situation in Um, what if I did touch main?.)\nWhen you treat main as read-only, it makes life much easier when you want to pull upstream work into your copy. The OWNER of REPO will also be happier to receive your pull request from a non-main branch.\nFor more detail, this Q&A on Stack Overflow is helpful: Why is it bad practice to commit to your fork’s master branch?.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fork and clone</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html",
    "href": "workflows-upstream-changes-into-fork.html",
    "title": "32  Get upstream changes for a fork",
    "section": "",
    "text": "32.1 Verify your local repo’s configuration\nVocabulary: OWNER/REPO refers to what we call the source repo, owned by OWNER, who is not you. YOU/REPO refers to your fork, i.e. your remote copy of the source repo, on GitHub. This is the same vocabulary used elsewhere, such as the chapter on common remote configurations.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html#verify-your-local-repos-configuration",
    "href": "workflows-upstream-changes-into-fork.html#verify-your-local-repos-configuration",
    "title": "32  Get upstream changes for a fork",
    "section": "",
    "text": "32.1.1 List your remotes\nLet’s inspect the current remotes for your local repo.\nYou can check this with command line Git in the shell (Appendix Appendix A):\ngit remote -v\nWe want to see something like this:\norigin    https://github.com/YOU/REPO.git (fetch)\norigin    https://github.com/YOU/REPO.git (push)\nupstream  https://github.com/OWNER/REPO.git (fetch)\nupstream  https://github.com/OWNER/REPO.git (push)\nComparable info is available in R with usethis::git_remotes():\n\ngit_remotes()\n#&gt; $origin\n#&gt; [1] \"https://github.com/YOU/REPO.git\"\n#&gt; \n#&gt; $upstream\n#&gt; [1] \"https://github.com/OWNER/repo.git\"\n\nIf you only have one remote, probably origin, I highly recommend you modify the remote configuration. But first, we’ll check one other thing.\n\n32.1.2 View the upstream tracking branch\nIdeally, your local main branch has upstream/main as its upstream tracking branch. Even you have a correctly configured upstream remote, this is worth checking. If your default branch has a branch other than main, substitute accordingly.\nIn the shell, with the default branch checked out, git branch -vv should reveal that upstream/main is the upstream tracking branch:\n~/some/repo/ % git branch -vv                   \n* main 2739987 [upstream/main] Some commit message\nIf, instead, you see origin/main, I highly recommend you reconfigure the tracking branch.\nAll of this info about remotes and branches is also included in the rich information reported with usethis::git_sitrep().\n\n32.1.3 Repair or complete your repo’s configuration\nInstructions for adding the upstream remote and setting upstream tracking for your default branch are given in Finish the fork and clone setup.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html#verify-that-your-working-tree-is-clean",
    "href": "workflows-upstream-changes-into-fork.html#verify-that-your-working-tree-is-clean",
    "title": "32  Get upstream changes for a fork",
    "section": "\n32.2 Verify that your “working tree is clean”",
    "text": "32.2 Verify that your “working tree is clean”\nWe assume your repo has this favorable configuration:\n\n\n\n\nMake sure you are on the default branch, e.g. main, and that your “working tree is clean”. First, let’s make sure our information on the upstream remote is current:\ngit fetch upstream\ngit status should now show something like:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\nIf you have modified files, you should either discard those changes or create a new branch and commit the changes there for safekeeping.\nIt’s also fine if you see something like this:\nYour branch is behind 'upstream/main' by 2 commits, and can be fast-forwarded.\nHowever, if you see something like this:\nYour branch is ahead of 'upstream/main' by 1 commit.\nor this:\nYour branch and 'upstream/main' have diverged,\nand have 1 and 1 different commits each, respectively.\nthis is a sign that you have made some regrettable choices.\nI recommend that you never make your own commits to the default branch of a fork or to any branch that you don’t effectively (co-)own. However, if you have already done so, we explain how to fix the problem in Um, what if I did touch main?.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html#sync-option-1-pull-changes-from-upstream-then-push-to-origin",
    "href": "workflows-upstream-changes-into-fork.html#sync-option-1-pull-changes-from-upstream-then-push-to-origin",
    "title": "32  Get upstream changes for a fork",
    "section": "\n32.3 Sync option 1: Pull changes from upstream, then push to origin\n",
    "text": "32.3 Sync option 1: Pull changes from upstream, then push to origin\n\nNow we are ready to pull the changes that we don’t have from the source repo OWNER/REPO into our local copy.\ngit pull upstream main --ff-only\nThis says: “pull the changes from the remote known as upstream into the main branch of my local repo”. I am being explicit about the remote (upstream) and the branch (main) in this case, both to make it more clear and to make this command robust to repo- and user-level Git configurations. But if you’ve followed our setup recommendations, you don’t actually need to be this explicit.\nI also highly recommend using the --ff-only flag in this case, so that you also say “if I have made my own commits to main, please force me to confront this problem NOW”. Here’s what it looks like if a fast-forward merge isn’t possible:\n$ git pull upstream main --ff-only\nFrom github.com:OWNER/REPO\n * branch              main     -&gt; FETCH_HEAD\nfatal: Not possible to fast-forward, aborting.\nSee Um, what if I did touch main? to get yourself back on the happy path.\nAssuming you’ve succeeded with git pull, this next step is optional and many people who are facile with Git do not bother.\nIf you take my advice to never work in main of a fork, then the state of the main branch in your fork YOU/REPO does not technically matter. You will never make a pull request from main and there are ways to set the correct base for the branches and pull requests that you do create.\nIf, however, your grasp of all these Git concepts is tenuous at best, it can be helpful to try to keep things simple and orderly and synced up.\nFeel free to push the newly updated state of local main to your fork YOU/REPO and enjoy the satisfaction of being “caught up” with OWNER/REPO, in both your remote fork and in your local repo.\nIn the shell:\ngit push origin main\nIf you’ve followed our configuration advice, you really do need to be this explicit in order to push to origin (not upstream).",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html#sync-option-2-sync-your-fork-on-github-pull-changes-from-origin-to-local-repo",
    "href": "workflows-upstream-changes-into-fork.html#sync-option-2-sync-your-fork-on-github-pull-changes-from-origin-to-local-repo",
    "title": "32  Get upstream changes for a fork",
    "section": "\n32.4 Sync option 2: Sync your fork on GitHub, pull changes from origin to local repo",
    "text": "32.4 Sync option 2: Sync your fork on GitHub, pull changes from origin to local repo\nFor many years, this was not possible, though many GitHub users wished for this feature. Happily it is now possible to sync a fork with its source repo in the browser, i.e. to do the sync between the 2 GitHub repos. The official GitHub documentation for this is Syncing a fork branch from the web UI.\nNavigate to the main page of your fork YOU/REPO, i.e. your primary repo which is configured as the origin remote.\nAt the top you’ll see some information on how the state of main in your fork relates to main in the source repo, similar to what we see with git status in the alternative approach above. Ideally you will see something like:\nThis branch is 2 commits behind OWNER:main.\nwhich indicates you can sync up in the ideal fast-forward sense.\nIf you see something like this:\nThis branch is 1 commit ahead, 2 commits behind OWNER:main.\nthis is a sign that you have made some regrettable choices.\nI recommend that you never make your own commits to the default branch of a fork or to any branch that you don’t effectively (co-)own. However, if you have already done so, we explain how to fix the problem in Um, what if I did touch main?.\nOnce you are ready to proceed, click “Sync fork” in the upper right corner. Upon success, the main page of YOU/REPO shows something like\n\nThis branch is up to date with OWNER/REPO:main.\n\nIf you have made commits on the default branch of your fork, which we strongly advise against, this can result in a merge commit (or even merge conflicts). If you are suffering due to commits you’ve made on main and it’s beyond the help we describe below, consider deleting your fork and local repo and making a fresh start with Fork and clone. Live and learn.\nOnce you have successfully synced the default branch of YOU/REPO with the default branch of OWNER/REPO, you probably want to do the same for your local repo. Since they are synced, you can pull from either upstream or origin.\nIn the shell, with the default branch checked out, execute one of these:\ngit pull upstream main --ff-only\ngit pull origin main --ff-only\nIf you’ve followed our configuration advice, you don’t actually need to specify the remote and branch, because this branch is configured to pull from upstream. For the same reasons as before, it’s a good idea to include the --ff-only flag. If you have made local commits to main, this will surface that problem, which is solved in the next section.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-upstream-changes-into-fork.html#sec-touched-main",
    "href": "workflows-upstream-changes-into-fork.html#sec-touched-main",
    "title": "32  Get upstream changes for a fork",
    "section": "\n32.5 Um, what if I did touch main?",
    "text": "32.5 Um, what if I did touch main?\nI told you not to!\nBut OK here we are.\nLet’s imagine this is the state of main (or whatever the default branch is called) in the source repo OWNER/REPO:\n... -- A -- B -- C -- D -- E -- F\nand and this is the state of the main branch in your local copy:\n... -- A -- B -- C -- X -- Y -- Z\nThe two histories agree, up to commit or state C, then they diverge.\nIf you want to preserve the work in commits X, Y, and Z, create a new branch right now, with tip at Z, like so, but substituting your preferred branch name:\ngit checkout -b my-great-innovations\nThis safeguards your great innovations from commits X, Y, and Z. Now checkout main again:\ngit checkout main\nI now assume you have either preserved the work in X, Y, and Z (with a branch) or have decided to let it go.\nDo a hard reset of the main branch to C.\ngit reset --hard C\nYou will have to figure out how to convey C in Git-speak. Specify it relative to HEAD or provide the SHA. See future link about time travel for more support.\n\nThe history of your main branch is now compatible with its history in OWNER/REPO. The instructions above for pulling changes from upstream should now work. A fast-forward-only pull should succeed.\ngit pull upstream main --ff-only\nAnd now your local history for main should match that in the source repo:\n... -- A -- B -- C -- D -- E -- F\nIf you chose to create a branch with your work, you will also have that locally:\n... -- A -- B -- C -- D -- E -- F (main)\n                   \\\n                    -- X -- Y -- Z (my-great-innovations)\nIf you pushed your alternative history (with commits X, Y, and Z) to your fork YOU/REPO and you like keeping everything synced up, you will also need to force push main to the origin remote:\ngit push --force origin main\nWe really, really don’t like discussing force pushes in Happy Git, though. We only do so here, because we are talking about a fork, which is fairly easy to replace if things go sideways.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Get upstream changes for a fork</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html",
    "href": "workflows-explore-extend-pull-request.html",
    "title": "33  Explore and extend a pull request",
    "section": "",
    "text": "33.1 Update from the future\nThe lessons learned here eventually lead to the pr_*() family of functions in usethis. pr_fetch() and pr_push() are now my workhorses for exploring and extending PRs. You can read more about usethis’s functions to help with pull requests in their very own article: Pull request helpers.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html#terminology",
    "href": "workflows-explore-extend-pull-request.html#terminology",
    "title": "33  Explore and extend a pull request",
    "section": "\n33.2 Terminology",
    "text": "33.2 Terminology\nVocabulary I use throughout.\nfork branch The name of the branch in the fork from which the PR was made. Best case scenario: informative name like fix-fluffy-bunny. Worst case scenario: PR is from master.\nlocal PR branch The name of the local branch you’ll use to work with the PR. Best case scenario: can be same as fork branch. Worse case scenario: PR is from master, so you must make up a new name based on something about the PR, e.g. pr-666 or janedoe-master.\nPR parent The SHA of the commit in the main repo that is the base for the PR.\nPR remote The SSH or HTTPS URL for the fork from which the PR was made. Or the nickname of the remote, if you’ve bothered to set that up.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html#official-github-advice-version-1",
    "href": "workflows-explore-extend-pull-request.html#official-github-advice-version-1",
    "title": "33  Explore and extend a pull request",
    "section": "\n33.3 Official GitHub advice, Version 1",
    "text": "33.3 Official GitHub advice, Version 1\nEvery PR on GitHub has a link to “command line instructions” on how to merge the PR locally via command line Git. On this journey, there is a point at which you can pause and explore the PR locally.\nHere are their steps with my vocabulary and some example commands:\n\n\nCreate and check out the local PR branch, anticipating its relationship to the fork branch. Template of the Git command, plus an example of how it looks under both naming scenarios:\n# Template of the Git command\ngit checkout -b LOCAL_PR_BRANCH master \n# How it looks under both naming scenarios\ngit checkout -b fix-fluffy-bunny master \ngit checkout -b janedoe-master master \n\n\nPull from the fork branch of the PR remote:\n# Template of the Git command\ngit pull REMOTE FORK_PR_BRANCH\n# How it looks under both naming scenarios\ngit pull https://github.com/janedoe/yourpackage.git fix-fluffy-bunny\ngit pull https://github.com/janedoe/yourpackage.git master\n\nSatisfy yourself that all is well and you want to merge.\n\nCheckout master:\ngit checkout master\n\n\nMerge the local PR branch into master with --no-ff, meaning “no fast forward merge”. This ensures you get a true merge commit, with two parents.\n# Template of the Git command\ngit merge --no-ff LOCAL_PR_BRANCH\n# How it looks under both naming scenarios\ngit merge --no-ff fix-fluffy-bunny\ngit merge --no-ff janedoe-master\n\n\nPush master to GitHub.\ngit push origin master\n\n\nWhat’s not to like? The parent commit of the local PR branch will almost certainly not be the parent commit of the fork PR branch, where the external contributor did their work. This often means you get merge conflicts in git pull, which you’ll have to deal with ASAP. The older the PR, the more likely this is and the hairier the conflicts will be.\nI would prefer to deal with the merge conflicts only after I’ve vetted the PR and to resolve the conflicts locally, not on GitHub. So I don’t use this exact workflow.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html#official-github-advice-version-2",
    "href": "workflows-explore-extend-pull-request.html#official-github-advice-version-2",
    "title": "33  Explore and extend a pull request",
    "section": "\n33.4 Official GitHub advice, Version 2",
    "text": "33.4 Official GitHub advice, Version 2\nGitHub has another set of instructions: Checking out pull requests locally\nIt starts out by referring to the Version 1 instructions, but goes on to address an inactive pull request”, defined as a PR “whose owner has either stopped responding, or, more likely, has deleted their fork”.\nThis workflow may NOT give the original PR author credit (next time it’s easy to test this, I’ll update with a definitive answer). I’ve never used it verbatim because I’ve never had this exact problem re: deleted fork.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html#official-github-advice-version-3",
    "href": "workflows-explore-extend-pull-request.html#official-github-advice-version-3",
    "title": "33  Explore and extend a pull request",
    "section": "\n33.5 Official GitHub advice, Version 3",
    "text": "33.5 Official GitHub advice, Version 3\nGitHub has yet another set of instructions: Committing changes to a pull request branch created from a fork\nThe page linked above explains all the pre-conditions, but the short version is that a maintainer can probably push new commits to a PR, effectively pushing commits to a fork. Strange, but true!\nThis set of instructions suggests that you clone the fork, checkout the branch from which the PR was made, make any commits you wish, and then push. Any new commits you make will appear in the PR. And then you could merge.\nMy main takeaway: maintainer can push to the branch of a fork associated with a PR.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-explore-extend-pull-request.html#a-workflow-i-once-used",
    "href": "workflows-explore-extend-pull-request.html#a-workflow-i-once-used",
    "title": "33  Explore and extend a pull request",
    "section": "\n33.6 A workflow I once used",
    "text": "33.6 A workflow I once used\nThe lessons learned here eventually lead to the pr_*() family of functions in usethis. pr_fetch() and pr_push() are now my workhorses for exploring and extending PRs. You can read more about usethis’s functions to help with pull requests in their very own article: Pull request helpers.\nThis combines ideas from the three above approaches, but with a few tweaks. I am sketching this up in R code, with the hope of putting this into a function and package at some point. This is a revision of an earlier approach, based on feedback from Jim Hester.\nExample of a PR from the master branch (suboptimal but often happens) from fictional GitHub user abcde on usethis.\n\nlibrary(git2r)\n\n## add the pull requester's fork as a named remote\nremote_add(name = \"abcde\", url = \"git@github.com:abcde/usethis.git\")\n\n## fetch\nfetch(name = \"abcde\")\n\n## list remote branches and isolate the one I want\nb &lt;- branches(flags = \"remote\")\nb &lt;- b[[\"abcde/master\"]]\n\n## get the SHA of HEAD on this branch\nsha &lt;- branch_target(b)\n\n## create local branch\nbranch_create(commit = lookup(sha = sha), name = \"abcde-master\")\n\n## check it out\ncheckout(object = \".\", branch = \"abcde-master\")\n\n## set upstream tracking branch\nbranch_set_upstream(repository_head(), name = \"abcde/master\")\n\n## confirm upstream tracking branch\nbranch_get_upstream(repository_head())\n\n## make one or more commits here\n\n## push to the branch in the fork and, therefore, into the PR\npush()",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Explore and extend a pull request</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html",
    "href": "workflows-make-github-repo-browsable.html",
    "title": "34  Make a GitHub repo browsable",
    "section": "",
    "text": "34.1 Be savvy about your files\nKeep files in the plainest, web-friendliest form that is compatible with your main goals. Plain text is the very best. GitHub offers special handling for certain types of files:",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#be-savvy-about-your-files",
    "href": "workflows-make-github-repo-browsable.html#be-savvy-about-your-files",
    "title": "34  Make a GitHub repo browsable",
    "section": "",
    "text": "Markdown files, which may be destined for conversion into, e.g., HTML\nMarkdown files named README.md\n\nHTML files, often the result of compiling Markdown files\nSource code, such as .R files\nDelimited files, such as CSVs and TSVs\nPNG files",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#get-over-your-hang-ups-re-committing-derived-products",
    "href": "workflows-make-github-repo-browsable.html#get-over-your-hang-ups-re-committing-derived-products",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.2 Get over your hang ups re: committing derived products",
    "text": "34.2 Get over your hang ups re: committing derived products\nLet’s acknowledge the discomfort some people feel about putting derived products under version control. Specifically, if you’ve got an R Markdown document foo.Rmd, it can be knit() to produce the intermediate product foo.md, which can be converted to the ultimate output foo.html. Which of those files are you “allowed” to put under version control? Source-is-real hardliners will say only foo.Rmd but pragmatists know this can be a serious bummer in real life. Just because I can rebuild everything from scratch, it doesn’t mean I want to.\nThe taboo of keeping derived products under version control originates from compilation of binary executables from source. Software built on a Mac would not work on Windows and so it made sense to keep these binaries out of the holy source code repository. Also, you could assume the people with access to the repository have the full development stack and relish opportunities to use it. None of these arguments really apply to the foo.Rmd --&gt; foo.md --&gt; foo.html workflow. We don’t have to blindly follow traditions from the compilation domain!\nIn fact, looking at the diffs for foo.md or foo-figure-01.png can be extremely informative. This is also true in larger data analytic projects after a make clean; make all operation. By looking at the diffs in the downstream products, you often catch unexpected changes. This can tip you off to changes in the underlying data and/or the behavior of packages you depend on.\nThis chapter explores cool things GitHub can do with various file types, if they happen to end up in your repo. I won’t ask you how they got there.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#markdown",
    "href": "workflows-make-github-repo-browsable.html#markdown",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.3 Markdown",
    "text": "34.3 Markdown\nYou will quickly discover that GitHub renders Markdown files very nicely. By clicking on foo.md, you’ll get a decent preview of foo.html. Yay! You should read GitHub’s own guide on how to leverage automatic Markdown rendering.\nExploit this aggressively. Make Markdown your default format for narrative text files and use them liberally to embed notes to yourself and others in a repository hosted on Github. It’s an easy way to get pseudo-webpages inside a project “for free”. You may never even compile these files to HTML explicitly; in many cases, the HTML preview offered by GitHub is all you ever need.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#r-markdown",
    "href": "workflows-make-github-repo-browsable.html#r-markdown",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.4 R Markdown",
    "text": "34.4 R Markdown\nWhat does this mean for R Markdown files? Keep intermediate Markdown. Or only render to Markdown. Commit both foo.Rmd and foo.md, even if you choose to .gitignore the final product, e.g. foo.html or foo.pdf or foo.docx. From September 2014, GitHub renders R Markdown files nicely, like Markdown, and with proper syntax highlighting, which is great. But, of course, the code blocks just sit there un-executed, so my advice about keeping Markdown still holds.\nIf your target output format is not Markdown, you want YAML frontmatter that looks something like this for .Rmd:\n---\ntitle: \"Something fascinating\"\nauthor: \"Jenny Bryan\"\ndate: \"`r format(Sys.Date())`\"\noutput:\n  html_document:\n    keep_md: TRUE\n---\nor like this for .R:\n#' ---\n#' title: \"Something fascinating\"\n#' author: \"Jenny Bryan\"\n#' date: \"`r format(Sys.Date())`\"\n#' output:\n#'   html_document:\n#'     keep_md: TRUE\n#' ---\nThe keep_md: TRUE part says to keep the intermediate Markdown. In RStudio, when editing .Rmd, click on the gear next to “Knit HTML” for YAML authoring help.\nSince 2016, rmarkdown offers a custom output format for GitHub-flavored markdown, github_document. Read about R Markdown workflows for explicit examples of how to use this. If Markdown is your target output format, your YAML can be even simpler and look like this for .Rmd:\n---\noutput: github_document\n---\nor like this for .R:\n#' ---\n#' output: github_document\n#' ---\nFor a quick, stand-alone document that doesn’t fit neatly into a repository or project (yet), make it a Gist. Example: Hadley Wickham’s advice on what you need to do to become a data scientist. Gists can contain multiple files, so you can still provide the R script or R Markdown source and the resulting Markdown, as I’ve done in this write-up of Twitter-sourced tips for cross-tabulation. I’ve collected YAML examples for all the above scenarios in a gist.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#readme.md",
    "href": "workflows-make-github-repo-browsable.html#readme.md",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.5 README.md\n",
    "text": "34.5 README.md\n\nYou probably already know that GitHub renders README.md at the top-level of your repo as the de facto landing page. This is analogous to what happens when you point a web browser at a directory instead of a specific web page: if there is a file named index.html, that’s what the server will show you by default. On GitHub, files named README.md play exactly this role for directories in your repo.\nImplication: for any logical group of files or mini project-within-your-project, create a sub-directory in your repository. And then create a README.md file to annotate these files, collect relevant links, etc. Now when you navigate to the sub-directory on GitHub the nicely rendered README.md will simply appear. The GitHub repo that backs the gapminder data package has a README in the data-raw subdirectory that explains exactly how the package data is created. In fact, it is generated programmatically from README.Rmd.\nSome repositories consist solely of README.md. Examples: Jeff Leek’s write-ups on How to share data with a statistician or Developing R packages. I am becoming a bigger fan of README-only repos than gists because repo issues trigger notifications, whereas comments on gists do not.\nIf you’ve got a directory full of web-friendly figures, such as PNGs, you can use code like this to generate a README.md for a quick DIY gallery, as Karl Broman has done with his FruitSnacks. I did same for all the fantastic O RLY book covers made by The Practical Dev.\nI have also used this device to share Keynote slides on GitHub (mea culpa!). Export them as PNGs images and throw ’em into a README gallery: slides on file organization and some on file naming.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#finding-stuff",
    "href": "workflows-make-github-repo-browsable.html#finding-stuff",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.6 Finding stuff",
    "text": "34.6 Finding stuff\nOK these are pure GitHub tips but if you’ve made it this far, you’re obviously a keener.\n\nPress t to activate the file finder whenever you’re in a repo’s file and directory view. AWESOME, especially when there are files tucked into lots of subdirectories.\nPress y to get a permanent link when you’re viewing a specific file. Watch what changes in the URL. This is important if you are about to link to a file or to specific lines. Otherwise your links will break easily in the future. If the file is deleted or renamed or if lines get inserted or deleted, your links will no longer point to what you intended. Use y to get links that include a specific commit in the URL.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#html",
    "href": "workflows-make-github-repo-browsable.html#html",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.7 HTML",
    "text": "34.7 HTML\nIf you have an HTML file in a GitHub repository, simply visiting the file shows the raw HTML. Here’s a nice ugly example:\n\nhttps://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/bit003_api-key-env-var.html\n\nNo one wants to look at that. You can provide this URL to rawgit.com to serve this HTML more properly and get a decent preview.\nYou can form two different types of URLs with rawgit.com:\n\n\nFor sharing low-traffic, temporary examples or demos with small numbers of people, do this:\n\nhttps://rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html\nBasically: replace https://github.com/ with https://rawgit.com/\n\n\n\nFor use on production websites with any amount of traffic, do this:\n\nhttps://cdn.rawgit.com/STAT545-UBC/STAT545-UBC.github.io/master/bit003_api-key-env-var.html\nBasically: replace https://github.com/ with https://cdn.rawgit.com/\n\n\n\n2018-10-09 update: RawGit announced that it is in a sunset phase and will soon shut down. They recommended: jsDelivr, GitHub Pages, CodeSandbox, and unpkg as alternatives.\nThis sort of enhanced link might be one of the useful things to put in a README.md or other Markdown file in the repo.\nYou may also want to check out this Chrome extension or GitHub & BitBucket HTML Preview, though recently I’ve more success with rawgit.com. (Neither work with private GitHub repos, which is all the more reason to keep intermediate markdown files for HTML, as described above.)\nSometimes including HTML files will cause GitHub to think that your R repository is HTML. Besides being slightly annoying, this can make it difficult for people to find your work if they are searching specifically for R repos. You can exclude these files or directories from GitHub’s language statistics by adding a .gitattributes file that marks them as ‘documentation’ rather than code. See an example here.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#source-code",
    "href": "workflows-make-github-repo-browsable.html#source-code",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.8 Source code",
    "text": "34.8 Source code\nYou will notice that GitHub does automatic syntax highlighting for source code. For example, notice the coloring of this R script. The file’s extension is the primary determinant for if/how syntax highlighting will be applied. You can see information on recognized languages, the default extensions and more at github/linguist. You should be doing it anyway, but let this be another reason to follow convention in your use of file extensions.\nNote you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#delimited-files",
    "href": "workflows-make-github-repo-browsable.html#delimited-files",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.9 Delimited files",
    "text": "34.9 Delimited files\nGitHub will nicely render tabular data in the form of .csv (comma-separated) and .tsv (tab-separated) files. You can read more in the blog post announcing this feature in August 2013 or in this GitHub help page.\nAdvice: take advantage of this! If something in your repo can be naturally stored as delimited data, by all means, do so. Make the comma or tab your default delimiter and use the file suffixes GitHub is expecting. I have noticed that GitHub is more easily confused than R about things like quoting, so always inspect the GitHub-rendered .csv or .tsv file in the browser. You may need to do light cleaning to get the automagic rendering to work properly. Think of it as yet another way to learn about imperfections in your data.\nHere’s an example of a tab delimited file on GitHub: lotr_clean.tsv, originally found here (nope, IBM shut down manyeyes July 2015).\nNote you can click on “Raw” in this context as well, to get just the plain text and nothing but the plain text.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#pngs",
    "href": "workflows-make-github-repo-browsable.html#pngs",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.10 PNGs",
    "text": "34.10 PNGs\nPNG is the “no brainer” format in which to store figures for the web. But many of us like a vector-based format, such as PDF, for general purpose figures. Bottom line: PNGs will drive you less crazy than PDFs on GitHub. To reduce the aggravation around viewing figures in the browser, make sure to have a PNG version in the repo.\nExamples:\n\n\nThis PNG figure just shows up in the browser\nA different figure stored as PDF produces the dreaded, annoying “View Raw” speed bump. You’ll have to click through and, on my OS + browser, wait for the PDF to appear in an external PDF viewer. 2015-06-19 update: since I first wrote this GitHub has elevated its treament of PDFs so YAY. It’s slow but it works.\n\n\nHopefully we are moving towards a world where you can have “web friendly” and “vector” at the same time, without undue headaches. As of October 2014, GitHub provides enhanced viewing and diffing of SVGs. So don’t read this advice as discouraging SVGs. Make them! But consider keeping a PNG around as emergency back up for now.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#other-document-formats",
    "href": "workflows-make-github-repo-browsable.html#other-document-formats",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.11 Other document formats",
    "text": "34.11 Other document formats\nYou may also have a document you want others to be able to browse and interact with, but it is not in the markdown format. Fortunately, the open-source Pandoc program, written by John MacFarlane, allows you to convert a range of formats into markdown, including the widely used .docx format.\nWhen you click the Knit button in RStudio it is actually Pandoc which performs the final conversion to HTML or Microsoft Word (.docx) formats. If you are willing to use the command-line, you can perform the opposite conversion (eg .docx to .md), commonly retaining features such as headings, tables, equations and even figures.\nAs some boilerplate, running in Windows PowerShell pandoc --extract-media .\\media  -f docx .\\example.docx -t markdown_github -o example_image.md converts a word document called example.docx to markdown, and extracts the images into a directory which corresponds to a filepath in the newly created example.md document. A full list of supported formats and example code for conversions are available at https://pandoc.org/.\nYou can also perform simple conversions to GitHub-flavored markdown from different markdown flavours (Pandoc supports markdown_mmd, markdown_php_extra and markdown_strict) from within RStudio. To do so you need to rename the file by changing the extension (eg from foo.md to foo.Rmd), then open the renamed file in RStudio and add the following text to the top of the document.\n---\noutput: github_document\n---\nYou can then click on “Knit” then “Knit to github document” to perform the conversion. See Output format for more details of controlling output formats with the YAML frontmatter.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#linking-to-a-zip-archive-of-your-repo",
    "href": "workflows-make-github-repo-browsable.html#linking-to-a-zip-archive-of-your-repo",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.12 Linking to a ZIP archive of your repo",
    "text": "34.12 Linking to a ZIP archive of your repo\nThe browsability of GitHub makes your work accessible to people who care about your content but who don’t (yet) use Git themselves. What if such a person wants all the files? Yes, there is a clickable “Download ZIP” button offered by GitHub. But what if you want a link to include in an email or other document? If you add /archive/master.zip to the end of the URL for your repo, you construct a link that will download a ZIP archive of your repository. Click here to try this out on a very small repo:\nhttps://github.com/jennybc/lotr/archive/master.zip\nGo look in your downloads folder!",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#links-and-embedded-figures",
    "href": "workflows-make-github-repo-browsable.html#links-and-embedded-figures",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.13 Links and embedded figures",
    "text": "34.13 Links and embedded figures\n\nTo link to another page in your repo, just use a relative link: [admin](courseAdmin/) will link to the courseAdmin/ directory inside the current directory. [admin](/courseAdmin/) will link to the top-level courseAdmin/ directory from any where in the repo\nThe same idea also works for images. ![](image.png) will include image.png located in the current directory",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "workflows-make-github-repo-browsable.html#let-people-correct-you-on-the-internet",
    "href": "workflows-make-github-repo-browsable.html#let-people-correct-you-on-the-internet",
    "title": "34  Make a GitHub repo browsable",
    "section": "\n34.14 Let people correct you on the internet",
    "text": "34.14 Let people correct you on the internet\nThey love that!\nYou can create a link that takes people directly to an editing interface in the browser. Behind the scenes, assuming the click-er is signed into GitHub but is not you, this will create a fork in their account and send you a pull request. When I click the link below, I am able to actually commit directly to master for this repo.\nCLICK HERE to suggest an edit to this page!\nHere’s what that link looks like in the Markdown source:\n[CLICK HERE to suggest an edit to this page!](https://github.com/jennybc/happy-git-with-r/edit/master/workflows-make-github-repo-browsable.Rmd)\nand here it is with placeholders:\n[INVITATION TO EDIT](&lt;URL to your repo&gt;/edit/master/&lt;path to target source file&gt;)\nAFAIK, to do that in a slick automatic way across an entire repo/site, you need to be using Jekyll or some other automated system. But you could easily handcode such links on a small scale.",
    "crumbs": [
      "Daily Workflows",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Make a GitHub repo browsable</span>"
    ]
  },
  {
    "objectID": "prompt-clone.html",
    "href": "prompt-clone.html",
    "title": "35  Clone a repo",
    "section": "",
    "text": "Clone someone else’s repository on GitHub where you just want a copy. But you also want to track its evolution. That is what differentiates a GitHub clone from, say, simply downloading the ZIP archive at a specific point in time.\nPick a GitHub repository that interests you. Inspiration:\n\nan R package you care about\na data analytic project you find interesting\n\nExample: The GitHub repo that underpins Polygraphing’s blog post analyzing 2,000 screenplays is here: https://github.com/brandles/scripts\nExample: FiveThirtyEight shared the data and code behind their Gun Deaths in America project on GitHub: https://github.com/fivethirtyeight/guns-data. Have a look around their other repos as well.\n\n\nCreate a new RStudio Project from this GitHub repo. Refresh your memory of how to do that by re-visiting our “GitHub first” workflow in Chapter 15.\nOnce you have the code locally, try to run some of it. Try to understand how it works.\nDo you want to make a change? Fine do that!\nDo you want to send changes back to the original author? Now you have firsthand knowledge of when you should fork instead of clone. See Chapter 31.",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Clone a repo</span>"
    ]
  },
  {
    "objectID": "prompt-fork-pr-bingo.html",
    "href": "prompt-fork-pr-bingo.html",
    "title": "36  Create a bingo card",
    "section": "",
    "text": "Here’s a specific suggestion for practicing “fork and pull”.\nThe general workflow is laid out in Chapter 31.\nJenny and Dean have a repository that makes bingo cards with R:\n\nhttps://github.com/jennybc/bingo\nRead the README to learn more about it!\n\nYour mission:\n\nMaybe find a partner? Or a couple of partners?\nFork the bingo repo.\nClone it to someone’s local machine.\nCreate a new bingo card by making a file of possible squares.\n\nFollow the instructions in https://github.com/jennybc/bingo/blob/master/CONTRIBUTING.md to see how to contribute a new card.\nProtip: It’s easy to be very funny, but create a very difficult bingo card. Remember to include some easy stuff so people have a chance to bingo.\n\nIf you’re feeling virtuous, run the tests and check the package. Ask us for help! Or live dangerously and skip this.\nCommit!\nPush your changes back to your copy of the repo on GitHub.\nMake a pull request back to the main bingo repo.\nIf your card is appropriate, we’ll merge your request and it will become part of the package and available via the Shiny app.\n\nSpecial inspiration for useR:\n\nMake useR-specific conference bingo.\nSee this issue thread for lots of square ideas!\n\nhttps://github.com/jennybc/bingo/issues/4",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Create a bingo card</span>"
    ]
  },
  {
    "objectID": "prompt-burn-it-all-down.html",
    "href": "prompt-burn-it-all-down.html",
    "title": "37  Burn it all down",
    "section": "",
    "text": "This is a highly inelegant, but effective technique for disaster recovery.\nIt has been immortalized in an xkcd comic, so it must be ok:\n\nhttps://xkcd.com/1597/\nhttp://explainxkcd.com/wiki/index.php/1597:_Git\n\nBasic idea:\n\nCommit early and often.\nPush to a remote, like GitHub, often.\nThe state of things on GitHub is your new “worst case scenario”.\nIf you really screw things up locally, copy all the files (or the ones that have changed) to a safe place.\n\nUsually your files are JUST FINE. But it is easy to goof up the Git infrastructure when you’re new at this. And it can be hard to get that straightened out on your own.\n\nRename the existing local repo as a temporary measure, i.e. before you do something radical, like delete it.\nClone the repo from GitHub to your local machine. You are back to a happy state.\nCopy all relevant files back over from your safe space. The ones whose updated state you need to commit.\nStage and commit. Push.\nCarry on with your life.\n\nPractice this before you need it, so you see how it works.",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Burn it all down</span>"
    ]
  },
  {
    "objectID": "prompt-practice-resets.html",
    "href": "prompt-practice-resets.html",
    "title": "38  Resetting",
    "section": "",
    "text": "Practice recovering from mistakes.\nUse a repository you’ve created earlier in the tutorial for this. It only needs to be local, i.e. this does not involve GitHub.\nIf it’s not your most recent commit, seriously consider just letting that go. Just. Let. It. Go.\nSo you want to undo the last commit?\nIf “YES UNDO IT COMPLETELY”: git reset --hard HEAD^. You will lose any changes that were not reflected in the commit-before-last!\nIf “YES undo the commit, but leave the files in that state (but unstaged)”: git reset HEAD^. Your files will stay the same but the commit will be undone and nothing will be staged.\nIf “YES go right back to the moment before I committed”: git reset --soft HEAD^. Your files will stay the same but the commit will be undone. Even your staged changes will be restored.\nIf you just want to fiddle with the most recent commit or its message, you can amend it. You can do this from RStudio!\n\nMake the change you want and amend the commit.\nDo you only want to change the commit message?\n\nMake another small change. Surely you have a typo somewhere? Amend the commit, which gives you the chance to edit the message\n\n\nTo amend from the command line, using an editor to create the message:\ngit commit --amend\nTo amend from the command line, providing the new message:\ngit commit --amend -m \"New commit message\"\nGit Reset Demystified:\nhttps://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Resetting</span>"
    ]
  },
  {
    "objectID": "prompt-search-github.html",
    "href": "prompt-search-github.html",
    "title": "39  Search GitHub",
    "section": "",
    "text": "39.1 Basic resources\nGitHub searching\nRead-only mirror of R source by Winston Chang:\nRead-only mirror of all packages on CRAN by Gábor Csárdi:",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Search GitHub</span>"
    ]
  },
  {
    "objectID": "prompt-search-github.html#basic-resources",
    "href": "prompt-search-github.html#basic-resources",
    "title": "39  Search GitHub",
    "section": "",
    "text": "https://github.com/search/advanced\nhttps://help.github.com/articles/searching-code/\nhttps://help.github.com/articles/search-syntax/\n\n\n\nhttps://github.com/wch/r-source\n\n\n\nhttps://github.com/cran\nhttp://cran.github.io\nMETACRAN",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Search GitHub</span>"
    ]
  },
  {
    "objectID": "prompt-search-github.html#use-case",
    "href": "prompt-search-github.html#use-case",
    "title": "39  Search GitHub",
    "section": "39.2 Use case",
    "text": "39.2 Use case\nWhat if a function in a package has no examples? Or is poorly exampled? Wouldn’t it be nice to find functioning instances of it “in the wild”?\nVia Twitter, Noam Ross taught me a clever way to do such searches on GitHub. Put this into the GitHub search box to see how packages on CRAN use the llply() function from plyr:\n\"llply\" user:cran language:R\nOr just click here.\nAnother example that recently came up on r-package-devel:\nHow to see lots of examples of roxygen templates?\nThis search finds &gt;1400 examples of roxygen templates in the wild:\nhttps://github.com/search?q=man-roxygen+in%3Apath&type=Code&ref=searchresults",
    "crumbs": [
      "Activity prompts",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Search GitHub</span>"
    ]
  },
  {
    "objectID": "notes-intro.html",
    "href": "notes-intro.html",
    "title": "Notes",
    "section": "",
    "text": "This part holds content that is deprecated/stale, does not exist yet, or relates to bookdown mechanics.",
    "crumbs": [
      "Notes",
      "Notes"
    ]
  },
  {
    "objectID": "notes-classroom-overview.html",
    "href": "notes-classroom-overview.html",
    "title": "40  Run a course with GitHub",
    "section": "",
    "text": "40.1 Benefits\nFor the instructor\nFor the students",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Run a course with GitHub</span>"
    ]
  },
  {
    "objectID": "notes-classroom-overview.html#benefits",
    "href": "notes-classroom-overview.html#benefits",
    "title": "40  Run a course with GitHub",
    "section": "",
    "text": "If you already use Git/GitHub, it’s extremely efficient to use the same workflows to manage course materials, student work, and communication with students and TAs.\n\nWhen I switched to Git/GitHub and R Markdown, abandoning my old “system” of accepting all manner of stuff as email attachments? It was the first time I actually ran the code in my students’ final projects, because it was so easy to get it on my computer in an organized fashion. I even made some corrections as pull requests!\n\nIf you’re still in your early days with Git/GitHub, the sheer volume of operations and regular small deadlines will increase your mastery very quickly. Practice makes perfect! However, I would not recommend running a course on GitHub as your first substantial version control project.\n\n\n\nI have found that students adjust to Git/GitHub fairly quickly and genuinely like it. They find it gratifying to see their beautiful, figure-rich R Markdown reports up on the internet. Since it’s easy to expose their work within the class, we do a lot of peer review. I find that expertise spreads around the class like a virus. That applies to the main course substance as well as workflow.\nMany students are specifically interested in learning Git and GitHub, as a complement to the coding and analytical skills we teach in these courses. The fact that we use it for course mechanics kills two birds with one stone. Teaching the use of distributed version control is a valid pedagogical goal in and of itself.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Run a course with GitHub</span>"
    ]
  },
  {
    "objectID": "notes-classroom-overview.html#the-stat-545-student-setup",
    "href": "notes-classroom-overview.html#the-stat-545-student-setup",
    "title": "40  Run a course with GitHub",
    "section": "40.2 The STAT 545 student setup",
    "text": "40.2 The STAT 545 student setup\nGitHub’s Organizations/Teams and API have changed over the 3+ years we’ve been doing this, so my approach has evolved over time and is also shaped by hard experience.\nMajor points:\n\nCreate an Organization for the course.\n\nImmediately request an Education discount for the Organization, so that you get unlimited private repos.\n\nHave your students register for free, personal GitHub accounts.\n\nEncourage them to request an Education discount on their own behalf (aka “student developer pack”). But rest assured, nothing you need for your course machinery will depend on this.\n\nGet the GitHub usernames from your students – we use a Shiny app! – plus some shred of information that allows you link them back to your official course list.\nCreate a students Team and a TA Team. I make such teams for each run of the course, e.g. 2016_students and 2016_ta.\nInvite students to join your course organization and the students team. Ditto for TAs and the TA team.\nCreate a canonical name for each student, based on the official course list, i.e. lastname_firstname.\nCreate a repository for each student, using the student’s canonical name.\n\nThis is a private repository within the course Organization.\nI turn wikis off and either let GitHub auto-initialize or immediately push files, including a README, into the repos.\nGive the student team read or pull access to each student’s repo. Yes, this allows them to see each others work. I discuss this elsewhere.\nGive the TA team write or push access to each student’s repo.\nAdd the student as collaborator with write or push access.\nUnwatch these repos personally! Wow such notification.\n\n\nThat’s the setup! I use the gh and purrr packages to script all of this GitHub API work. In a second wave, I’ll post code snippets for the above operations.\nWhat you should NOT do (voice of experience, here):\nDo NOT allow students to create their own repositories.\n\nYou will have a naming convention and they will never, ever, ever follow it.\nYou need to have admin rights over their course repo, so you can manipulate it at will via the GitHub API. You will ask them to add you and the TAs as collaborators, but they will not all manage to execute this task.\nYou will want to do various bulk operations on the repos and your API work will be simpler if the repos belong to the same Organization vs looping over randomly named repos owned by random people, subject to their whims.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Run a course with GitHub</span>"
    ]
  },
  {
    "objectID": "notes-classroom-overview.html#the-homework-flow",
    "href": "notes-classroom-overview.html#the-homework-flow",
    "title": "40  Run a course with GitHub",
    "section": "40.3 The homework-flow",
    "text": "40.3 The homework-flow\nIn class, the students take possession of their repos, from RStudio via File &gt; New Project. They do the bulk of their coursework here: it is a directory on their computer, a Git repo associated with GitHub remote, and an RStudio project.\nTypically homework is done in R Markdown, using the github_document output format. They commit and push .Rmd, .md, and any necessary files, such a figures.\nHomework is submitted by opening an issue:\n\nIssue name is “Mark homework x of lastname_firstname”. OK not really, but I can dream.\nBody should contain SHA of their latest commit, tag(s) for the marking TA or the TA team, and, ideally, links to the file(s) to be marked.\n\nTAs leave feedback here. Actual marks are stored elsewhere and distributed via email. As the TAs mark, they close the issues.\nAfter homework submission, we randomly assign each student to review the work of two peers. Each peer review assignment takes the form of an issue, assigned to the reviewer. Students leave feedback for each other here. As the TAs mark, they read and assess these peer reviews (also marked!) and close the issues.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Run a course with GitHub</span>"
    ]
  },
  {
    "objectID": "notes-classroom-overview.html#github-as-course-management-system",
    "href": "notes-classroom-overview.html#github-as-course-management-system",
    "title": "40  Run a course with GitHub",
    "section": "40.4 GitHub as course management system",
    "text": "40.4 GitHub as course management system\n2017-05-29 This section was excised from an article I am writing. It is partially redundant with the above and the the two will be merged.\nSTAT 545 is a data wrangling and analysis course at the University of British Columbia. I was the instructor in charge for several years, which coincided with my own adoption of Git/GitHub. GitHub is used to manage the development of course material, to serve the course website, to create a discussion forum, and to host all student-submitted work.\nGiven that students must submit their work and provide peer review of others’ work via GitHub, the use of hosted version control is an explicit, though modest, part of the course. The website Happy Git and GitHub for the useR holds our battle-tested instructions for setup and early usage. The students achieve basic competence quite quickly and find it gratifying to see their formatted, figure-rich R Markdown reports up on the internet. Since it’s easy to expose their work within the class, we conduct peer review, which helps expertise to spread quickly through the group.\n\n40.4.1 Use a GitHub Organization\nGitHub Organizations are “shared accounts where groups of people can collaborate across many projects at once”. This is the most appropriate structure for stewarding course resources, since I can grant TAs and students different levels of access to various repositories. Access can be controlled at the individual user level or, more conveniently, for entire Teams. The TA Team shares write access with me on a private repository for internal matters. I provide each student with their own private repository for coursework and grant other members of the Students Team read access, in order to facilitate peer review. There is a public repository that underpins the course website (see below). We have one other public repository that exists solely so the Issues can be used as a discussion forum.\nGitHub actively encourages the use of its platform in teaching. As an instructor you can request a free Organization account that provides features normally available only on paid plans, such as private repositories. In fact, GitHub provides tooling for specific teaching workflows via GitHub Classroom, although I do not use it. That is not an intentional knock on their tools. I started teaching with GitHub several years before this existed and developed a different way of using the platform. I also find the GitHub Education resources to be geared more towards computer science than data science.\n\n\n40.4.2 GitHub Pages for course website\nAll course content is provided on the STAT 545 website. Each page is generated from an R Markdown document that is rendered to HTML locally using the rmarkdown package, retaining the intermediate Markdown. These pages are a mix of prose and rendered R code, reflecting the live coding done in class. All of these files and their history can be explored in the source repository. The TA team has permission to write to this repo, meaning they can (and do!) help me maintain the website. I rejoice that I am no longer the webmaster. We also get typo corrections and other input from the world at large, since this is entirely public.\nIf I were starting from scratch today, I would continue to use R Markdown, RStudio, and GitHub Pages (see below), but would upgrade to a more modern, automated approach to rendering the pages. I now recommend R Markdown websites, bookdown, or blogdown to manage the process of creating a static website from a large and inter-related set of .Rmd files.\nGitHub offers several ways to host a website directly from a repository, collectively known as GitHub Pages. The STAT 545 website is a very simple Organization Page that uses a custom domain, stat545.com, instead of the default orgname.github.io.\nThis system for managing course content is a great example of integrating the doing of work and the sharing of it. We analyze data live in class, using R, based on the scripts on the website. I re-render the associated .R or .Rmd, commit the changed files, push, and see it reflected right away on http://stat545.com. There is no separation between having an idea, implementing it, and posting on the website.\n\n\n40.4.3 Student-specific private repos\nEarly in the course I elicit GitHub usernames for registered students, via a Shiny app, and invite them to join the course Organization. I then create one private repository per student, in the STAT 545 Organization. The targeted student has write access and the other students have read access. This is somewhat controversial, due to the possibility of cheating, but I have seen more pros than cons for this setup, in the STAT 545 context. In other settings, I have also used one repo per student per homework assignment, which allows you to keep the repos completely private until homework submission, then increase their visibility during marking and peer review. Some courses will work better with one model or the other.\nEach student does their work in this repo, submitting a major assignment approximately once a week. The first assignment is simply to claim the repository and create a README, which proves they have all the relevant software setup and they can write a little Markdown. Each week we tackle some new data analysis or wrangling task, with increasing latitude for independence. Homework is implemented in R Markdown documents, rendered to Markdown, and pushed to GitHub. Students submit their work by opening an issue in their repo, naming the assignment in the title, providing the SHA of the associated final commit, and linking to the main .md file. We leave feedback as comments in the issue thread or, occasionally, propose changes to code via “pull requests”. Two peers are selected at random to review each assignment, a process that we also implement via GitHub Issues.\nAt the end of term, the student (and their instructor!) can visit the repo to find an organized, navigable sequence of ~10 assignments. Each student leaves with self-written documentation of everything they’ve done, ready to consult in future projects. The last assignments require writing an R package or Shiny app, which they generally do in public repositories under their own accounts. They finish STAT 545 with several months of Git/GitHub experience and the start of a data science portfolio.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Run a course with GitHub</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html",
    "href": "notes-ideas.html",
    "title": "41  Ideas for content",
    "section": "",
    "text": "41.1 Common workflow questions",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html#common-workflow-questions",
    "href": "notes-ideas.html#common-workflow-questions",
    "title": "41  Ideas for content",
    "section": "",
    "text": "41.1.1 Common predicaments and how to recover/avoid\nhttps://twitter.com/JennyBryan/status/743457387730735104\n\n\n41.1.2 Keep something out of Git\nList it in .gitignore.\n\n\n41.1.3 I didn’t mean to commit that\nCommitting things you didn’t mean to (too big, secret). How to undo.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html#git-stuff",
    "href": "notes-ideas.html#git-stuff",
    "title": "41  Ideas for content",
    "section": "41.2 git stuff",
    "text": "41.2 git stuff\nGit explainers, heavy on the diagrams\nhttps://twitter.com/JennyBryan/status/743548245645791232\nA Visual Git Reference\nhttp://marklodato.github.io/visual-git-guide/index-en.html\nA successful Git branching model\nhttp://nvie.com/posts/a-successful-git-branching-model/\nA successful Git branching model considered harmful\nhttps://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/\nGit Tutorials from Atlassian https://www.atlassian.com/git/tutorials/\nSoftware Carpentry Git Novice Lesson\nhttp://swcarpentry.github.io/git-novice/\nMichael Freeman slides on Git collaboration\nhttp://slides.com/michaelfreeman/git-collaboration#/\nGitHub Training materials\nhttps://services.github.com/kit/\nGit for Ages 4 and Up\nhttps://www.youtube.com/watch?v=3m7BgIvC-uQ\nLearn Git Branching\nhttp://learngitbranching.js.org\nA Git Workflow Walkthrough Series http://vallandingham.me/git-workflow.html\n\nPart 1: Feature Branches\nPart 2: Reviewing Pull Requests\nPart 3: Reviewing Pull Requests Locally\nPart 4: Merging Pull Requests\n\nGit from the inside out\nhttps://codewords.recurse.com/issues/two/git-from-the-inside-out",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html#disaster-recovery",
    "href": "notes-ideas.html#disaster-recovery",
    "title": "41  Ideas for content",
    "section": "41.3 Disaster recovery",
    "text": "41.3 Disaster recovery\nhttp://stackoverflow.com/questions?sort=votes\nBreak it down:\n\nIs something wrong with my filesystem/files?\nIs my git repo messed up?\nHow can I keep this from happening again?\n\nRebase avoidance techniques.\nHeadless state. Rebase hell.\nWhat to do when you can’t, e.g., switch branches. Stashing and WIP commits.",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html#engage-with-r-source-on-github",
    "href": "notes-ideas.html#engage-with-r-source-on-github",
    "title": "41  Ideas for content",
    "section": "41.4 Engage with R source on GitHub",
    "text": "41.4 Engage with R source on GitHub\nBrowsing\nSearching\n\nMy gist, re: the cran user: https://gist.github.com/jennybc/4a1bf4e9e1bb3a0a9b56\n\nBeing a useful useR\n\nstay informed re: development\nuse issues for bug reports, feature requests\nmake pull requests",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "notes-ideas.html#workflow-and-psychology",
    "href": "notes-ideas.html#workflow-and-psychology",
    "title": "41  Ideas for content",
    "section": "41.5 Workflow and psychology",
    "text": "41.5 Workflow and psychology\nStress of working in the open\nWorkflows for group of 1, 2, 5, 10\n\nFork and Pull vs Shared Repository\n\nhttps://help.github.com/articles/about-collaborative-development-models/\nhttps://help.github.com/articles/using-pull-requests/",
    "crumbs": [
      "Notes",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Ideas for content</span>"
    ]
  },
  {
    "objectID": "shell.html",
    "href": "shell.html",
    "title": "Appendix A — The shell",
    "section": "",
    "text": "A.1 What is the shell?\nThe shell is a program on your computer whose job is to run other programs. Pseudo-synonyms are “terminal”, “command line”, and “console”. There’s a whole StackExchange thread on the differences (What is the difference between Terminal, Console, Shell, and Command Line?), but I don’t find it to be terribly enlightening. Your mileage may vary.\nMany programmers spend lots of time in a shell, as opposed to in GUIs, because it is very fast, concise, and ubiquitous in their relevant computing environments. This is how all work was done before we got the mouse and GUIs.\nThe most common shell is bash and it gets thrown around as a proxy for “shell” sometimes, just like “Coke” and “Kleenex” are proxies for cola and tissues.\nIn Happy Git, sometimes we demo the use of a shell for certain tasks, like navigating the file system and doing Git operations, when we don’t want to or can’t use RStudio. Providing shell commands is also less ambiguous and less perishable than describing human interactions with a GUI.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>The shell</span>"
    ]
  },
  {
    "objectID": "shell.html#starting-the-shell",
    "href": "shell.html#starting-the-shell",
    "title": "Appendix A — The shell",
    "section": "A.2 Starting the shell",
    "text": "A.2 Starting the shell\n\nA.2.1 From within RStudio\nYou can launch a shell from RStudio. This is often handy, because RStudio makes every effort to put you in a sane working directory, i.e. in the current project.\nThere are two ways:\n\nTools &gt; Terminal launches a shell within RStudio, graphically and process-wise. I believe this is usually what you want.\nTools &gt; Shell … launches a shell external to RStudio.\n\n\n\nA.2.2 Outside of RStudio\n\nA.2.2.1 macOS\nThe shell is often called the “terminal” on macOS, by which people mean Terminal.app. One way to launch is via Spotlight Search. Type Command + space and start typing “terminal”. This process will something like so:\n\nTerminal.app is typically located at /Applications/Utilities/Terminal.app.\nOpening Terminal.app brings you to a bash shell opened to your home directory ~/, which is shorthand for /Users/YOURUSERNAME. You should see something like this:\n\nIf you have administrative rights on your computer, prefacing any command with sudo will allow you to run the command as an administrator. Expect to be challenged for your password. If you need to change administrative privileges or your password, see this article from Apple.\n\n\nA.2.2.2 Windows\nWe defer this until the next section, due to the more complex shell situation on Windows.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>The shell</span>"
    ]
  },
  {
    "objectID": "shell.html#sec-windows-shell-hell",
    "href": "shell.html#sec-windows-shell-hell",
    "title": "Appendix A — The shell",
    "section": "A.3 Windows is special … and not in a good way",
    "text": "A.3 Windows is special … and not in a good way\nWindows is not the ideal platform for scientific computing and software development. A lot of the functionality is going to feel janky and strapped on. Because it is.\nThere are no fewer than 4 possible shells you can end up in. Unless you know better, you almost certainly want to be in a Git Bash shell, especially here in Happy Git.\nWindows users will want to understand the different types of shell, how to launch them, and how to tell which one you’re in.\n\nA.3.1 Git Bash\nTL;DR how to tell if you’re in a Git Bash shell? Do this:\n$ echo $SHELL\n/usr/bin/bash\nGit Bash is a bash shell that ships with Git for Windows, which is the Happy Git way to install Git on Windows. Therefore, you will not have Git Bash on your system until you install Git for Windows.\nGit Bash is always the Windows shell we are targeting in Happy Git instructions.\nRStudio should automatically detect the presence of Git Bash. You can inspect and influence this directly via Tools &gt; Global Options &gt; Terminal. Unless you have good reason to do otherwise, you want to see “Git Bash” in the “New terminals open with …” dropdown menu.\n\nTroubleshooting tips:\n\nRestart RStudio. You need to restart all instances of RStudio after installing Git for Windows (+ Git Bash), in order for RStudio to auto-detect Git Bash.\nUpdate RStudio. The shell handling in RStudio has improved dramatically over time, so older versions might not behave as described here.\n\n\nA.3.1.1 Accessing Git Bash outside of RStudio\nSometimes you want to run Git Bash outside of RStudio. Here’s the easiest way: click the “Git” menu in the Windows menu and select “Git Bash”.\n\nA Git Bash shell running outside of RStudio looks something like this:\n\nNotice MSYS in the title bar. You might also see MINGW64.\nSometimes you need to run Git Bash as administrator, e.g. to run with higher privileges. Easiest way: click the “Git” menu in the Windows menu and right-click on “Git Bash”. This reveals a submenu. Select “more” and then “Run as administrator”.\n\n\n\n\nA.3.2 Command prompt\nTL;DR how to tell if you’re in Command Prompt? Do this:\nC:\\Users\\jenny&gt;echo %COMSPEC%\nC:\\WINDOWS\\system32\\cmd.exe\nThis is the native Windows command line interpreter. It’s rarely what you want, especially for the work described in Happy Git.\nA Command Prompt session running outside of RStudio looks something like this:\n\nNotice the cmd.exe in the title bar, although it is not always present. You might also see “Command Prompt”.\nIf you get an error message such as 'pwd' is not recognized as an internal or external command, operable program or batch file. from a shell command, that suggests you have somehow launched into cmd.exe when you did not mean to.\n\n\nA.3.3 PowerShell\nTL;DR how to tell if you’re in PowerShell? Do this:\nPS C:\\Users\\jenny&gt; Get-ChildItem Env:ComSpec\n\nName                           Value\n----                           -----\nComSpec                        C:\\WINDOWS\\system32\\cmd.exe\nPowerShell is yet another Windows shell, a more modern successor to Command Prompt. It’s also rarely what you want, especially for the work described in Happy Git.\nA PowerShell session running outside of RStudio looks something like this:\n\nNotice the powershell.exe in the title bar.\n\n\nA.3.4 Bash via Windows Services for Linux\nTL;DR how to tell if you’re in Bash via WSL? Do this:\n$ echo $SHELL\n/bin/bash\nIn 2016, Microsoft launched the Windows Subsystem for Linux (WSL), “a new Windows 10 feature that enables you to run native Linux command-line tools directly on Windows”. Overall, this is a fantastic development. However, at the time of writing (January 2019), you will only have this if you’re running Windows 10 64-bit and have chosen to install the optional WSL system component. Therefore, I expect only keeners to have this and, in that case, you probably don’t need this chapter.\nA WSL bash shell running outside of RStudio looks something like this:\n\nFYI Microsoft also refers to WSL as Bash on Ubuntu on Windows.\n\nA.3.4.1 Windows bottom line\nWhen in doubt, you probably want to be in a Git Bash shell.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>The shell</span>"
    ]
  },
  {
    "objectID": "shell.html#basic-shell-commands",
    "href": "shell.html#basic-shell-commands",
    "title": "Appendix A — The shell",
    "section": "A.4 Basic shell commands",
    "text": "A.4 Basic shell commands\nThe most basic commands are listed below:\n\npwd (print working directory). Shows directory or “folder” you are currently operating in. This is not necessarily the same as the R working directory you get from getwd().\nls (list files). Shows the files in the current working directory. This is equivalent to looking at the files in your Finder/Explorer/File Manager. Use ls -a to also list hidden files, such as .Rhistory and .git.\ncd (change directory). Allows you to navigate through your directories by changing the shell’s working directory. You can navigate like so:\n\ngo to subdirectory foo of current working directory: cd foo\ngo to parent of current working directory: cd ..\ngo to your “home” directory: cd ~ or simply cd\ngo to directory using absolute path, works regardless of your current working directory: cd /home/my_username/Desktop. Windows uses a slightly different syntax with the slashes between the folder names reversed, \\, e.g. cd C:\\Users\\MY_USERNAME\\Desktop.\n\nPro tip 1: Dragging and dropping a file or folder into the terminal window will paste the absolute path into the window.\nPro tip 2: Use the tab key to autocomplete unambiguous directory and file names. Hit tab twice to see all ambiguous options.\n\n\nUse arrow-up and arrow-down to repeat previous commands. Or search for previous commands with CTRL + r.\n\nA few Git commands:\n\ngit status is the most used git command and informs you of your current branch, any changes or untracked files, and whether you are in sync with your remotes.\ngit remote -v lists all remotes. Very useful for making sure git knows about your remote and that the remote address is correct.\ngit remote add origin GITHUB_URL adds the remote GITHUB_URL with nickname origin.\ngit remote set-url origin GITHUB_URL changes the remote url of origin to GITHUB_URL. This way you can fix typos in the remote url.\nFeel free to suggest other commands that deserve listing in a GitHub issue.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>The shell</span>"
    ]
  },
  {
    "objectID": "comic-relief.html",
    "href": "comic-relief.html",
    "title": "Appendix B — Comic relief",
    "section": "",
    "text": "It’s not you, it’s Git!\nIf you’re not crying already, these fictional-but-realistic Git man pages should do the trick:\n\ngit-man-page-generator\nAnd, of course, the underlying source is also available on GitHub:\n\nhttps://github.com/Lokaltog/git-man-page-generator\n\n\nIf you can tolerate adult and often offensive language, you might enjoy:\n\nhttp://www.commitlogsfromlastnight.com\nhttp://ohshitgit.com/\n\nYour commits will look more glorious scrolling by Star Wars style:\n\nhttp://starlogs.net\nhttp://starlogs.net/#jennybc/googlesheets\nDo this for any repo: http://starlogs.net/#USER/REPO",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Comic relief</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Appendix C — Resources",
    "section": "",
    "text": "We practice what we preach! This site is created with Git and R markdown, using the bookdown package. Go ahead and peek behind the scenes.\nLong-term, you should understand more about what you are doing. Rote clicking in RStudio may be a short-term survival method but won’t work for long.\n\nGit for Humans is a great set of slides by Alice Bartlett, originally delivered in 2016 at UX Brighton.\nGit in Practice by Mike McQuaid is an more approachable book, probably better than Pro Git (below) for most people starting out. Ancillary materials on GitHub.\nThe book Pro Git is fantastic and comprehensive.\nOh My Git! is a free and open source interactive game for learning Git. It’s very beginner friendly, using a graph to visualise the worktree. Lessons can be completed using a playing card interface in addition to the built-in command line, which is there for when users become more comfortable.\nGitHub’s own training materials may be helpful. They also point to many other resources\nFind a powerful Git client (Chapter 8) if you’d like to minimize your usage of Git from the command line.\nTen Simple Rules for Taking Advantage of Git and GitHub http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004947\nRStudio’s guide Version Control with Git and SVN\nThe book Team Geek has insightful advice for the human and collaborative aspects of version control. It proposes Git strategies suited to different characteristics of teams.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Appendix D — References",
    "section": "",
    "text": "Bartlett, Alice. 2016. “Git for Humans.” Financial Times,\nLondon; Talk at UX Brighton. https://speakerdeck.com/alicebartlett/git-for-humans.\n\n\nPerez-Riverol, Yasset, Laurent Gatto, Rui Wang, Timo Sachsenberg, Julian\nUszkoreit, Felipe da Veiga Leprevost, Christian Fufezan, et al. 2016.\n“Ten Simple Rules for Taking Advantage of Git and GitHub.”\nPLOS Computational Biology 12 (7): 1–11. https://doi.org/10.1371/journal.pcbi.1004947.\n\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility\nand Increased Transparency in Science.” Source Code for\nBiology and Medicine 8 (1): 7. https://doi.org/10.1186/1751-0473-8-7.\n\n\nWickham, Hadley. 2015. R Packages. 1st ed. O’Reilly Media, Inc.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>References</span>"
    ]
  }
]